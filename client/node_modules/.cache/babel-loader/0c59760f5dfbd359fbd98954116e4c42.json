{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\bellis\\\\Desktop\\\\onstore\\\\lstore\\\\client\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\bellis\\\\Desktop\\\\onstore\\\\lstore\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\bellis\\\\Desktop\\\\onstore\\\\lstore\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\bellis\\\\Desktop\\\\onstore\\\\lstore\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar axios_1 = __importDefault(require(\"axios\"));\n\nvar Cookies = __importStar(require(\"js-cookie\"));\n\nvar qs = __importStar(require(\"qs\"));\n\nvar Strapi =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Default constructor.\n   * @param baseURL Your Strapi host.\n   * @param axiosConfig Extend Axios configuration.\n   */\n  function Strapi(baseURL, storeConfig, requestConfig) {\n    _classCallCheck(this, Strapi);\n\n    this.axios = axios_1.default.create(Object.assign({\n      baseURL: baseURL,\n      paramsSerializer: qs.stringify\n    }, requestConfig));\n    this.storeConfig = Object.assign({\n      cookie: {\n        key: 'jwt',\n        options: {\n          path: '/'\n        }\n      },\n      localStorage: {\n        key: 'jwt'\n      }\n    }, storeConfig);\n\n    if (this.isBrowser()) {\n      var existingToken;\n\n      if (this.storeConfig.cookie) {\n        existingToken = Cookies.get(this.storeConfig.cookie.key);\n      } else if (this.storeConfig.localStorage) {\n        existingToken = JSON.parse(window.localStorage.getItem(this.storeConfig.localStorage.key));\n      }\n\n      if (existingToken) {\n        this.setToken(existingToken, true);\n      }\n    }\n  }\n  /**\n   * Axios request\n   * @param method Request method\n   * @param url Server URL\n   * @param requestConfig Custom Axios config\n   */\n\n\n  _createClass(Strapi, [{\n    key: \"request\",\n    value: function () {\n      var _request = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(method, url, requestConfig) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return this.axios.request(Object.assign({\n                  method: method,\n                  url: url\n                }, requestConfig));\n\n              case 3:\n                response = _context.sent;\n                return _context.abrupt(\"return\", response.data);\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n\n                if (!_context.t0.response) {\n                  _context.next = 13;\n                  break;\n                }\n\n                throw new Error(_context.t0.response.data.message);\n\n              case 13:\n                throw _context.t0;\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 7]]);\n      }));\n\n      function request(_x, _x2, _x3) {\n        return _request.apply(this, arguments);\n      }\n\n      return request;\n    }()\n    /**\n     * Register a new user.\n     * @param username\n     * @param email\n     * @param password\n     * @returns Authentication User token and profile\n     */\n\n  }, {\n    key: \"register\",\n    value: function () {\n      var _register = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(username, email, password) {\n        var authentication;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.clearToken();\n                _context2.next = 3;\n                return this.request('post', '/auth/local/register', {\n                  data: {\n                    email: email,\n                    password: password,\n                    username: username\n                  }\n                });\n\n              case 3:\n                authentication = _context2.sent;\n                this.setToken(authentication.jwt);\n                return _context2.abrupt(\"return\", authentication);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function register(_x4, _x5, _x6) {\n        return _register.apply(this, arguments);\n      }\n\n      return register;\n    }()\n    /**\n     * Login by getting an authentication token.\n     * @param identifier Can either be an email or a username.\n     * @param password\n     * @returns Authentication User token and profile\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(identifier, password) {\n        var authentication;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.clearToken();\n                _context3.next = 3;\n                return this.request('post', '/auth/local', {\n                  data: {\n                    identifier: identifier,\n                    password: password\n                  }\n                });\n\n              case 3:\n                authentication = _context3.sent;\n                this.setToken(authentication.jwt);\n                return _context3.abrupt(\"return\", authentication);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function login(_x7, _x8) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Sends an email to a user with the link of your reset password page.\n     * This link contains an URL param code which is required to reset user password.\n     * Received link url format https://my-domain.com/rest-password?code=privateCode.\n     * @param email\n     * @param url Link that user will receive.\n     */\n\n  }, {\n    key: \"forgotPassword\",\n    value: function () {\n      var _forgotPassword = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(email, url) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.clearToken();\n                _context4.next = 3;\n                return this.request('post', '/auth/forgot-password', {\n                  data: {\n                    email: email,\n                    url: url\n                  }\n                });\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function forgotPassword(_x9, _x10) {\n        return _forgotPassword.apply(this, arguments);\n      }\n\n      return forgotPassword;\n    }()\n    /**\n     * Reset the user password.\n     * @param code Is the url params received from the email link (see forgot password).\n     * @param password\n     * @param passwordConfirmation\n     */\n\n  }, {\n    key: \"resetPassword\",\n    value: function () {\n      var _resetPassword = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(code, password, passwordConfirmation) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                this.clearToken();\n                _context5.next = 3;\n                return this.request('post', '/auth/reset-password', {\n                  data: {\n                    code: code,\n                    password: password,\n                    passwordConfirmation: passwordConfirmation\n                  }\n                });\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function resetPassword(_x11, _x12, _x13) {\n        return _resetPassword.apply(this, arguments);\n      }\n\n      return resetPassword;\n    }()\n    /**\n     * Retrieve the connect provider URL\n     * @param provider\n     */\n\n  }, {\n    key: \"getProviderAuthenticationUrl\",\n    value: function getProviderAuthenticationUrl(provider) {\n      return \"\".concat(this.axios.defaults.baseURL, \"/connect/\").concat(provider);\n    }\n    /**\n     * Authenticate the user with the token present on the URL (for browser) or in `params` (on Node.js)\n     * @param provider\n     * @param params\n     */\n\n  }, {\n    key: \"authenticateProvider\",\n    value: function () {\n      var _authenticateProvider = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(provider, params) {\n        var authentication;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                this.clearToken(); // Handling browser query\n\n                if (this.isBrowser()) {\n                  params = qs.parse(window.location.search, {\n                    ignoreQueryPrefix: true\n                  });\n                }\n\n                _context6.next = 4;\n                return this.request('get', \"/auth/\".concat(provider, \"/callback\"), {\n                  params: params\n                });\n\n              case 4:\n                authentication = _context6.sent;\n                this.setToken(authentication.jwt);\n                return _context6.abrupt(\"return\", authentication);\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function authenticateProvider(_x14, _x15) {\n        return _authenticateProvider.apply(this, arguments);\n      }\n\n      return authenticateProvider;\n    }()\n    /**\n     * List entries\n     * @param contentTypePluralized\n     * @param params Filter and order queries.\n     */\n\n  }, {\n    key: \"getEntries\",\n    value: function getEntries(contentTypePluralized, params) {\n      return this.request('get', \"/\".concat(contentTypePluralized), {\n        params: params\n      });\n    }\n    /**\n     * Get the total count of entries with the provided criteria\n     * @param contentType\n     * @param params Filter and order queries.\n     */\n\n  }, {\n    key: \"getEntryCount\",\n    value: function getEntryCount(contentType, params) {\n      return this.request('get', \"/\".concat(contentType, \"/count\"), {\n        params: params\n      });\n    }\n    /**\n     * Get a specific entry\n     * @param contentTypePluralized Type of entry pluralized\n     * @param id ID of entry\n     */\n\n  }, {\n    key: \"getEntry\",\n    value: function getEntry(contentTypePluralized, id) {\n      return this.request('get', \"/\".concat(contentTypePluralized, \"/\").concat(id));\n    }\n    /**\n     * Create data\n     * @param contentTypePluralized Type of entry pluralized\n     * @param data New entry\n     */\n\n  }, {\n    key: \"createEntry\",\n    value: function createEntry(contentTypePluralized, data) {\n      return this.request('post', \"/\".concat(contentTypePluralized), {\n        data: data\n      });\n    }\n    /**\n     * Update data\n     * @param contentTypePluralized Type of entry pluralized\n     * @param id ID of entry\n     * @param data\n     */\n\n  }, {\n    key: \"updateEntry\",\n    value: function updateEntry(contentTypePluralized, id, data) {\n      return this.request('put', \"/\".concat(contentTypePluralized, \"/\").concat(id), {\n        data: data\n      });\n    }\n    /**\n     * Delete an entry\n     * @param contentTypePluralized Type of entry pluralized\n     * @param id ID of entry\n     */\n\n  }, {\n    key: \"deleteEntry\",\n    value: function deleteEntry(contentTypePluralized, id) {\n      return this.request('delete', \"/\".concat(contentTypePluralized, \"/\").concat(id));\n    }\n    /**\n     * Search for files\n     * @param query Keywords\n     */\n\n  }, {\n    key: \"searchFiles\",\n    value: function searchFiles(query) {\n      return this.request('get', \"/upload/search/\".concat(decodeURIComponent(query)));\n    }\n    /**\n     * Get files\n     * @param params Filter and order queries\n     * @returns Object[] Files data\n     */\n\n  }, {\n    key: \"getFiles\",\n    value: function getFiles(params) {\n      return this.request('get', '/upload/files', {\n        params: params\n      });\n    }\n    /**\n     * Get file\n     * @param id ID of entry\n     */\n\n  }, {\n    key: \"getFile\",\n    value: function getFile(id) {\n      return this.request('get', \"/upload/files/\".concat(id));\n    }\n    /**\n     * Upload files\n     *\n     * ### Browser example\n     * ```js\n     * const form = new FormData();\n     * form.append('files', fileInputElement.files[0], 'file-name.ext');\n     * form.append('files', fileInputElement.files[1], 'file-2-name.ext');\n     * const files = await strapi.upload(form);\n     * ```\n     *\n     * ### Node.js example\n     * ```js\n     * const FormData = require('form-data');\n     * const fs = require('fs');\n     * const form = new FormData();\n     * form.append('files', fs.createReadStream('./file-name.ext'), 'file-name.ext');\n     * const files = await strapi.upload(form, {\n     *   headers: form.getHeaders()\n     * });\n     * ```\n     *\n     * @param data FormData\n     * @param requestConfig\n     */\n\n  }, {\n    key: \"upload\",\n    value: function upload(data, requestConfig) {\n      return this.request('post', '/upload', Object.assign({\n        data: data\n      }, requestConfig));\n    }\n    /**\n     * Set token on Axios configuration\n     * @param token Retrieved by register or login\n     */\n\n  }, {\n    key: \"setToken\",\n    value: function setToken(token, comesFromStorage) {\n      this.axios.defaults.headers.common.Authorization = 'Bearer ' + token;\n\n      if (this.isBrowser() && !comesFromStorage) {\n        if (this.storeConfig.localStorage) {\n          window.localStorage.setItem(this.storeConfig.localStorage.key, JSON.stringify(token));\n        }\n\n        if (this.storeConfig.cookie) {\n          Cookies.set(this.storeConfig.cookie.key, token, this.storeConfig.cookie.options);\n        }\n      }\n    }\n    /**\n     * Remove token from Axios configuration\n     */\n\n  }, {\n    key: \"clearToken\",\n    value: function clearToken() {\n      delete this.axios.defaults.headers.common.Authorization;\n\n      if (this.isBrowser()) {\n        if (this.storeConfig.localStorage) {\n          window.localStorage.removeItem(this.storeConfig.localStorage.key);\n        }\n\n        if (this.storeConfig.cookie) {\n          Cookies.remove(this.storeConfig.cookie.key, this.storeConfig.cookie.options);\n        }\n      }\n    }\n    /**\n     * Check if it runs on browser\n     */\n\n  }, {\n    key: \"isBrowser\",\n    value: function isBrowser() {\n      return typeof window !== 'undefined';\n    }\n  }]);\n\n  return Strapi;\n}();\n\nexports.default = Strapi;","map":null,"metadata":{},"sourceType":"script"}