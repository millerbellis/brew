{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\bellis\\\\Desktop\\\\onstore\\\\lstore\\\\client\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\bellis\\\\Desktop\\\\onstore\\\\lstore\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"C:\\\\Users\\\\bellis\\\\Desktop\\\\onstore\\\\lstore\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\bellis\\\\Desktop\\\\onstore\\\\lstore\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\bellis\\\\Desktop\\\\onstore\\\\lstore\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\bellis\\\\Desktop\\\\onstore\\\\lstore\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\bellis\\\\Desktop\\\\onstore\\\\lstore\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\bellis\\\\Desktop\\\\onstore\\\\lstore\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\bellis\\\\Desktop\\\\onstore\\\\lstore\\\\client\\\\src\\\\components\\\\checkout.js\";\nimport React from \"react\"; // prettier-ignore\n\nimport { Container, Box, Button, Heading, Text, TextField, Modal, Spinner } from \"gestalt\"; // prettier-ignore\n\nimport { Elements, StripeProvider, CardElement, injectStripe } from 'react-stripe-elements';\nimport ToastMessage from \"./ToastMessage\";\nimport { getCart, calculatePrice, clearCart, calculateAmount } from \"../utils\";\nimport { withRouter } from \"react-router-dom\";\nimport Strapi from \"strapi-sdk-javascript/build/main\";\nvar apiUrl = process.env.API_URL || \"http://localhost:1337\";\nvar strapi = new Strapi(apiUrl);\n\nvar _CheckoutForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(_CheckoutForm, _React$Component);\n\n  function _CheckoutForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, _CheckoutForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(_CheckoutForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      cartItems: [],\n      address: \"\",\n      postalCode: \"\",\n      city: \"\",\n      confirmationEmailAddress: \"\",\n      toast: false,\n      toastMessage: \"\",\n      orderProcessing: false,\n      modal: false\n    };\n\n    _this.handleChange = function (_ref) {\n      var event = _ref.event,\n          value = _ref.value;\n      event.persist();\n\n      _this.setState(_defineProperty({}, event.target.name, value));\n    };\n\n    _this.handleConfirmOrder =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(event) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event.preventDefault();\n\n                if (!_this.isFormEmpty(_this.state)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                _this.showToast(\"Fill in all fields\");\n\n                return _context.abrupt(\"return\");\n\n              case 4:\n                _this.setState({\n                  modal: true\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.handleSubmitOrder =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var _this$state, cartItems, city, address, postalCode, amount, token, response;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _this$state = _this.state, cartItems = _this$state.cartItems, city = _this$state.city, address = _this$state.address, postalCode = _this$state.postalCode;\n              amount = calculateAmount(cartItems); // Process order\n\n              _this.setState({\n                orderProcessing: true\n              });\n\n              _context2.prev = 3;\n              _context2.next = 6;\n              return _this.props.stripe.createToken();\n\n            case 6:\n              response = _context2.sent;\n              token = response.token.id;\n              _context2.next = 10;\n              return strapi.createEntry(\"orders\", {\n                amount: amount,\n                brews: cartItems,\n                city: city,\n                postalCode: postalCode,\n                address: address,\n                token: token\n              });\n\n            case 10:\n              _this.setState({\n                orderProcessing: false,\n                modal: false\n              });\n\n              clearCart();\n\n              _this.showToast(\"Your order has been successfully submitted!\", true);\n\n              _context2.next = 19;\n              break;\n\n            case 15:\n              _context2.prev = 15;\n              _context2.t0 = _context2[\"catch\"](3);\n\n              _this.setState({\n                orderProcessing: false,\n                modal: false\n              });\n\n              _this.showToast(_context2.t0.message);\n\n            case 19:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this, [[3, 15]]);\n    }));\n\n    _this.isFormEmpty = function (_ref4) {\n      var address = _ref4.address,\n          postalCode = _ref4.postalCode,\n          city = _ref4.city,\n          confirmationEmailAddress = _ref4.confirmationEmailAddress;\n      return !address || !postalCode || !city || !confirmationEmailAddress;\n    };\n\n    _this.showToast = function (toastMessage) {\n      var redirect = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      _this.setState({\n        toast: true,\n        toastMessage: toastMessage\n      });\n\n      setTimeout(function () {\n        return _this.setState({\n          toast: false,\n          toastMessage: \"\"\n        }, // if true passed to 'redirect' argument, redirect home\n        function () {\n          return redirect && _this.props.history.push(\"/\");\n        });\n      }, 5000);\n    };\n\n    _this.closeModal = function () {\n      return _this.setState({\n        modal: false\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(_CheckoutForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        cartItems: getCart()\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // prettier-ignore\n      var _this$state2 = this.state,\n          toast = _this$state2.toast,\n          toastMessage = _this$state2.toastMessage,\n          cartItems = _this$state2.cartItems,\n          modal = _this$state2.modal,\n          orderProcessing = _this$state2.orderProcessing;\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(Box, {\n        color: \"darkWash\",\n        margin: 4,\n        padding: 4,\n        shape: \"rounded\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        direction: \"column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Heading, {\n        color: \"midnight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"Checkout\"), cartItems.length > 0 ? React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(Box, {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        direction: \"column\",\n        marginTop: 2,\n        marginBottom: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(Text, {\n        color: \"darkGray\",\n        italic: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, cartItems.length, \" Items for Checkout\"), React.createElement(Box, {\n        padding: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, cartItems.map(function (item) {\n        return React.createElement(Box, {\n          key: item._id,\n          padding: 1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, React.createElement(Text, {\n          color: \"midnight\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, item.name, \" x \", item.quantity, \" - $\", item.quantity * item.price));\n      })), React.createElement(Text, {\n        bold: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"Total Amount: \", calculatePrice(cartItems))), React.createElement(\"form\", {\n        style: {\n          display: \"inlineBlock\",\n          textAlign: \"center\",\n          maxWidth: 450\n        },\n        onSubmit: this.handleConfirmOrder,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"address\",\n        type: \"text\",\n        name: \"address\",\n        placeholder: \"Shipping Address\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }), React.createElement(TextField, {\n        id: \"postalCode\",\n        type: \"text\",\n        name: \"postalCode\",\n        placeholder: \"Postal Code\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }), React.createElement(TextField, {\n        id: \"city\",\n        type: \"text\",\n        name: \"city\",\n        placeholder: \"City of Residence\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }), React.createElement(TextField, {\n        id: \"confirmationEmailAddress\",\n        type: \"email\",\n        name: \"confirmationEmailAddress\",\n        placeholder: \"Confirmation Email Address\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }), React.createElement(CardElement, {\n        id: \"stripe__input\",\n        onReady: function onReady(input) {\n          return input.focus();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        id: \"stripe__button\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"Submit\"))) : // Default Text if No Items in Cart\n      React.createElement(Box, {\n        color: \"darkWash\",\n        shape: \"rounded\",\n        padding: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(Heading, {\n        align: \"center\",\n        color: \"watermelon\",\n        size: \"xs\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, \"Your Cart is Empty\"), React.createElement(Text, {\n        align: \"center\",\n        italic: true,\n        color: \"green\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, \"Add some brews!\"))), modal && React.createElement(ConfirmationModal, {\n        orderProcessing: orderProcessing,\n        cartItems: cartItems,\n        closeModal: this.closeModal,\n        handleSubmitOrder: this.handleSubmitOrder,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }), React.createElement(ToastMessage, {\n        show: toast,\n        message: toastMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return _CheckoutForm;\n}(React.Component);\n\nvar ConfirmationModal = function ConfirmationModal(_ref5) {\n  var orderProcessing = _ref5.orderProcessing,\n      cartItems = _ref5.cartItems,\n      closeModal = _ref5.closeModal,\n      handleSubmitOrder = _ref5.handleSubmitOrder;\n  return React.createElement(Modal, {\n    accessibilityCloseLabel: \"close\",\n    accessibilityModalLabel: \"Confirm Your Order\",\n    heading: \"Confirm Your Order\",\n    onDismiss: closeModal,\n    footer: React.createElement(Box, {\n      display: \"flex\",\n      marginRight: -1,\n      marginLeft: -1,\n      justifyContent: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, React.createElement(Box, {\n      padding: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(Button, {\n      size: \"lg\",\n      color: \"red\",\n      text: \"Submit\",\n      disabled: orderProcessing,\n      onClick: handleSubmitOrder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    })), React.createElement(Box, {\n      padding: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(Button, {\n      size: \"lg\",\n      text: \"Cancel\",\n      disabled: orderProcessing,\n      onClick: closeModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }))),\n    role: \"alertdialog\",\n    size: \"sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, !orderProcessing && React.createElement(Box, {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    direction: \"column\",\n    padding: 2,\n    color: \"lightWash\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256\n    },\n    __self: this\n  }, cartItems.map(function (item) {\n    return React.createElement(Box, {\n      key: item._id,\n      padding: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, React.createElement(Text, {\n      size: \"lg\",\n      color: \"red\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, item.name, \" x \", item.quantity, \" - $\", item.quantity * item.price));\n  }), React.createElement(Box, {\n    paddingY: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  }, React.createElement(Text, {\n    size: \"lg\",\n    bold: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272\n    },\n    __self: this\n  }, \"Total: \", calculatePrice(cartItems)))), React.createElement(Spinner, {\n    show: orderProcessing,\n    accessibilityLabel: \"Order Processing Spinner\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280\n    },\n    __self: this\n  }), orderProcessing && React.createElement(Text, {\n    align: \"center\",\n    italic: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  }, \"Submitting Order...\"));\n};\n\nvar CheckoutForm = withRouter(injectStripe(_CheckoutForm));\n\nvar Checkout = function Checkout() {\n  return React.createElement(StripeProvider, {\n    apiKey: \"pk_test_QPXQHey0J1AkutAxuoosyA3K\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295\n    },\n    __self: this\n  }, React.createElement(Elements, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296\n    },\n    __self: this\n  }, React.createElement(CheckoutForm, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297\n    },\n    __self: this\n  })));\n};\n\nexport default Checkout;","map":{"version":3,"sources":["C:\\Users\\bellis\\Desktop\\onstore\\lstore\\client\\src\\components\\checkout.js"],"names":["React","Container","Box","Button","Heading","Text","TextField","Modal","Spinner","Elements","StripeProvider","CardElement","injectStripe","ToastMessage","getCart","calculatePrice","clearCart","calculateAmount","withRouter","Strapi","apiUrl","process","env","API_URL","strapi","_CheckoutForm","state","cartItems","address","postalCode","city","confirmationEmailAddress","toast","toastMessage","orderProcessing","modal","handleChange","event","value","persist","setState","target","name","handleConfirmOrder","preventDefault","isFormEmpty","showToast","handleSubmitOrder","amount","props","stripe","createToken","response","token","id","createEntry","brews","message","redirect","setTimeout","history","push","closeModal","length","map","item","_id","quantity","price","display","textAlign","maxWidth","input","focus","Component","ConfirmationModal","CheckoutForm","Checkout"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,MAAzB,EAAiCC,OAAjC,EAA0CC,IAA1C,EAAgDC,SAAhD,EAA2DC,KAA3D,EAAkEC,OAAlE,QAAiF,SAAjF,C,CACA;;AACA,SAASC,QAAT,EAAmBC,cAAnB,EAAmCC,WAAnC,EAAgDC,YAAhD,QAAoE,uBAApE;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,OAAT,EAAkBC,cAAlB,EAAkCC,SAAlC,EAA6CC,eAA7C,QAAoE,UAApE;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,MAAP,MAAmB,kCAAnB;AACA,IAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,OAAZ,IAAuB,uBAAtC;AACA,IAAMC,MAAM,GAAG,IAAIL,MAAJ,CAAWC,MAAX,CAAf;;IAEMK,a;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,SAAS,EAAE,EADL;AAENC,MAAAA,OAAO,EAAE,EAFH;AAGNC,MAAAA,UAAU,EAAE,EAHN;AAINC,MAAAA,IAAI,EAAE,EAJA;AAKNC,MAAAA,wBAAwB,EAAE,EALpB;AAMNC,MAAAA,KAAK,EAAE,KAND;AAONC,MAAAA,YAAY,EAAE,EAPR;AAQNC,MAAAA,eAAe,EAAE,KARX;AASNC,MAAAA,KAAK,EAAE;AATD,K;;UAgBRC,Y,GAAe,gBAAsB;AAAA,UAAnBC,KAAmB,QAAnBA,KAAmB;AAAA,UAAZC,KAAY,QAAZA,KAAY;AACnCD,MAAAA,KAAK,CAACE,OAAN;;AACA,YAAKC,QAAL,qBAAiBH,KAAK,CAACI,MAAN,CAAaC,IAA9B,EAAqCJ,KAArC;AACD,K;;UAEDK,kB;;;;;+BAAqB,iBAAMN,KAAN;AAAA;AAAA;AAAA;AAAA;AACnBA,gBAAAA,KAAK,CAACO,cAAN;;AADmB,qBAGf,MAAKC,WAAL,CAAiB,MAAKnB,KAAtB,CAHe;AAAA;AAAA;AAAA;;AAIjB,sBAAKoB,SAAL,CAAe,oBAAf;;AAJiB;;AAAA;AAQnB,sBAAKN,QAAL,CAAc;AAAEL,kBAAAA,KAAK,EAAE;AAAT,iBAAd;;AARmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;UAWrBY,iB;;;;6BAAoB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4BAC+B,MAAKrB,KADpC,EACVC,SADU,eACVA,SADU,EACCG,IADD,eACCA,IADD,EACOF,OADP,eACOA,OADP,EACgBC,UADhB,eACgBA,UADhB;AAGZmB,cAAAA,MAHY,GAGH/B,eAAe,CAACU,SAAD,CAHZ,EAIlB;;AACA,oBAAKa,QAAL,CAAc;AAAEN,gBAAAA,eAAe,EAAE;AAAnB,eAAd;;AALkB;AAAA;AAAA,qBAQO,MAAKe,KAAL,CAAWC,MAAX,CAAkBC,WAAlB,EARP;;AAAA;AAQVC,cAAAA,QARU;AAShBC,cAAAA,KAAK,GAAGD,QAAQ,CAACC,KAAT,CAAeC,EAAvB;AATgB;AAAA,qBAUV9B,MAAM,CAAC+B,WAAP,CAAmB,QAAnB,EAA6B;AACjCP,gBAAAA,MAAM,EAANA,MADiC;AAEjCQ,gBAAAA,KAAK,EAAE7B,SAF0B;AAGjCG,gBAAAA,IAAI,EAAJA,IAHiC;AAIjCD,gBAAAA,UAAU,EAAVA,UAJiC;AAKjCD,gBAAAA,OAAO,EAAPA,OALiC;AAMjCyB,gBAAAA,KAAK,EAALA;AANiC,eAA7B,CAVU;;AAAA;AAkBhB,oBAAKb,QAAL,CAAc;AAAEN,gBAAAA,eAAe,EAAE,KAAnB;AAA0BC,gBAAAA,KAAK,EAAE;AAAjC,eAAd;;AACAnB,cAAAA,SAAS;;AACT,oBAAK8B,SAAL,CAAe,6CAAf,EAA8D,IAA9D;;AApBgB;AAAA;;AAAA;AAAA;AAAA;;AAsBhB,oBAAKN,QAAL,CAAc;AAAEN,gBAAAA,eAAe,EAAE,KAAnB;AAA0BC,gBAAAA,KAAK,EAAE;AAAjC,eAAd;;AACA,oBAAKW,SAAL,CAAe,aAAIW,OAAnB;;AAvBgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;UA2BpBZ,W,GAAc,iBAA6D;AAAA,UAA1DjB,OAA0D,SAA1DA,OAA0D;AAAA,UAAjDC,UAAiD,SAAjDA,UAAiD;AAAA,UAArCC,IAAqC,SAArCA,IAAqC;AAAA,UAA/BC,wBAA+B,SAA/BA,wBAA+B;AACzE,aAAO,CAACH,OAAD,IAAY,CAACC,UAAb,IAA2B,CAACC,IAA5B,IAAoC,CAACC,wBAA5C;AACD,K;;UAEDe,S,GAAY,UAACb,YAAD,EAAoC;AAAA,UAArByB,QAAqB,uEAAV,KAAU;;AAC9C,YAAKlB,QAAL,CAAc;AAAER,QAAAA,KAAK,EAAE,IAAT;AAAeC,QAAAA,YAAY,EAAZA;AAAf,OAAd;;AACA0B,MAAAA,UAAU,CACR;AAAA,eACE,MAAKnB,QAAL,CACE;AAAER,UAAAA,KAAK,EAAE,KAAT;AAAgBC,UAAAA,YAAY,EAAE;AAA9B,SADF,EAEE;AACA;AAAA,iBAAMyB,QAAQ,IAAI,MAAKT,KAAL,CAAWW,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB,CAAlB;AAAA,SAHF,CADF;AAAA,OADQ,EAOR,IAPQ,CAAV;AASD,K;;UAEDC,U,GAAa;AAAA,aAAM,MAAKtB,QAAL,CAAc;AAAEL,QAAAA,KAAK,EAAE;AAAT,OAAd,CAAN;AAAA,K;;;;;;;wCAhEO;AAClB,WAAKK,QAAL,CAAc;AAAEb,QAAAA,SAAS,EAAEb,OAAO;AAApB,OAAd;AACD;;;6BAgEQ;AACP;AADO,yBAE4D,KAAKY,KAFjE;AAAA,UAECM,KAFD,gBAECA,KAFD;AAAA,UAEQC,YAFR,gBAEQA,YAFR;AAAA,UAEsBN,SAFtB,gBAEsBA,SAFtB;AAAA,UAEiCQ,KAFjC,gBAEiCA,KAFjC;AAAA,UAEwCD,eAFxC,gBAEwCA,eAFxC;AAIP,aACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,GAAD;AACE,QAAA,KAAK,EAAC,UADR;AAEE,QAAA,MAAM,EAAE,CAFV;AAGE,QAAA,OAAO,EAAE,CAHX;AAIE,QAAA,KAAK,EAAC,SAJR;AAKE,QAAA,OAAO,EAAC,MALV;AAME,QAAA,cAAc,EAAC,QANjB;AAOE,QAAA,UAAU,EAAC,QAPb;AAQE,QAAA,SAAS,EAAC,QARZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAWE,oBAAC,OAAD;AAAS,QAAA,KAAK,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAXF,EAYGP,SAAS,CAACoC,MAAV,GAAmB,CAAnB,GACC,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE,oBAAC,GAAD;AACE,QAAA,OAAO,EAAC,MADV;AAEE,QAAA,cAAc,EAAC,QAFjB;AAGE,QAAA,UAAU,EAAC,QAHb;AAIE,QAAA,SAAS,EAAC,QAJZ;AAKE,QAAA,SAAS,EAAE,CALb;AAME,QAAA,YAAY,EAAE,CANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAC,UAAZ;AAAuB,QAAA,MAAM,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGpC,SAAS,CAACoC,MADb,wBARF,EAWE,oBAAC,GAAD;AAAK,QAAA,OAAO,EAAE,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGpC,SAAS,CAACqC,GAAV,CAAc,UAAAC,IAAI;AAAA,eACjB,oBAAC,GAAD;AAAK,UAAA,GAAG,EAAEA,IAAI,CAACC,GAAf;AAAoB,UAAA,OAAO,EAAE,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAC,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGD,IAAI,CAACvB,IADR,SACiBuB,IAAI,CAACE,QADtB,UAEGF,IAAI,CAACE,QAAL,GAAgBF,IAAI,CAACG,KAFxB,CADF,CADiB;AAAA,OAAlB,CADH,CAXF,EAqBE,oBAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAA0BrD,cAAc,CAACY,SAAD,CAAxC,CArBF,CAFF,EA0BE;AACE,QAAA,KAAK,EAAE;AACL0C,UAAAA,OAAO,EAAE,aADJ;AAELC,UAAAA,SAAS,EAAE,QAFN;AAGLC,UAAAA,QAAQ,EAAE;AAHL,SADT;AAME,QAAA,QAAQ,EAAE,KAAK5B,kBANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SASE,oBAAC,SAAD;AACE,QAAA,EAAE,EAAC,SADL;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,IAAI,EAAC,SAHP;AAIE,QAAA,WAAW,EAAC,kBAJd;AAKE,QAAA,QAAQ,EAAE,KAAKP,YALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATF,EAiBE,oBAAC,SAAD;AACE,QAAA,EAAE,EAAC,YADL;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,IAAI,EAAC,YAHP;AAIE,QAAA,WAAW,EAAC,aAJd;AAKE,QAAA,QAAQ,EAAE,KAAKA,YALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAjBF,EAyBE,oBAAC,SAAD;AACE,QAAA,EAAE,EAAC,MADL;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,WAAW,EAAC,mBAJd;AAKE,QAAA,QAAQ,EAAE,KAAKA,YALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAzBF,EAiCE,oBAAC,SAAD;AACE,QAAA,EAAE,EAAC,0BADL;AAEE,QAAA,IAAI,EAAC,OAFP;AAGE,QAAA,IAAI,EAAC,0BAHP;AAIE,QAAA,WAAW,EAAC,4BAJd;AAKE,QAAA,QAAQ,EAAE,KAAKA,YALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAjCF,EAyCE,oBAAC,WAAD;AACE,QAAA,EAAE,EAAC,eADL;AAEE,QAAA,OAAO,EAAE,iBAAAoC,KAAK;AAAA,iBAAIA,KAAK,CAACC,KAAN,EAAJ;AAAA,SAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAzCF,EA6CE;AAAQ,QAAA,EAAE,EAAC,gBAAX;AAA4B,QAAA,IAAI,EAAC,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA7CF,CA1BF,CADD,GA8EC;AACA,0BAAC,GAAD;AAAK,QAAA,KAAK,EAAC,UAAX;AAAsB,QAAA,KAAK,EAAC,SAA5B;AAAsC,QAAA,OAAO,EAAE,CAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,OAAD;AAAS,QAAA,KAAK,EAAC,QAAf;AAAwB,QAAA,KAAK,EAAC,YAA9B;AAA2C,QAAA,IAAI,EAAC,IAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,EAIE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAC,QAAZ;AAAqB,QAAA,MAAM,MAA3B;AAA4B,QAAA,KAAK,EAAC,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAJF,CA3FJ,CADF,EAuGGtC,KAAK,IACJ,oBAAC,iBAAD;AACE,QAAA,eAAe,EAAED,eADnB;AAEE,QAAA,SAAS,EAAEP,SAFb;AAGE,QAAA,UAAU,EAAE,KAAKmC,UAHnB;AAIE,QAAA,iBAAiB,EAAE,KAAKf,iBAJ1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAxGJ,EA+GE,oBAAC,YAAD;AAAc,QAAA,IAAI,EAAEf,KAApB;AAA2B,QAAA,OAAO,EAAEC,YAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA/GF,CADF;AAmHD;;;;EAtMyBjC,KAAK,CAAC0E,S;;AAyMlC,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,MACxBzC,eADwB,SACxBA,eADwB;AAAA,MAExBP,SAFwB,SAExBA,SAFwB;AAAA,MAGxBmC,UAHwB,SAGxBA,UAHwB;AAAA,MAIxBf,iBAJwB,SAIxBA,iBAJwB;AAAA,SAMxB,oBAAC,KAAD;AACE,IAAA,uBAAuB,EAAC,OAD1B;AAEE,IAAA,uBAAuB,EAAC,oBAF1B;AAGE,IAAA,OAAO,EAAC,oBAHV;AAIE,IAAA,SAAS,EAAEe,UAJb;AAKE,IAAA,MAAM,EACJ,oBAAC,GAAD;AACE,MAAA,OAAO,EAAC,MADV;AAEE,MAAA,WAAW,EAAE,CAAC,CAFhB;AAGE,MAAA,UAAU,EAAE,CAAC,CAHf;AAIE,MAAA,cAAc,EAAC,QAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAME,oBAAC,GAAD;AAAK,MAAA,OAAO,EAAE,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AACE,MAAA,IAAI,EAAC,IADP;AAEE,MAAA,KAAK,EAAC,KAFR;AAGE,MAAA,IAAI,EAAC,QAHP;AAIE,MAAA,QAAQ,EAAE5B,eAJZ;AAKE,MAAA,OAAO,EAAEa,iBALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CANF,EAeE,oBAAC,GAAD;AAAK,MAAA,OAAO,EAAE,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AACE,MAAA,IAAI,EAAC,IADP;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,QAAQ,EAAEb,eAHZ;AAIE,MAAA,OAAO,EAAE4B,UAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAfF,CANJ;AA+BE,IAAA,IAAI,EAAC,aA/BP;AAgCE,IAAA,IAAI,EAAC,IAhCP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAmCG,CAAC5B,eAAD,IACC,oBAAC,GAAD;AACE,IAAA,OAAO,EAAC,MADV;AAEE,IAAA,cAAc,EAAC,QAFjB;AAGE,IAAA,UAAU,EAAC,QAHb;AAIE,IAAA,SAAS,EAAC,QAJZ;AAKE,IAAA,OAAO,EAAE,CALX;AAME,IAAA,KAAK,EAAC,WANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGP,SAAS,CAACqC,GAAV,CAAc,UAAAC,IAAI;AAAA,WACjB,oBAAC,GAAD;AAAK,MAAA,GAAG,EAAEA,IAAI,CAACC,GAAf;AAAoB,MAAA,OAAO,EAAE,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,IAAX;AAAgB,MAAA,KAAK,EAAC,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,IAAI,CAACvB,IADR,SACiBuB,IAAI,CAACE,QADtB,UACoCF,IAAI,CAACE,QAAL,GAAgBF,IAAI,CAACG,KADzD,CADF,CADiB;AAAA,GAAlB,CARH,EAeE,oBAAC,GAAD;AAAK,IAAA,QAAQ,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,IAAX;AAAgB,IAAA,IAAI,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACUrD,cAAc,CAACY,SAAD,CADxB,CADF,CAfF,CApCJ,EA4DE,oBAAC,OAAD;AACE,IAAA,IAAI,EAAEO,eADR;AAEE,IAAA,kBAAkB,EAAC,0BAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5DF,EAgEGA,eAAe,IACd,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAC,QAAZ;AAAqB,IAAA,MAAM,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAjEJ,CANwB;AAAA,CAA1B;;AA8EA,IAAM0C,YAAY,GAAG1D,UAAU,CAACN,YAAY,CAACa,aAAD,CAAb,CAA/B;;AAEA,IAAMoD,QAAQ,GAAG,SAAXA,QAAW;AAAA,SACf,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAC,kCAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADe;AAAA,CAAjB;;AAQA,eAAeA,QAAf","sourcesContent":["import React from \"react\";\r\n// prettier-ignore\r\nimport { Container, Box, Button, Heading, Text, TextField, Modal, Spinner } from \"gestalt\";\r\n// prettier-ignore\r\nimport { Elements, StripeProvider, CardElement, injectStripe } from 'react-stripe-elements';\r\nimport ToastMessage from \"./ToastMessage\";\r\nimport { getCart, calculatePrice, clearCart, calculateAmount } from \"../utils\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Strapi from \"strapi-sdk-javascript/build/main\";\r\nconst apiUrl = process.env.API_URL || \"http://localhost:1337\";\r\nconst strapi = new Strapi(apiUrl);\r\n\r\nclass _CheckoutForm extends React.Component {\r\n  state = {\r\n    cartItems: [],\r\n    address: \"\",\r\n    postalCode: \"\",\r\n    city: \"\",\r\n    confirmationEmailAddress: \"\",\r\n    toast: false,\r\n    toastMessage: \"\",\r\n    orderProcessing: false,\r\n    modal: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ cartItems: getCart() });\r\n  }\r\n\r\n  handleChange = ({ event, value }) => {\r\n    event.persist();\r\n    this.setState({ [event.target.name]: value });\r\n  };\r\n\r\n  handleConfirmOrder = async event => {\r\n    event.preventDefault();\r\n\r\n    if (this.isFormEmpty(this.state)) {\r\n      this.showToast(\"Fill in all fields\");\r\n      return;\r\n    }\r\n\r\n    this.setState({ modal: true });\r\n  };\r\n\r\n  handleSubmitOrder = async () => {\r\n    const { cartItems, city, address, postalCode } = this.state;\r\n\r\n    const amount = calculateAmount(cartItems);\r\n    // Process order\r\n    this.setState({ orderProcessing: true });\r\n    let token;\r\n    try {\r\n      const response = await this.props.stripe.createToken();\r\n      token = response.token.id;\r\n      await strapi.createEntry(\"orders\", {\r\n        amount,\r\n        brews: cartItems,\r\n        city,\r\n        postalCode,\r\n        address,\r\n        token\r\n      });\r\n      this.setState({ orderProcessing: false, modal: false });\r\n      clearCart();\r\n      this.showToast(\"Your order has been successfully submitted!\", true);\r\n    } catch (err) {\r\n      this.setState({ orderProcessing: false, modal: false });\r\n      this.showToast(err.message);\r\n    }\r\n  };\r\n\r\n  isFormEmpty = ({ address, postalCode, city, confirmationEmailAddress }) => {\r\n    return !address || !postalCode || !city || !confirmationEmailAddress;\r\n  };\r\n\r\n  showToast = (toastMessage, redirect = false) => {\r\n    this.setState({ toast: true, toastMessage });\r\n    setTimeout(\r\n      () =>\r\n        this.setState(\r\n          { toast: false, toastMessage: \"\" },\r\n          // if true passed to 'redirect' argument, redirect home\r\n          () => redirect && this.props.history.push(\"/\")\r\n        ),\r\n      5000\r\n    );\r\n  };\r\n\r\n  closeModal = () => this.setState({ modal: false });\r\n\r\n  render() {\r\n    // prettier-ignore\r\n    const { toast, toastMessage, cartItems, modal, orderProcessing } = this.state;\r\n\r\n    return (\r\n      <Container>\r\n        <Box\r\n          color=\"darkWash\"\r\n          margin={4}\r\n          padding={4}\r\n          shape=\"rounded\"\r\n          display=\"flex\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          direction=\"column\"\r\n        >\r\n          {/* Checkout Form Heading */}\r\n          <Heading color=\"midnight\">Checkout</Heading>\r\n          {cartItems.length > 0 ? (\r\n            <React.Fragment>\r\n              {/* User Cart */}\r\n              <Box\r\n                display=\"flex\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                direction=\"column\"\r\n                marginTop={2}\r\n                marginBottom={6}\r\n              >\r\n                <Text color=\"darkGray\" italic>\r\n                  {cartItems.length} Items for Checkout\r\n                </Text>\r\n                <Box padding={2}>\r\n                  {cartItems.map(item => (\r\n                    <Box key={item._id} padding={1}>\r\n                      <Text color=\"midnight\">\r\n                        {item.name} x {item.quantity} - $\r\n                        {item.quantity * item.price}\r\n                      </Text>\r\n                    </Box>\r\n                  ))}\r\n                </Box>\r\n                <Text bold>Total Amount: {calculatePrice(cartItems)}</Text>\r\n              </Box>\r\n              {/* Checkout Form */}\r\n              <form\r\n                style={{\r\n                  display: \"inlineBlock\",\r\n                  textAlign: \"center\",\r\n                  maxWidth: 450\r\n                }}\r\n                onSubmit={this.handleConfirmOrder}\r\n              >\r\n                {/* Shipping Address Input */}\r\n                <TextField\r\n                  id=\"address\"\r\n                  type=\"text\"\r\n                  name=\"address\"\r\n                  placeholder=\"Shipping Address\"\r\n                  onChange={this.handleChange}\r\n                />\r\n                {/* Postal Code Input */}\r\n                <TextField\r\n                  id=\"postalCode\"\r\n                  type=\"text\"\r\n                  name=\"postalCode\"\r\n                  placeholder=\"Postal Code\"\r\n                  onChange={this.handleChange}\r\n                />\r\n                {/* City Input */}\r\n                <TextField\r\n                  id=\"city\"\r\n                  type=\"text\"\r\n                  name=\"city\"\r\n                  placeholder=\"City of Residence\"\r\n                  onChange={this.handleChange}\r\n                />\r\n                {/* Confirmation Email Address Input */}\r\n                <TextField\r\n                  id=\"confirmationEmailAddress\"\r\n                  type=\"email\"\r\n                  name=\"confirmationEmailAddress\"\r\n                  placeholder=\"Confirmation Email Address\"\r\n                  onChange={this.handleChange}\r\n                />\r\n                {/* Credit Card Element */}\r\n                <CardElement\r\n                  id=\"stripe__input\"\r\n                  onReady={input => input.focus()}\r\n                />\r\n                <button id=\"stripe__button\" type=\"submit\">\r\n                  Submit\r\n                </button>\r\n              </form>\r\n            </React.Fragment>\r\n          ) : (\r\n            // Default Text if No Items in Cart\r\n            <Box color=\"darkWash\" shape=\"rounded\" padding={4}>\r\n              <Heading align=\"center\" color=\"watermelon\" size=\"xs\">\r\n                Your Cart is Empty\r\n              </Heading>\r\n              <Text align=\"center\" italic color=\"green\">\r\n                Add some brews!\r\n              </Text>\r\n            </Box>\r\n          )}\r\n        </Box>\r\n        {/* Confirmation Modal */}\r\n        {modal && (\r\n          <ConfirmationModal\r\n            orderProcessing={orderProcessing}\r\n            cartItems={cartItems}\r\n            closeModal={this.closeModal}\r\n            handleSubmitOrder={this.handleSubmitOrder}\r\n          />\r\n        )}\r\n        <ToastMessage show={toast} message={toastMessage} />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst ConfirmationModal = ({\r\n  orderProcessing,\r\n  cartItems,\r\n  closeModal,\r\n  handleSubmitOrder\r\n}) => (\r\n  <Modal\r\n    accessibilityCloseLabel=\"close\"\r\n    accessibilityModalLabel=\"Confirm Your Order\"\r\n    heading=\"Confirm Your Order\"\r\n    onDismiss={closeModal}\r\n    footer={\r\n      <Box\r\n        display=\"flex\"\r\n        marginRight={-1}\r\n        marginLeft={-1}\r\n        justifyContent=\"center\"\r\n      >\r\n        <Box padding={1}>\r\n          <Button\r\n            size=\"lg\"\r\n            color=\"red\"\r\n            text=\"Submit\"\r\n            disabled={orderProcessing}\r\n            onClick={handleSubmitOrder}\r\n          />\r\n        </Box>\r\n        <Box padding={1}>\r\n          <Button\r\n            size=\"lg\"\r\n            text=\"Cancel\"\r\n            disabled={orderProcessing}\r\n            onClick={closeModal}\r\n          />\r\n        </Box>\r\n      </Box>\r\n    }\r\n    role=\"alertdialog\"\r\n    size=\"sm\"\r\n  >\r\n    {/* Order Summary */}\r\n    {!orderProcessing && (\r\n      <Box\r\n        display=\"flex\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        direction=\"column\"\r\n        padding={2}\r\n        color=\"lightWash\"\r\n      >\r\n        {cartItems.map(item => (\r\n          <Box key={item._id} padding={1}>\r\n            <Text size=\"lg\" color=\"red\">\r\n              {item.name} x {item.quantity} - ${item.quantity * item.price}\r\n            </Text>\r\n          </Box>\r\n        ))}\r\n        <Box paddingY={2}>\r\n          <Text size=\"lg\" bold>\r\n            Total: {calculatePrice(cartItems)}\r\n          </Text>\r\n        </Box>\r\n      </Box>\r\n    )}\r\n\r\n    {/* Order Processing Spinner */}\r\n    <Spinner\r\n      show={orderProcessing}\r\n      accessibilityLabel=\"Order Processing Spinner\"\r\n    />\r\n    {orderProcessing && (\r\n      <Text align=\"center\" italic>\r\n        Submitting Order...\r\n      </Text>\r\n    )}\r\n  </Modal>\r\n);\r\n\r\nconst CheckoutForm = withRouter(injectStripe(_CheckoutForm));\r\n\r\nconst Checkout = () => (\r\n  <StripeProvider apiKey=\"pk_test_QPXQHey0J1AkutAxuoosyA3K\">\r\n    <Elements>\r\n      <CheckoutForm />\r\n    </Elements>\r\n  </StripeProvider>\r\n);\r\n\r\nexport default Checkout;\r\n"]},"metadata":{},"sourceType":"module"}