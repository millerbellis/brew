(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react-dom'), require('classnames'), require('react'), require('prop-types')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react-dom', 'classnames', 'react', 'prop-types'], factory) :
  (factory((global.gestalt = {}),global.ReactDOM,global.classnames,global.React,global.PropTypes));
}(this, (function (exports,reactDom,classnames,React,PropTypes) { 'use strict';

  classnames = classnames && classnames.hasOwnProperty('default') ? classnames['default'] : classnames;
  PropTypes = PropTypes && PropTypes.hasOwnProperty('default') ? PropTypes['default'] : PropTypes;

  var styles = { "box": "_h _xu _4q", "xsDisplayNone": "_i", "xsDisplayFlex": "_j", "xsDisplayBlock": "_k", "xsDisplayInlineBlock": "_l", "xsDisplayVisuallyHidden": "_m", "smDisplayNone": "_n", "smDisplayFlex": "_o", "smDisplayBlock": "_p", "smDisplayInlineBlock": "_q", "smDisplayVisuallyHidden": "_r", "mdDisplayNone": "_s", "mdDisplayFlex": "_t", "mdDisplayBlock": "_u", "mdDisplayInlineBlock": "_v", "mdDisplayVisuallyHidden": "_w", "lgDisplayNone": "_x", "lgDisplayFlex": "_y", "lgDisplayBlock": "_z", "lgDisplayInlineBlock": "_10", "lgDisplayVisuallyHidden": "_11", "xsDirectionRow": "_12", "xsDirectionColumn": "_13", "smDirectionRow": "_14", "smDirectionColumn": "_15", "mdDirectionRow": "_16", "mdDirectionColumn": "_17", "lgDirectionRow": "_18", "lgDirectionColumn": "_19", "xsCol0": "_1a", "xsCol1": "_1b _xx", "xsCol2": "_1c _xy", "xsCol3": "_1d _xz", "xsCol4": "_1e _y0", "xsCol5": "_1f _y1", "xsCol6": "_1g _y2", "xsCol7": "_1h _y3", "xsCol8": "_1i _y4", "xsCol9": "_1j _y5", "xsCol10": "_1k _y6", "xsCol11": "_1l _y7", "xsCol12": "_1m _y8", "smCol0": "_1n", "smCol1": "_1o _y9", "smCol2": "_1p _ya", "smCol3": "_1q _yb", "smCol4": "_1r _yc", "smCol5": "_1s _yd", "smCol6": "_1t _ye", "smCol7": "_1u _yf", "smCol8": "_1v _yg", "smCol9": "_1w _yh", "smCol10": "_1x _yi", "smCol11": "_1y _yj", "smCol12": "_1z _yk", "mdCol0": "_20", "mdCol1": "_21 _yl", "mdCol2": "_22 _ym", "mdCol3": "_23 _yn", "mdCol4": "_24 _yo", "mdCol5": "_25 _yp", "mdCol6": "_26 _yq", "mdCol7": "_27 _yr", "mdCol8": "_28 _ys", "mdCol9": "_29 _yt", "mdCol10": "_2a _yu", "mdCol11": "_2b _yv", "mdCol12": "_2c _yw", "lgCol0": "_2d", "lgCol1": "_2e _yx", "lgCol2": "_2f _yy", "lgCol3": "_2g _yz", "lgCol4": "_2h _z0", "lgCol5": "_2i _z1", "lgCol6": "_2j _z2", "lgCol7": "_2k _z3", "lgCol8": "_2l _z4", "lgCol9": "_2m _z5", "lgCol10": "_2n _z6", "lgCol11": "_2o _z7", "lgCol12": "_2p _z8" };

  var borders = { "border": "_2q", "borderTop": "_2r", "borderRight": "_2s", "borderBottom": "_2t", "borderLeft": "_2u", "square": "_2v", "circle": "_2w", "pill": "_2x", "rounded": "_2y", "roundedTop": "_2z", "roundedRight": "_30", "roundedBottom": "_31", "roundedLeft": "_32", "noBorder": "_33" };

  var colors = { "red": "_34", "redBg": "_35", "white": "_36", "whiteBg": "_37", "lightGray": "_38", "lightGrayBg": "_39", "gray": "_3a", "grayBg": "_3b", "darkGray": "_3c", "darkGrayBg": "_3d", "green": "_3e", "greenBg": "_3f", "pine": "_3g", "pineBg": "_3h", "olive": "_3i", "oliveBg": "_3j", "blue": "_3k", "blueBg": "_3l", "navy": "_3m", "navyBg": "_3n", "midnight": "_3o", "midnightBg": "_3p", "purple": "_3q", "purpleBg": "_3r", "orchid": "_3s", "orchidBg": "_3t", "eggplant": "_3u", "eggplantBg": "_3v", "maroon": "_3w", "maroonBg": "_3x", "watermelon": "_3y", "watermelonBg": "_3z", "orange": "_40", "orangeBg": "_41", "transparentBg": "_42", "lightWashBg": "_43", "darkWashBg": "_44" };

  var layout = { "block": "_45", "inline": "_46", "inlineBlock": "_47", "table": "_48", "overflowHidden": "_49", "overflowScroll": "_4a", "overflowScrollX": "_4b", "overflowScrollY": "_4c", "overflowAuto": "_4d", "fit": "_4e", "relative": "_4f", "fixed": "_4g", "absolute": "_4h", "sticky": "_4i", "top0": "_4j", "right0": "_4k", "bottom0": "_4l", "left0": "_4m", "small": "_4n", "medium": "_4o", "large": "_4p", "borderBox": "_4q", "contentBox": "_4r", "-webkit-box-flex": "_4s", "-webkit-flex": "_4s", "-ms-flex": "_4s", "flex": "_4s", "smFlex": "_4t", "mdFlex": "_4u", "lgFlex": "_4v", "flexColumn": "_4w", "flexWrap": "_4x", "itemsStart": "_4y", "itemsEnd": "_4z", "itemsCenter": "_50", "itemsBaseline": "_51", "itemsStretch": "_52", "selfStart": "_53", "selfEnd": "_54", "selfCenter": "_55", "selfBaseline": "_56", "selfStretch": "_57", "justifyStart": "_58", "justifyEnd": "_59", "justifyCenter": "_5a", "justifyBetween": "_5b", "justifyAround": "_5c", "contentStart": "_5d", "contentEnd": "_5e", "contentCenter": "_5f", "contentBetween": "_5g", "contentAround": "_5h", "contentStretch": "_5i", "flexGrow": "_5j", "flexNone": "_5k", "orderFirst": "_5l", "orderLast": "_5m" };

  var whitespace = { "marginStart1": "_5n", "marginEnd1": "_5o", "marginStartN1": "_5p", "marginEndN1": "_5q", "marginTop1": "_5r", "marginRight1": "_5s", "marginBottom1": "_5t", "marginLeft1": "_5u", "marginTopN1": "_5v", "marginRightN1": "_5w", "marginBottomN1": "_5x", "marginLeftN1": "_5y", "paddingY1": "_5z", "paddingX1": "_60", "marginStart2": "_61", "marginEnd2": "_62", "marginStartN2": "_63", "marginEndN2": "_64", "marginTop2": "_65", "marginRight2": "_66", "marginBottom2": "_67", "marginLeft2": "_68", "marginTopN2": "_69", "marginRightN2": "_6a", "marginBottomN2": "_6b", "marginLeftN2": "_6c", "paddingY2": "_6d", "paddingX2": "_6e", "marginStart3": "_6f", "marginEnd3": "_6g", "marginStartN3": "_6h", "marginEndN3": "_6i", "marginTop3": "_6j", "marginRight3": "_6k", "marginBottom3": "_6l", "marginLeft3": "_6m", "marginTopN3": "_6n", "marginRightN3": "_6o", "marginBottomN3": "_6p", "marginLeftN3": "_6q", "paddingY3": "_6r", "paddingX3": "_6s", "marginStart4": "_6t", "marginEnd4": "_6u", "marginStartN4": "_6v", "marginEndN4": "_6w", "marginTop4": "_6x", "marginRight4": "_6y", "marginBottom4": "_6z", "marginLeft4": "_70", "marginTopN4": "_71", "marginRightN4": "_72", "marginBottomN4": "_73", "marginLeftN4": "_74", "paddingY4": "_75", "paddingX4": "_76", "marginStart5": "_77", "marginEnd5": "_78", "marginStartN5": "_79", "marginEndN5": "_7a", "marginTop5": "_7b", "marginRight5": "_7c", "marginBottom5": "_7d", "marginLeft5": "_7e", "marginTopN5": "_7f", "marginRightN5": "_7g", "marginBottomN5": "_7h", "marginLeftN5": "_7i", "paddingY5": "_7j", "paddingX5": "_7k", "marginStart6": "_7l", "marginEnd6": "_7m", "marginStartN6": "_7n", "marginEndN6": "_7o", "marginTop6": "_7p", "marginRight6": "_7q", "marginBottom6": "_7r", "marginLeft6": "_7s", "marginTopN6": "_7t", "marginRightN6": "_7u", "marginBottomN6": "_7v", "marginLeftN6": "_7w", "paddingY6": "_7x", "paddingX6": "_7y", "marginStart7": "_7z", "marginEnd7": "_80", "marginStartN7": "_81", "marginEndN7": "_82", "marginTop7": "_83", "marginRight7": "_84", "marginBottom7": "_85", "marginLeft7": "_86", "marginTopN7": "_87", "marginRightN7": "_88", "marginBottomN7": "_89", "marginLeftN7": "_8a", "paddingY7": "_8b", "paddingX7": "_8c", "marginStart8": "_8d", "marginEnd8": "_8e", "marginStartN8": "_8f", "marginEndN8": "_8g", "marginTop8": "_8h", "marginRight8": "_8i", "marginBottom8": "_8j", "marginLeft8": "_8k", "marginTopN8": "_8l", "marginRightN8": "_8m", "marginBottomN8": "_8n", "marginLeftN8": "_8o", "paddingY8": "_8p", "paddingX8": "_8q", "marginStart9": "_8r", "marginEnd9": "_8s", "marginStartN9": "_8t", "marginEndN9": "_8u", "marginTop9": "_8v", "marginRight9": "_8w", "marginBottom9": "_8x", "marginLeft9": "_8y", "marginTopN9": "_8z", "marginRightN9": "_90", "marginBottomN9": "_91", "marginLeftN9": "_92", "paddingY9": "_93", "paddingX9": "_94", "marginStart10": "_95", "marginEnd10": "_96", "marginStartN10": "_97", "marginEndN10": "_98", "marginTop10": "_99", "marginRight10": "_9a", "marginBottom10": "_9b", "marginLeft10": "_9c", "marginTopN10": "_9d", "marginRightN10": "_9e", "marginBottomN10": "_9f", "marginLeftN10": "_9g", "paddingY10": "_9h", "paddingX10": "_9i", "marginStart11": "_9j", "marginEnd11": "_9k", "marginStartN11": "_9l", "marginEndN11": "_9m", "marginTop11": "_9n", "marginRight11": "_9o", "marginBottom11": "_9p", "marginLeft11": "_9q", "marginTopN11": "_9r", "marginRightN11": "_9s", "marginBottomN11": "_9t", "marginLeftN11": "_9u", "paddingY11": "_9v", "paddingX11": "_9w", "marginStart12": "_9x", "marginEnd12": "_9y", "marginStartN12": "_9z", "marginEndN12": "_a0", "marginTop12": "_a1", "marginRight12": "_a2", "marginBottom12": "_a3", "marginLeft12": "_a4", "marginTopN12": "_a5", "marginRightN12": "_a6", "marginBottomN12": "_a7", "marginLeftN12": "_a8", "paddingY12": "_a9", "paddingX12": "_aa", "smMarginStart1": "_ab", "smMarginEnd1": "_ac", "smMarginStartN1": "_ad", "smMarginEndN1": "_ae", "smMarginTop1": "_af", "smMarginRight1": "_ag", "smMarginBottom1": "_ah", "smMarginLeft1": "_ai", "smMarginTopN1": "_aj", "smMarginRightN1": "_ak", "smMarginBottomN1": "_al", "smMarginLeftN1": "_am", "smPaddingY1": "_an", "smPaddingX1": "_ao", "smMarginStart2": "_ap", "smMarginEnd2": "_aq", "smMarginStartN2": "_ar", "smMarginEndN2": "_as", "smMarginTop2": "_at", "smMarginRight2": "_au", "smMarginBottom2": "_av", "smMarginLeft2": "_aw", "smMarginTopN2": "_ax", "smMarginRightN2": "_ay", "smMarginBottomN2": "_az", "smMarginLeftN2": "_b0", "smPaddingY2": "_b1", "smPaddingX2": "_b2", "smMarginStart3": "_b3", "smMarginEnd3": "_b4", "smMarginStartN3": "_b5", "smMarginEndN3": "_b6", "smMarginTop3": "_b7", "smMarginRight3": "_b8", "smMarginBottom3": "_b9", "smMarginLeft3": "_ba", "smMarginTopN3": "_bb", "smMarginRightN3": "_bc", "smMarginBottomN3": "_bd", "smMarginLeftN3": "_be", "smPaddingY3": "_bf", "smPaddingX3": "_bg", "smMarginStart4": "_bh", "smMarginEnd4": "_bi", "smMarginStartN4": "_bj", "smMarginEndN4": "_bk", "smMarginTop4": "_bl", "smMarginRight4": "_bm", "smMarginBottom4": "_bn", "smMarginLeft4": "_bo", "smMarginTopN4": "_bp", "smMarginRightN4": "_bq", "smMarginBottomN4": "_br", "smMarginLeftN4": "_bs", "smPaddingY4": "_bt", "smPaddingX4": "_bu", "smMarginStart5": "_bv", "smMarginEnd5": "_bw", "smMarginStartN5": "_bx", "smMarginEndN5": "_by", "smMarginTop5": "_bz", "smMarginRight5": "_c0", "smMarginBottom5": "_c1", "smMarginLeft5": "_c2", "smMarginTopN5": "_c3", "smMarginRightN5": "_c4", "smMarginBottomN5": "_c5", "smMarginLeftN5": "_c6", "smPaddingY5": "_c7", "smPaddingX5": "_c8", "smMarginStart6": "_c9", "smMarginEnd6": "_ca", "smMarginStartN6": "_cb", "smMarginEndN6": "_cc", "smMarginTop6": "_cd", "smMarginRight6": "_ce", "smMarginBottom6": "_cf", "smMarginLeft6": "_cg", "smMarginTopN6": "_ch", "smMarginRightN6": "_ci", "smMarginBottomN6": "_cj", "smMarginLeftN6": "_ck", "smPaddingY6": "_cl", "smPaddingX6": "_cm", "smMarginStart7": "_cn", "smMarginEnd7": "_co", "smMarginStartN7": "_cp", "smMarginEndN7": "_cq", "smMarginTop7": "_cr", "smMarginRight7": "_cs", "smMarginBottom7": "_ct", "smMarginLeft7": "_cu", "smMarginTopN7": "_cv", "smMarginRightN7": "_cw", "smMarginBottomN7": "_cx", "smMarginLeftN7": "_cy", "smPaddingY7": "_cz", "smPaddingX7": "_d0", "smMarginStart8": "_d1", "smMarginEnd8": "_d2", "smMarginStartN8": "_d3", "smMarginEndN8": "_d4", "smMarginTop8": "_d5", "smMarginRight8": "_d6", "smMarginBottom8": "_d7", "smMarginLeft8": "_d8", "smMarginTopN8": "_d9", "smMarginRightN8": "_da", "smMarginBottomN8": "_db", "smMarginLeftN8": "_dc", "smPaddingY8": "_dd", "smPaddingX8": "_de", "smMarginStart9": "_df", "smMarginEnd9": "_dg", "smMarginStartN9": "_dh", "smMarginEndN9": "_di", "smMarginTop9": "_dj", "smMarginRight9": "_dk", "smMarginBottom9": "_dl", "smMarginLeft9": "_dm", "smMarginTopN9": "_dn", "smMarginRightN9": "_do", "smMarginBottomN9": "_dp", "smMarginLeftN9": "_dq", "smPaddingY9": "_dr", "smPaddingX9": "_ds", "smMarginStart10": "_dt", "smMarginEnd10": "_du", "smMarginStartN10": "_dv", "smMarginEndN10": "_dw", "smMarginTop10": "_dx", "smMarginRight10": "_dy", "smMarginBottom10": "_dz", "smMarginLeft10": "_e0", "smMarginTopN10": "_e1", "smMarginRightN10": "_e2", "smMarginBottomN10": "_e3", "smMarginLeftN10": "_e4", "smPaddingY10": "_e5", "smPaddingX10": "_e6", "smMarginStart11": "_e7", "smMarginEnd11": "_e8", "smMarginStartN11": "_e9", "smMarginEndN11": "_ea", "smMarginTop11": "_eb", "smMarginRight11": "_ec", "smMarginBottom11": "_ed", "smMarginLeft11": "_ee", "smMarginTopN11": "_ef", "smMarginRightN11": "_eg", "smMarginBottomN11": "_eh", "smMarginLeftN11": "_ei", "smPaddingY11": "_ej", "smPaddingX11": "_ek", "smMarginStart12": "_el", "smMarginEnd12": "_em", "smMarginStartN12": "_en", "smMarginEndN12": "_eo", "smMarginTop12": "_ep", "smMarginRight12": "_eq", "smMarginBottom12": "_er", "smMarginLeft12": "_es", "smMarginTopN12": "_et", "smMarginRightN12": "_eu", "smMarginBottomN12": "_ev", "smMarginLeftN12": "_ew", "smPaddingY12": "_ex", "smPaddingX12": "_ey", "mdMarginStart1": "_ez", "mdMarginEnd1": "_f0", "mdMarginStartN1": "_f1", "mdMarginEndN1": "_f2", "mdMarginTop1": "_f3", "mdMarginRight1": "_f4", "mdMarginBottom1": "_f5", "mdMarginLeft1": "_f6", "mdMarginTopN1": "_f7", "mdMarginRightN1": "_f8", "mdMarginBottomN1": "_f9", "mdMarginLeftN1": "_fa", "mdPaddingY1": "_fb", "mdPaddingX1": "_fc", "mdMarginStart2": "_fd", "mdMarginEnd2": "_fe", "mdMarginStartN2": "_ff", "mdMarginEndN2": "_fg", "mdMarginTop2": "_fh", "mdMarginRight2": "_fi", "mdMarginBottom2": "_fj", "mdMarginLeft2": "_fk", "mdMarginTopN2": "_fl", "mdMarginRightN2": "_fm", "mdMarginBottomN2": "_fn", "mdMarginLeftN2": "_fo", "mdPaddingY2": "_fp", "mdPaddingX2": "_fq", "mdMarginStart3": "_fr", "mdMarginEnd3": "_fs", "mdMarginStartN3": "_ft", "mdMarginEndN3": "_fu", "mdMarginTop3": "_fv", "mdMarginRight3": "_fw", "mdMarginBottom3": "_fx", "mdMarginLeft3": "_fy", "mdMarginTopN3": "_fz", "mdMarginRightN3": "_g0", "mdMarginBottomN3": "_g1", "mdMarginLeftN3": "_g2", "mdPaddingY3": "_g3", "mdPaddingX3": "_g4", "mdMarginStart4": "_g5", "mdMarginEnd4": "_g6", "mdMarginStartN4": "_g7", "mdMarginEndN4": "_g8", "mdMarginTop4": "_g9", "mdMarginRight4": "_ga", "mdMarginBottom4": "_gb", "mdMarginLeft4": "_gc", "mdMarginTopN4": "_gd", "mdMarginRightN4": "_ge", "mdMarginBottomN4": "_gf", "mdMarginLeftN4": "_gg", "mdPaddingY4": "_gh", "mdPaddingX4": "_gi", "mdMarginStart5": "_gj", "mdMarginEnd5": "_gk", "mdMarginStartN5": "_gl", "mdMarginEndN5": "_gm", "mdMarginTop5": "_gn", "mdMarginRight5": "_go", "mdMarginBottom5": "_gp", "mdMarginLeft5": "_gq", "mdMarginTopN5": "_gr", "mdMarginRightN5": "_gs", "mdMarginBottomN5": "_gt", "mdMarginLeftN5": "_gu", "mdPaddingY5": "_gv", "mdPaddingX5": "_gw", "mdMarginStart6": "_gx", "mdMarginEnd6": "_gy", "mdMarginStartN6": "_gz", "mdMarginEndN6": "_h0", "mdMarginTop6": "_h1", "mdMarginRight6": "_h2", "mdMarginBottom6": "_h3", "mdMarginLeft6": "_h4", "mdMarginTopN6": "_h5", "mdMarginRightN6": "_h6", "mdMarginBottomN6": "_h7", "mdMarginLeftN6": "_h8", "mdPaddingY6": "_h9", "mdPaddingX6": "_ha", "mdMarginStart7": "_hb", "mdMarginEnd7": "_hc", "mdMarginStartN7": "_hd", "mdMarginEndN7": "_he", "mdMarginTop7": "_hf", "mdMarginRight7": "_hg", "mdMarginBottom7": "_hh", "mdMarginLeft7": "_hi", "mdMarginTopN7": "_hj", "mdMarginRightN7": "_hk", "mdMarginBottomN7": "_hl", "mdMarginLeftN7": "_hm", "mdPaddingY7": "_hn", "mdPaddingX7": "_ho", "mdMarginStart8": "_hp", "mdMarginEnd8": "_hq", "mdMarginStartN8": "_hr", "mdMarginEndN8": "_hs", "mdMarginTop8": "_ht", "mdMarginRight8": "_hu", "mdMarginBottom8": "_hv", "mdMarginLeft8": "_hw", "mdMarginTopN8": "_hx", "mdMarginRightN8": "_hy", "mdMarginBottomN8": "_hz", "mdMarginLeftN8": "_i0", "mdPaddingY8": "_i1", "mdPaddingX8": "_i2", "mdMarginStart9": "_i3", "mdMarginEnd9": "_i4", "mdMarginStartN9": "_i5", "mdMarginEndN9": "_i6", "mdMarginTop9": "_i7", "mdMarginRight9": "_i8", "mdMarginBottom9": "_i9", "mdMarginLeft9": "_ia", "mdMarginTopN9": "_ib", "mdMarginRightN9": "_ic", "mdMarginBottomN9": "_id", "mdMarginLeftN9": "_ie", "mdPaddingY9": "_if", "mdPaddingX9": "_ig", "mdMarginStart10": "_ih", "mdMarginEnd10": "_ii", "mdMarginStartN10": "_ij", "mdMarginEndN10": "_ik", "mdMarginTop10": "_il", "mdMarginRight10": "_im", "mdMarginBottom10": "_in", "mdMarginLeft10": "_io", "mdMarginTopN10": "_ip", "mdMarginRightN10": "_iq", "mdMarginBottomN10": "_ir", "mdMarginLeftN10": "_is", "mdPaddingY10": "_it", "mdPaddingX10": "_iu", "mdMarginStart11": "_iv", "mdMarginEnd11": "_iw", "mdMarginStartN11": "_ix", "mdMarginEndN11": "_iy", "mdMarginTop11": "_iz", "mdMarginRight11": "_j0", "mdMarginBottom11": "_j1", "mdMarginLeft11": "_j2", "mdMarginTopN11": "_j3", "mdMarginRightN11": "_j4", "mdMarginBottomN11": "_j5", "mdMarginLeftN11": "_j6", "mdPaddingY11": "_j7", "mdPaddingX11": "_j8", "mdMarginStart12": "_j9", "mdMarginEnd12": "_ja", "mdMarginStartN12": "_jb", "mdMarginEndN12": "_jc", "mdMarginTop12": "_jd", "mdMarginRight12": "_je", "mdMarginBottom12": "_jf", "mdMarginLeft12": "_jg", "mdMarginTopN12": "_jh", "mdMarginRightN12": "_ji", "mdMarginBottomN12": "_jj", "mdMarginLeftN12": "_jk", "mdPaddingY12": "_jl", "mdPaddingX12": "_jm", "lgMarginStart1": "_jn", "lgMarginEnd1": "_jo", "lgMarginStartN1": "_jp", "lgMarginEndN1": "_jq", "lgMarginTop1": "_jr", "lgMarginRight1": "_js", "lgMarginBottom1": "_jt", "lgMarginLeft1": "_ju", "lgMarginTopN1": "_jv", "lgMarginRightN1": "_jw", "lgMarginBottomN1": "_jx", "lgMarginLeftN1": "_jy", "lgPaddingY1": "_jz", "lgPaddingX1": "_k0", "lgMarginStart2": "_k1", "lgMarginEnd2": "_k2", "lgMarginStartN2": "_k3", "lgMarginEndN2": "_k4", "lgMarginTop2": "_k5", "lgMarginRight2": "_k6", "lgMarginBottom2": "_k7", "lgMarginLeft2": "_k8", "lgMarginTopN2": "_k9", "lgMarginRightN2": "_ka", "lgMarginBottomN2": "_kb", "lgMarginLeftN2": "_kc", "lgPaddingY2": "_kd", "lgPaddingX2": "_ke", "lgMarginStart3": "_kf", "lgMarginEnd3": "_kg", "lgMarginStartN3": "_kh", "lgMarginEndN3": "_ki", "lgMarginTop3": "_kj", "lgMarginRight3": "_kk", "lgMarginBottom3": "_kl", "lgMarginLeft3": "_km", "lgMarginTopN3": "_kn", "lgMarginRightN3": "_ko", "lgMarginBottomN3": "_kp", "lgMarginLeftN3": "_kq", "lgPaddingY3": "_kr", "lgPaddingX3": "_ks", "lgMarginStart4": "_kt", "lgMarginEnd4": "_ku", "lgMarginStartN4": "_kv", "lgMarginEndN4": "_kw", "lgMarginTop4": "_kx", "lgMarginRight4": "_ky", "lgMarginBottom4": "_kz", "lgMarginLeft4": "_l0", "lgMarginTopN4": "_l1", "lgMarginRightN4": "_l2", "lgMarginBottomN4": "_l3", "lgMarginLeftN4": "_l4", "lgPaddingY4": "_l5", "lgPaddingX4": "_l6", "lgMarginStart5": "_l7", "lgMarginEnd5": "_l8", "lgMarginStartN5": "_l9", "lgMarginEndN5": "_la", "lgMarginTop5": "_lb", "lgMarginRight5": "_lc", "lgMarginBottom5": "_ld", "lgMarginLeft5": "_le", "lgMarginTopN5": "_lf", "lgMarginRightN5": "_lg", "lgMarginBottomN5": "_lh", "lgMarginLeftN5": "_li", "lgPaddingY5": "_lj", "lgPaddingX5": "_lk", "lgMarginStart6": "_ll", "lgMarginEnd6": "_lm", "lgMarginStartN6": "_ln", "lgMarginEndN6": "_lo", "lgMarginTop6": "_lp", "lgMarginRight6": "_lq", "lgMarginBottom6": "_lr", "lgMarginLeft6": "_ls", "lgMarginTopN6": "_lt", "lgMarginRightN6": "_lu", "lgMarginBottomN6": "_lv", "lgMarginLeftN6": "_lw", "lgPaddingY6": "_lx", "lgPaddingX6": "_ly", "lgMarginStart7": "_lz", "lgMarginEnd7": "_m0", "lgMarginStartN7": "_m1", "lgMarginEndN7": "_m2", "lgMarginTop7": "_m3", "lgMarginRight7": "_m4", "lgMarginBottom7": "_m5", "lgMarginLeft7": "_m6", "lgMarginTopN7": "_m7", "lgMarginRightN7": "_m8", "lgMarginBottomN7": "_m9", "lgMarginLeftN7": "_ma", "lgPaddingY7": "_mb", "lgPaddingX7": "_mc", "lgMarginStart8": "_md", "lgMarginEnd8": "_me", "lgMarginStartN8": "_mf", "lgMarginEndN8": "_mg", "lgMarginTop8": "_mh", "lgMarginRight8": "_mi", "lgMarginBottom8": "_mj", "lgMarginLeft8": "_mk", "lgMarginTopN8": "_ml", "lgMarginRightN8": "_mm", "lgMarginBottomN8": "_mn", "lgMarginLeftN8": "_mo", "lgPaddingY8": "_mp", "lgPaddingX8": "_mq", "lgMarginStart9": "_mr", "lgMarginEnd9": "_ms", "lgMarginStartN9": "_mt", "lgMarginEndN9": "_mu", "lgMarginTop9": "_mv", "lgMarginRight9": "_mw", "lgMarginBottom9": "_mx", "lgMarginLeft9": "_my", "lgMarginTopN9": "_mz", "lgMarginRightN9": "_n0", "lgMarginBottomN9": "_n1", "lgMarginLeftN9": "_n2", "lgPaddingY9": "_n3", "lgPaddingX9": "_n4", "lgMarginStart10": "_n5", "lgMarginEnd10": "_n6", "lgMarginStartN10": "_n7", "lgMarginEndN10": "_n8", "lgMarginTop10": "_n9", "lgMarginRight10": "_na", "lgMarginBottom10": "_nb", "lgMarginLeft10": "_nc", "lgMarginTopN10": "_nd", "lgMarginRightN10": "_ne", "lgMarginBottomN10": "_nf", "lgMarginLeftN10": "_ng", "lgPaddingY10": "_nh", "lgPaddingX10": "_ni", "lgMarginStart11": "_nj", "lgMarginEnd11": "_nk", "lgMarginStartN11": "_nl", "lgMarginEndN11": "_nm", "lgMarginTop11": "_nn", "lgMarginRight11": "_no", "lgMarginBottom11": "_np", "lgMarginLeft11": "_nq", "lgMarginTopN11": "_nr", "lgMarginRightN11": "_ns", "lgMarginBottomN11": "_nt", "lgMarginLeftN11": "_nu", "lgPaddingY11": "_nv", "lgPaddingX11": "_nw", "lgMarginStart12": "_nx", "lgMarginEnd12": "_ny", "lgMarginStartN12": "_nz", "lgMarginEndN12": "_o0", "lgMarginTop12": "_o1", "lgMarginRight12": "_o2", "lgMarginBottom12": "_o3", "lgMarginLeft12": "_o4", "lgMarginTopN12": "_o5", "lgMarginRightN12": "_o6", "lgMarginBottomN12": "_o7", "lgMarginLeftN12": "_o8", "lgPaddingY12": "_o9", "lgPaddingX12": "_oa" };

  var whitespaceLegacy = { "mlAuto": "_ob", "mrAuto": "_oc", "m0": "_od", "mt0": "_oe", "mr0": "_of", "mb0": "_og", "ml0": "_oh", "p0": "_oi", "px0": "_oj", "py0": "_ok", "m1": "_ol", "mt1": "_om", "mr1": "_on", "mb1": "_oo", "ml1": "_op", "mn1": "_oq", "mtn1": "_or", "mbn1": "_os", "mln1": "_ot", "mrn1": "_ou", "mxn1": "_ov", "myn1": "_ow", "p1": "_ox", "px1": "_oy", "py1": "_oz", "m2": "_p0", "mt2": "_p1", "mr2": "_p2", "mb2": "_p3", "ml2": "_p4", "mn2": "_p5", "mtn2": "_p6", "mbn2": "_p7", "mln2": "_p8", "mrn2": "_p9", "mxn2": "_pa", "myn2": "_pb", "p2": "_pc", "px2": "_pd", "py2": "_pe", "m3": "_pf", "mt3": "_pg", "mr3": "_ph", "mb3": "_pi", "ml3": "_pj", "mn3": "_pk", "mtn3": "_pl", "mbn3": "_pm", "mln3": "_pn", "mrn3": "_po", "mxn3": "_pp", "myn3": "_pq", "p3": "_pr", "px3": "_ps", "py3": "_pt", "m4": "_pu", "mt4": "_pv", "mr4": "_pw", "mb4": "_px", "ml4": "_py", "mn4": "_pz", "mtn4": "_q0", "mbn4": "_q1", "mln4": "_q2", "mrn4": "_q3", "mxn4": "_q4", "myn4": "_q5", "p4": "_q6", "px4": "_q7", "py4": "_q8", "m5": "_q9", "mt5": "_qa", "mr5": "_qb", "mb5": "_qc", "ml5": "_qd", "mn5": "_qe", "mtn5": "_qf", "mbn5": "_qg", "mln5": "_qh", "mrn5": "_qi", "mxn5": "_qj", "myn5": "_qk", "p5": "_ql", "px5": "_qm", "py5": "_qn", "m6": "_qo", "mt6": "_qp", "mr6": "_qq", "mb6": "_qr", "ml6": "_qs", "mn6": "_qt", "mtn6": "_qu", "mbn6": "_qv", "mln6": "_qw", "mrn6": "_qx", "mxn6": "_qy", "myn6": "_qz", "p6": "_r0", "px6": "_r1", "py6": "_r2" };

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var defineProperty = function (obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  };

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  var objectWithoutProperties = function (obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  };

  var possibleConstructorReturn = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  };

  var slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  var toConsumableArray = function (arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    } else {
      return Array.from(arr);
    }
  };

  /*

  Style is a monoid that capture the "to-be-applied" styles (inline and classes)
  for a Box. It's basically set that is closed under an associative binary
  operation and has an identity element such that for all HA HA HA. Yes, it's a
  monoid, which sounds scary but it's not really and actually super useful. All
  that means is that basically you can do two things with it:

      1. concat(concat(a, b), c) === concat(a, concat(b, c));
      2. concat(identity(), a) === concat(a, identity()) === a;

  What that means is that it's really easy to compose styles together and the
  order in which you do so doesn't really matter.

  */

  var identity = function identity() {
    return {
      className: new Set(),
      inlineStyle: {}
    };
  };

  // TODO: This type should be opaque, however the Babel parser doesn't support
  //       the opaque syntax yet.


  var fromClassName = function fromClassName() {
    for (var _len = arguments.length, classNames = Array(_len), _key = 0; _key < _len; _key++) {
      classNames[_key] = arguments[_key];
    }

    return {
      className: new Set(classNames),
      inlineStyle: {}
    };
  };

  var fromInlineStyle = function fromInlineStyle(inlineStyle) {
    return {
      className: new Set(),
      inlineStyle: inlineStyle
    };
  };

  var concat = function concat(styles) {
    return styles.reduce(function (_ref, _ref2) {
      var classNameA = _ref.className,
          inlineStyleA = _ref.inlineStyle;
      var classNameB = _ref2.className,
          inlineStyleB = _ref2.inlineStyle;
      return {
        className: new Set([].concat(toConsumableArray(classNameA), toConsumableArray(classNameB))),
        inlineStyle: _extends({}, inlineStyleA, inlineStyleB)
      };
    }, identity());
  };

  var mapClassName = function mapClassName(fn) {
    return function (_ref3) {
      var className = _ref3.className,
          inlineStyle = _ref3.inlineStyle;
      return {
        className: new Set(Array.from(className).map(fn)),
        inlineStyle: inlineStyle
      };
    };
  };

  var toProps = function toProps(_ref4) {
    var className = _ref4.className,
        inlineStyle = _ref4.inlineStyle;

    var props = {};

    if (className.size > 0) {
      // Sorting here ensures that classNames are always stable, reducing diff
      // churn. Box usually has a small number of properties so it's not a perf
      // concern.
      props.className = Array.from(className).sort().join(' ');
    }

    if (Object.keys(inlineStyle).length > 0) {
      props.style = inlineStyle;
    }

    return props;
  };

  /*

  Transforms

  These are a collection of a few functors that take values and returns Style's. OMG, I used the word functor - it's really just a fancy word for function.

  */

  // Adds a classname when a property is present.
  //
  //     <Box top />
  //
  var toggle = function toggle() {
    for (var _len = arguments.length, classNames = Array(_len), _key = 0; _key < _len; _key++) {
      classNames[_key] = arguments[_key];
    }

    return function (val) {
      return val ? fromClassName.apply(undefined, classNames) : identity();
    };
  };

  // Maps string values to classes
  //
  //     <Box alignItems="center" />
  //
  var mapping = function mapping(map) {
    return function (val) {
      return Object.prototype.hasOwnProperty.call(map, val) ? fromClassName(map[val]) : identity();
    };
  };

  // Maps a range of integers to a range of classnames
  //
  //     <Box padding={1} />
  //
  var range = function range(scale) {
    return function (n) {
      return fromClassName('' + scale + (n < 0 ? 'N' + Math.abs(n) : n));
    };
  };

  // Like `range`, maps a range of integers to a range of classnames, excluding
  // zero values.
  //
  //     <Box padding={0} />
  var rangeWithoutZero = function rangeWithoutZero(scale) {
    return function (n) {
      return n === 0 ? identity() : range(scale)(n);
    };
  };

  // Binds a string classname to the value in an object. Useful when interacting
  // with ranges that need to come dynamically from a style object. This is
  // similar to the NPM package 'classnames/bind'.
  var bind = function bind(fn, scope) {
    return function (val) {
      return mapClassName(function (name) {
        return scope[name];
      })(fn(val));
    };
  };

  // This takes a series of the previously defined functors, runs them all
  // against a value and returns the set of their classnames.
  var union = function union() {
    for (var _len2 = arguments.length, fns = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      fns[_key2] = arguments[_key2];
    }

    return function (val) {
      return concat(fns.map(function (fn) {
        return fn(val);
      }));
    };
  };

  /*

  # ProTypes

  Box's type definition is exhaustive. With the exception of `dangerouslySetInlineStyle`, values shouldn't be ambigious. That means that we have to type out things like boints, but that's also where Box's magic lies. Also, by putting in extra effort around type definitions here, we can skip extra runtime typechecks in the transformers for performance.

  */

  // --

  /*

  # Transformers

  This is where the meat and the bones of Box's transforms are. You can read more about the DSL in `./transforms.js`, but basically they are a small declarative way of specifying how a property (i.e. `marginTop={4}`) gets turned into a CSS class (`marginTop4`).

  There's a little preamble here, but it culminates in a big object mapping the actual property names to the transformer values.

  */

  var marginStart = bind(rangeWithoutZero('marginStart'), whitespace);
  var marginEnd = bind(rangeWithoutZero('marginEnd'), whitespace);
  var marginTop = bind(rangeWithoutZero('marginTop'), whitespace);
  var marginRight = bind(rangeWithoutZero('marginRight'), whitespace);
  var marginBottom = bind(rangeWithoutZero('marginBottom'), whitespace);
  var marginLeft = bind(rangeWithoutZero('marginLeft'), whitespace);
  var margin = union(marginTop, marginBottom, marginLeft, marginRight);

  var smMarginTop = bind(rangeWithoutZero('smMarginTop'), whitespace);
  var smMarginRight = bind(rangeWithoutZero('smMarginRight'), whitespace);
  var smMarginBottom = bind(rangeWithoutZero('smMarginBottom'), whitespace);
  var smMarginLeft = bind(rangeWithoutZero('smMarginLeft'), whitespace);
  var smMargin = union(smMarginTop, smMarginBottom, smMarginLeft, smMarginRight);

  var mdMarginTop = bind(rangeWithoutZero('mdMarginTop'), whitespace);
  var mdMarginRight = bind(rangeWithoutZero('mdMarginRight'), whitespace);
  var mdMarginBottom = bind(rangeWithoutZero('mdMarginBottom'), whitespace);
  var mdMarginLeft = bind(rangeWithoutZero('mdMarginLeft'), whitespace);
  var mdMargin = union(mdMarginTop, mdMarginBottom, mdMarginLeft, mdMarginRight);

  var lgMarginTop = bind(rangeWithoutZero('lgMarginTop'), whitespace);
  var lgMarginRight = bind(rangeWithoutZero('lgMarginRight'), whitespace);
  var lgMarginBottom = bind(rangeWithoutZero('lgMarginBottom'), whitespace);
  var lgMarginLeft = bind(rangeWithoutZero('lgMarginLeft'), whitespace);
  var lgMargin = union(lgMarginTop, lgMarginBottom, lgMarginLeft, lgMarginRight);

  var paddingX = bind(rangeWithoutZero('paddingX'), whitespace);
  var paddingY = bind(rangeWithoutZero('paddingY'), whitespace);
  var padding = union(paddingX, paddingY);

  var smPaddingX = bind(rangeWithoutZero('smPaddingX'), whitespace);
  var smPaddingY = bind(rangeWithoutZero('smPaddingY'), whitespace);
  var smPadding = union(smPaddingX, smPaddingY);

  var mdPaddingX = bind(rangeWithoutZero('mdPaddingX'), whitespace);
  var mdPaddingY = bind(rangeWithoutZero('mdPaddingY'), whitespace);
  var mdPadding = union(mdPaddingX, mdPaddingY);

  var lgPaddingX = bind(rangeWithoutZero('lgPaddingX'), whitespace);
  var lgPaddingY = bind(rangeWithoutZero('lgPaddingY'), whitespace);
  var lgPadding = union(lgPaddingX, lgPaddingY);

  /*

  These functions are legacy. I'd like to get rid of most of this file's dependency on importing `./style.js` directly once these are removed.

  */

  var prefix = function prefix(pre) {
    return mapClassName(function (name) {
      return '' + pre + name;
    });
  };
  var display = function display(value) {
    switch (value) {
      case 'flex':
        return fromClassName('DisplayFlex', 'DirectionRow');
      case 'flexColumn':
        return fromClassName('DisplayFlex', 'DirectionColumn');
      case 'inlineBlock':
        return fromClassName('DisplayInlineBlock');
      case 'visuallyHidden':
        return fromClassName('DisplayVisuallyHidden');
      case false:
        return fromClassName('DisplayNone');
      default:
        /* block */
        return fromClassName('DisplayBlock');
    }
  };
  var column = range('Col');

  var formatIntBoint = function formatIntBoint(x) {
    return x < 0 ? 'n' + Math.abs(x) : x.toString();
  };

  /*

  It's preferable to put new properties into that object directly just so it's easier to read.

  */

  var propToFn = {
    xs: function xs(value) {
      if (!value) {
        return identity();
      }
      return mapClassName(function (c) {
        return styles[c];
      })(prefix('xs')(concat([value.column ? column(value.column) : identity(), typeof value.display !== 'undefined' ? display(value.display) : identity()])));
    },
    sm: function sm(value) {
      if (!value) {
        return identity();
      }
      return mapClassName(function (c) {
        return styles[c];
      })(prefix('sm')(concat([value.column ? column(value.column) : identity(), typeof value.display !== 'undefined' ? display(value.display) : identity()])));
    },
    md: function md(value) {
      if (!value) {
        return identity();
      }
      return mapClassName(function (c) {
        return styles[c];
      })(prefix('md')(concat([value.column ? column(value.column) : identity(), typeof value.display !== 'undefined' ? display(value.display) : identity()])));
    },
    lg: function lg(value) {
      if (!value) {
        return identity();
      }
      return mapClassName(function (c) {
        return styles[c];
      })(prefix('lg')(concat([value.column ? column(value.column) : identity(), typeof value.display !== 'undefined' ? display(value.display) : identity()])));
    },

    display: mapping({
      none: styles.xsDisplayNone,
      flex: styles.xsDisplayFlex,
      block: styles.xsDisplayBlock,
      inlineBlock: styles.xsDisplayInlineBlock,
      visuallyHidden: styles.xsDisplayVisuallyHidden
    }),
    column: bind(range('xsCol'), styles),
    direction: mapping({
      row: styles.xsDirectionRow,
      column: styles.xsDirectionColumn
    }),

    smDisplay: mapping({
      none: styles.smDisplayNone,
      flex: styles.smDisplayFlex,
      block: styles.smDisplayBlock,
      inlineBlock: styles.smDisplayInlineBlock,
      visuallyHidden: styles.smDisplayVisuallyHidden
    }),
    smColumn: bind(range('smCol'), styles),
    smDirection: mapping({
      row: styles.smDirectionRow,
      column: styles.smDirectionColumn
    }),

    mdDisplay: mapping({
      none: styles.mdDisplayNone,
      flex: styles.mdDisplayFlex,
      block: styles.mdDisplayBlock,
      inlineBlock: styles.mdDisplayInlineBlock,
      visuallyHidden: styles.mdDisplayVisuallyHidden
    }),
    mdColumn: bind(range('mdCol'), styles),
    mdDirection: mapping({
      row: styles.mdDirectionRow,
      column: styles.mdDirectionColumn
    }),

    lgDisplay: mapping({
      none: styles.lgDisplayNone,
      flex: styles.lgDisplayFlex,
      block: styles.lgDisplayBlock,
      inlineBlock: styles.lgDisplayInlineBlock,
      visuallyHidden: styles.lgDisplayVisuallyHidden
    }),
    lgColumn: bind(range('lgCol'), styles),
    lgDirection: mapping({
      row: styles.lgDirectionRow,
      column: styles.lgDirectionColumn
    }),

    alignContent: mapping({
      start: layout.contentStart,
      end: layout.contentEnd,
      center: layout.contentCenter,
      between: layout.contentBetween,
      around: layout.contentAround
      // default: stretch
    }),
    alignItems: mapping({
      start: layout.itemsStart,
      end: layout.itemsEnd,
      center: layout.itemsCenter,
      baseline: layout.itemsBaseline
      // default: stretch
    }),
    alignSelf: mapping({
      start: layout.selfStart,
      end: layout.selfEnd,
      center: layout.selfCenter,
      baseline: layout.selfBaseline,
      stretch: layout.selfStretch
      // default: auto
    }),
    bottom: toggle(layout.bottom0),
    color: mapping({
      blue: colors.blueBg,
      darkGray: colors.darkGrayBg,
      pine: colors.pineBg,
      gray: colors.grayBg,
      red: colors.redBg,
      olive: colors.oliveBg,
      lightGray: colors.lightGrayBg,
      white: colors.whiteBg,
      orange: colors.orangeBg,
      green: colors.greenBg,
      navy: colors.navyBg,
      midnight: colors.midnightBg,
      purple: colors.purpleBg,
      orchid: colors.orchidBg,
      eggplant: colors.eggplantBg,
      maroon: colors.maroonBg,
      watermelon: colors.watermelonBg,
      lightWash: colors.lightWashBg,
      darkWash: colors.darkWashBg
      // default: transparent
    }),
    fit: toggle(layout.fit),
    flex: mapping({
      grow: layout.flexGrow,
      none: layout.flexNone
      // default: shrink
    }),
    height: function (_height) {
      function height(_x) {
        return _height.apply(this, arguments);
      }

      height.toString = function () {
        return _height.toString();
      };

      return height;
    }(function (height) {
      return fromInlineStyle({ height: height });
    }),
    justifyContent: mapping({
      end: layout.justifyEnd,
      center: layout.justifyCenter,
      between: layout.justifyBetween,
      around: layout.justifyAround
      // default: start
    }),
    left: toggle(layout.left0),
    deprecatedMargin: function deprecatedMargin(value) {
      var mt = identity();
      var mb = identity();
      var ml = identity();
      var mr = identity();
      switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {
        case 'number':
          return fromClassName(whitespaceLegacy['m' + formatIntBoint(value)]);
        case 'object':
          if (value.top) {
            mt = fromClassName(whitespaceLegacy['mt' + formatIntBoint(value.top)]);
          }

          if (value.bottom) {
            mb = fromClassName(whitespaceLegacy['mb' + formatIntBoint(value.bottom)]);
          }

          if (value.left) {
            ml = fromClassName(value.left === 'auto' ? whitespaceLegacy.mlAuto : whitespaceLegacy['ml' + formatIntBoint(value.left)]);
          }

          if (value.right) {
            mr = fromClassName(value.right === 'auto' ? whitespaceLegacy.mrAuto : whitespaceLegacy['mr' + formatIntBoint(value.right)]);
          }
          return concat([mt, mb, ml, mr]);
        default:
          return identity();
      }
    },
    marginStart: marginStart,
    marginEnd: marginEnd,
    margin: margin,
    marginTop: marginTop,
    marginRight: marginRight,
    marginBottom: marginBottom,
    marginLeft: marginLeft,
    smMargin: smMargin,
    smMarginTop: smMarginTop,
    smMarginRight: smMarginRight,
    smMarginBottom: smMarginBottom,
    smMarginLeft: smMarginLeft,
    mdMargin: mdMargin,
    mdMarginTop: mdMarginTop,
    mdMarginRight: mdMarginRight,
    mdMarginBottom: mdMarginBottom,
    mdMarginLeft: mdMarginLeft,
    lgMargin: lgMargin,
    lgMarginTop: lgMarginTop,
    lgMarginRight: lgMarginRight,
    lgMarginBottom: lgMarginBottom,
    lgMarginLeft: lgMarginLeft,
    maxHeight: function (_maxHeight) {
      function maxHeight(_x2) {
        return _maxHeight.apply(this, arguments);
      }

      maxHeight.toString = function () {
        return _maxHeight.toString();
      };

      return maxHeight;
    }(function (maxHeight) {
      return fromInlineStyle({ maxHeight: maxHeight });
    }),
    maxWidth: function (_maxWidth) {
      function maxWidth(_x3) {
        return _maxWidth.apply(this, arguments);
      }

      maxWidth.toString = function () {
        return _maxWidth.toString();
      };

      return maxWidth;
    }(function (maxWidth) {
      return fromInlineStyle({ maxWidth: maxWidth });
    }),
    minHeight: function (_minHeight) {
      function minHeight(_x4) {
        return _minHeight.apply(this, arguments);
      }

      minHeight.toString = function () {
        return _minHeight.toString();
      };

      return minHeight;
    }(function (minHeight) {
      return fromInlineStyle({ minHeight: minHeight });
    }),
    minWidth: function (_minWidth) {
      function minWidth(_x5) {
        return _minWidth.apply(this, arguments);
      }

      minWidth.toString = function () {
        return _minWidth.toString();
      };

      return minWidth;
    }(function (minWidth) {
      return fromInlineStyle({ minWidth: minWidth });
    }),
    overflow: mapping({
      hidden: layout.overflowHidden,
      scroll: layout.overflowScroll,
      auto: layout.overflowAuto,
      scrollX: layout.overflowScrollX,
      scrollY: layout.overflowScrollY
      // default: visible
    }),
    deprecatedPadding: function deprecatedPadding(value) {
      switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {
        case 'number':
          return fromClassName(whitespaceLegacy['p' + value]);
        case 'object':
          return concat([value.x ? fromClassName(whitespaceLegacy['px' + value.x]) : identity(), value.y ? fromClassName(whitespaceLegacy['py' + value.y]) : identity()]);
        default:
          return identity();
      }
    },
    padding: padding,
    paddingX: paddingX,
    paddingY: paddingY,
    smPadding: smPadding,
    smPaddingX: smPaddingX,
    smPaddingY: smPaddingY,
    mdPadding: mdPadding,
    mdPaddingX: mdPaddingX,
    mdPaddingY: mdPaddingY,
    lgPadding: lgPadding,
    lgPaddingX: lgPaddingX,
    lgPaddingY: lgPaddingY,
    position: mapping({
      absolute: layout.absolute,
      relative: layout.relative,
      fixed: layout.fixed
      // default: static
    }),
    right: toggle(layout.right0),
    shape: mapping({
      circle: borders.circle,
      pill: borders.pill,
      rounded: borders.rounded,
      roundedBottom: borders.roundedBottom,
      roundedLeft: borders.roundedLeft,
      roundedRight: borders.roundedRight,
      roundedTop: borders.roundedTop
      // default: square
    }),
    top: toggle(layout.top0),
    width: function (_width) {
      function width(_x6) {
        return _width.apply(this, arguments);
      }

      width.toString = function () {
        return _width.toString();
      };

      return width;
    }(function (width) {
      return fromInlineStyle({ width: width });
    }),
    wrap: toggle(layout.flexWrap),
    dangerouslySetInlineStyle: function dangerouslySetInlineStyle(value) {
      return (
        /* eslint-disable-next-line no-underscore-dangle */
        value && value.__style ? fromInlineStyle(value.__style) : identity()
      );
    }
  };

  /*

  # The Component

  */

  var contains = function contains(key, arr) {
    return arr.indexOf(key) >= 0;
  };
  var omit = function omit(keys, obj) {
    return Object.keys(obj).reduce(function (acc, k) {
      if (contains(k, keys)) {
        return acc;
      }
      return _extends({}, acc, defineProperty({}, k, obj[k]));
    }, {});
  };

  // $FlowIssue https://github.com/facebook/flow/issues/6103
  var Box = React.forwardRef(function (_ref, ref) {
    var children = _ref.children,
        props = objectWithoutProperties(_ref, ['children']);

    // Flow can't reason about the constant nature of Object.keys so we can't use
    // a functional (reduce) style here.

    // Box is a "pass-through" component, meaning that if you pass properties to
    // it that it doesn't know about (`aria-label` for instance) it passes
    // directly back to the underlying `<div/>`. That's generally useful, but
    // we'd also like to strip out a few naughty properties that break style
    // encapsulation (className, style) or accessibility (onClick).
    var blacklist = ['onClick', 'className', 'style'];

    // All Box's are box-sized by default, so we start off building up the styles
    // to be applied with a Box base class.
    var s = fromClassName(styles.box);

    // This loops through each property and if it exists in the previously
    // defined transform map, concatentes the resulting styles to the base
    // styles. If there's a match, we also don't pass through that property. This
    // means Box's runtime is only dependent on the number of properties passed
    // to it (which is typically small) instead of the total number of possible
    // properties (~30 or so). While it may ~feel~ like Box is innefficient, its
    // biggest performance impact is on startup time because there's so much code
    // here.

    // eslint-disable-next-line no-restricted-syntax
    for (var prop in props) {
      if (Object.prototype.hasOwnProperty.call(propToFn, prop)) {
        var fn = propToFn[prop];
        var value = props[prop];
        blacklist = blacklist.concat(prop);
        s = concat([s, fn(value)]);
      }
    }

    // And... magic!
    return React.createElement(
      'div',
      _extends({}, omit(blacklist, props), toProps(s), { ref: ref }),
      children
    );
  });

  //  NOTE: This is needed in order to override the ForwardRef display name that is
  //  used in dev tools and in snapshot testing.
  Box.displayName = 'Box';

  /*

  # PropTypes

  And we're done here :)

  */

  var ColumnPropType = PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);

  var MarginPropType = PropTypes.oneOf([-12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);

  var PaddingPropType = PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);

  Box.propTypes = {
    children: PropTypes.node,
    dangerouslySetInlineStyle: PropTypes.exact({
      __style: PropTypes.object
    }),

    xs: PropTypes.exact({
      display: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['flex', 'flexColumn', 'inlineBlock'])]),
      column: PropTypes.number
    }),
    sm: PropTypes.exact({
      display: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['flex', 'flexColumn', 'inlineBlock'])]),
      column: PropTypes.number
    }),
    md: PropTypes.exact({
      display: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['flex', 'flexColumn', 'inlineBlock'])]),
      column: PropTypes.number
    }),
    lg: PropTypes.exact({
      display: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['flex', 'flexColumn', 'inlineBlock'])]),
      column: PropTypes.number
    }),
    deprecatedMargin: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
      top: PropTypes.number,
      bottom: PropTypes.number,
      left: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf(['auto'])]),
      right: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf(['auto'])])
    })]),
    deprecatedPadding: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
      x: PropTypes.number,
      y: PropTypes.number
    })]),

    display: PropTypes.oneOf(['none', 'flex', 'block', 'inlineBlock', 'visuallyHidden']),
    direction: PropTypes.oneOf(['row', 'column']),
    column: ColumnPropType,

    smDisplay: PropTypes.oneOf(['none', 'flex', 'block', 'inlineBlock', 'visuallyHidden']),
    smDirection: PropTypes.oneOf(['row', 'column']),
    smColumn: ColumnPropType,

    mdDisplay: PropTypes.oneOf(['none', 'flex', 'block', 'inlineBlock', 'visuallyHidden']),
    mdDirection: PropTypes.oneOf(['row', 'column']),
    mdColumn: ColumnPropType,

    lgDisplay: PropTypes.oneOf(['none', 'flex', 'block', 'inlineBlock', 'visuallyHidden']),
    lgDirection: PropTypes.oneOf(['row', 'column']),
    lgColumn: ColumnPropType,

    alignContent: PropTypes.oneOf(['start', 'end', 'center', 'between', 'around', 'stretch']),
    alignItems: PropTypes.oneOf(['start', 'end', 'center', 'baseline', 'stretch']),
    alignSelf: PropTypes.oneOf(['auto', 'start', 'end', 'center', 'baseline', 'stretch']),
    bottom: PropTypes.bool,
    color: PropTypes.oneOf(['blue', 'darkGray', 'darkWash', 'eggplant', 'gray', 'green', 'lightGray', 'lightWash', 'maroon', 'midnight', 'navy', 'olive', 'orange', 'orchid', 'pine', 'purple', 'red', 'transparent', 'watermelon', 'white']),
    fit: PropTypes.bool,
    flex: PropTypes.oneOf(['grow', 'shrink', 'none']),
    grow: PropTypes.bool,
    height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    justifyContent: PropTypes.oneOf(['start', 'end', 'center', 'between', 'around']),
    left: PropTypes.bool,

    marginStart: MarginPropType,
    marginEnd: MarginPropType,

    margin: MarginPropType,
    marginTop: MarginPropType,
    marginRight: MarginPropType,
    marginBottom: MarginPropType,
    marginLeft: MarginPropType,

    smMargin: MarginPropType,
    smMarginTop: MarginPropType,
    smMarginRight: MarginPropType,
    smMarginBottom: MarginPropType,
    smMarginLeft: MarginPropType,

    mdMargin: MarginPropType,
    mdMarginTop: MarginPropType,
    mdMarginRight: MarginPropType,
    mdMarginBottom: MarginPropType,
    mdMarginLeft: MarginPropType,

    lgMargin: MarginPropType,
    lgMarginTop: MarginPropType,
    lgMarginRight: MarginPropType,
    lgMarginBottom: MarginPropType,
    lgMarginLeft: MarginPropType,

    maxHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    maxWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    minHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    minWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),

    overflow: PropTypes.oneOf(['visible', 'hidden', 'scroll', 'scrollX', 'scrollY', 'auto']),

    padding: PaddingPropType,
    paddingX: PaddingPropType,
    paddingY: PaddingPropType,

    smPadding: PaddingPropType,
    smPaddingX: PaddingPropType,
    smPaddingY: PaddingPropType,

    mdPadding: PaddingPropType,
    mdPaddingX: PaddingPropType,
    mdPaddingY: PaddingPropType,

    lgPadding: PaddingPropType,
    lgPaddingX: PaddingPropType,
    lgPaddingY: PaddingPropType,

    position: PropTypes.oneOf(['static', 'absolute', 'relative', 'fixed']),
    right: PropTypes.bool,
    shape: PropTypes.oneOf(['square', 'rounded', 'pill', 'circle', 'roundedTop', 'roundedBottom', 'roundedLeft', 'roundedRight']),
    top: PropTypes.bool,
    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    wrap: PropTypes.bool
  };

  var styles$1 = { "icon": "_u0", "iconBlock": "_u1 _45" };

  var add = 'M22 10h-8V2a2 2 0 0 0-4 0v8H2a2 2 0 0 0 0 4h8v8a2 2 0 0 0 4 0v-8h8a2 2 0 0 0 0-4';

  var addCircle = 'M17.75 13.25h-4.5v4.5a1.25 1.25 0 0 1-2.5 0v-4.5h-4.5a1.25 1.25 0 0 1 0-2.5h4.5v-4.5a1.25 1.25 0 0 1 2.5 0v4.5h4.5a1.25 1.25 0 0 1 0 2.5M12 0C5.37 0 0 5.37 0 12s5.37 12 12 12 12-5.37 12-12S18.63 0 12 0';

  var addPin = 'M21.5 8.69c1.49.87 2.5 2.46 2.5 4.31h-4v7.96L19 23l-1-2.04V13h-4c0-1.85 1.01-3.44 2.5-4.31V2.93c-.86-.22-1.5-1-1.5-1.93h8c0 .93-.64 1.71-1.5 1.93v5.76zm-11.25.81a1.25 1.25 0 0 1 0 2.5H7v3.25a1.25 1.25 0 0 1-2.5 0V12H1.25a1.25 1.25 0 0 1 0-2.5H4.5V6.25a1.25 1.25 0 0 1 2.5 0V9.5h3.25z';

  var alignBottomCenter = 'M20.5 19.75c0 .413-.337.75-.75.75H15.5V14h-7v6.5H4.25a.752.752 0 0 1-.75-.75V4.25a.75.75 0 0 1 .75-.75h15.5a.75.75 0 0 1 .75.75v15.5zM19.75 1H4.25A3.254 3.254 0 0 0 1 4.25v15.5A3.254 3.254 0 0 0 4.25 23h15.5A3.254 3.254 0 0 0 23 19.75V4.25A3.254 3.254 0 0 0 19.75 1z';

  var alignBottomLeft = 'M20.5 19.75c0 .413-.337.75-.75.75H10V14H3.5V4.25a.75.75 0 0 1 .75-.75h15.5a.75.75 0 0 1 .75.75v15.5zM19.75 1H4.25A3.254 3.254 0 0 0 1 4.25v15.5A3.254 3.254 0 0 0 4.25 23h15.5A3.254 3.254 0 0 0 23 19.75V4.25A3.254 3.254 0 0 0 19.75 1z';

  var alignBottomRight = 'M3.5 19.75V4.25a.75.75 0 0 1 .75-.75h15.5a.75.75 0 0 1 .75.75V14H14v6.5H4.25a.752.752 0 0 1-.75-.75M19.75 1H4.25A3.254 3.254 0 0 0 1 4.25v15.5A3.254 3.254 0 0 0 4.25 23h15.5A3.254 3.254 0 0 0 23 19.75V4.25A3.254 3.254 0 0 0 19.75 1';

  var alignBottom = 'M4.25 3.5h15.5a.75.75 0 0 1 .75.75V14h-17V4.25a.75.75 0 0 1 .75-.75M19.75 1H4.25A3.254 3.254 0 0 0 1 4.25v15.5A3.254 3.254 0 0 0 4.25 23h15.5A3.254 3.254 0 0 0 23 19.75V4.25A3.254 3.254 0 0 0 19.75 1';

  var alignMiddle = 'M19.75 20.5H4.25a.75.75 0 0 1-.75-.75V15.5h17v4.25a.75.75 0 0 1-.75.75m-15.5-17h15.5a.75.75 0 0 1 .75.75V8.5h-17V4.25a.75.75 0 0 1 .75-.75M19.75 1H4.25A3.254 3.254 0 0 0 1 4.25v15.5A3.254 3.254 0 0 0 4.25 23h15.5A3.254 3.254 0 0 0 23 19.75V4.25A3.254 3.254 0 0 0 19.75 1';

  var alignTopCenter = 'M20.5 19.75a.75.75 0 0 1-.75.75H4.25a.75.75 0 0 1-.75-.75V4.25a.75.75 0 0 1 .75-.75H8.5V10h7V3.5h4.25a.75.75 0 0 1 .75.75v15.5zM19.75 1H4.25A3.254 3.254 0 0 0 1 4.25v15.5A3.254 3.254 0 0 0 4.25 23h15.5A3.254 3.254 0 0 0 23 19.75V4.25A3.254 3.254 0 0 0 19.75 1z';

  var alignTopLeft = 'M20.5 19.75a.75.75 0 0 1-.75.75H4.25a.75.75 0 0 1-.75-.75V10H10V3.5h9.75a.75.75 0 0 1 .75.75v15.5zM19.75 1H4.25A3.254 3.254 0 0 0 1 4.25v15.5A3.254 3.254 0 0 0 4.25 23h15.5A3.254 3.254 0 0 0 23 19.75V4.25A3.254 3.254 0 0 0 19.75 1z';

  var alignTopRight = 'M19.75 20.5H4.25a.75.75 0 0 1-.75-.75V4.25a.75.75 0 0 1 .75-.75H14V10h6.5v9.75a.75.75 0 0 1-.75.75m0-19.5H4.25A3.254 3.254 0 0 0 1 4.25v15.5A3.254 3.254 0 0 0 4.25 23h15.5A3.254 3.254 0 0 0 23 19.75V4.25A3.254 3.254 0 0 0 19.75 1';

  var alignTop = 'M19.75 20.5H4.25a.752.752 0 0 1-.75-.75V10h17v9.75c0 .413-.337.75-.75.75m0-19.5H4.25A3.254 3.254 0 0 0 1 4.25v15.5A3.254 3.254 0 0 0 4.25 23h15.5A3.254 3.254 0 0 0 23 19.75V4.25A3.254 3.254 0 0 0 19.75 1';

  var angledPin = 'M13.988,19.153 C15.485,17.656 15.985,15.446 15.481,13.537 L19.740,9.074 L22.662,8.807 L22.645,8.789 C22.739,8.804 22.837,8.780 22.909,8.708 C23.030,8.587 23.031,8.391 22.910,8.271 L15.730,1.090 C15.609,0.970 15.413,0.970 15.292,1.091 C15.220,1.163 15.197,1.262 15.211,1.356 L15.194,1.338 L14.927,4.261 L10.463,8.520 C8.554,8.015 6.344,8.516 4.847,10.012 L8.656,13.821 L3.324,19.153 C2.562,19.915 0.711,22.108 1.039,22.962 C1.892,23.290 4.086,21.438 4.847,20.676 C5.609,19.915 10.179,15.344 10.179,15.344 L13.988,19.153 Z';

  var apps = 'M20 17a3 3 0 1 0 0 6 3 3 0 0 0 0-6m0-8a3 3 0 1 0 0 6 3 3 0 0 0 0-6m0-8a3 3 0 1 0 0 6 3 3 0 0 0 0-6m-8 16a3 3 0 1 0 0 6 3 3 0 0 0 0-6m0-8a3 3 0 1 0 0 6 3 3 0 0 0 0-6m0-8a3 3 0 1 0 0 6 3 3 0 0 0 0-6M4 17a3 3 0 1 0 0 6 3 3 0 0 0 0-6m0-8a3 3 0 1 0 0 6 3 3 0 0 0 0-6m3-5a3 3 0 1 1-6 0 3 3 0 0 1 6 0';

  var arrowBack = 'M17.28 24c-.57 0-1.14-.22-1.58-.66L4.5 12 15.7.66a2.21 2.21 0 0 1 3.15 0c.87.88.87 2.3 0 3.18L10.79 12l8.06 8.16c.87.88.87 2.3 0 3.18-.44.44-1 .66-1.57.66';

  var arrowCircleForward = 'M12.94 16.07c-.49.48-1.28.48-1.77 0a1.25 1.25 0 0 1 0-1.77l1.06-1.07H8.25a1.25 1.25 0 0 1 0-2.5h3.95L11.17 9.7a1.25 1.25 0 0 1 0-1.77c.49-.48 1.28-.48 1.77 0L17 12l-4.06 4.07zM12 0C5.37 0 0 5.37 0 12s5.37 12 12 12 12-5.37 12-12S18.63 0 12 0z';

  var arrowCircleDown = 'M0 12c0 6.63 5.37 12 12 12s12-5.37 12-12S18.63 0 12 0 0 5.37 0 12zm10.77-3.75a1.25 1.25 0 0 1 2.5 0v3.95l1.03-1.03a1.25 1.25 0 0 1 1.77 0c.48.49.48 1.28 0 1.77L12 17l-4.07-4.06c-.48-.49-.48-1.28 0-1.77a1.25 1.25 0 0 1 1.77 0l1.07 1.06V8.25z';

  var arrowDown = 'M12 19.5L.66 8.29c-.88-.86-.88-2.27 0-3.14.88-.87 2.3-.87 3.18 0L12 13.21l8.16-8.06c.88-.87 2.3-.87 3.18 0 .88.87.88 2.28 0 3.14L12 19.5z';

  var arrowForward = 'M6.72 24c.57 0 1.14-.22 1.57-.66L19.5 12 8.29.66c-.86-.88-2.27-.88-3.14 0-.87.88-.87 2.3 0 3.18L13.21 12l-8.06 8.16c-.87.88-.87 2.3 0 3.18.43.44 1 .66 1.57.66';

  var arrowUp = 'M21.75 19.5c-.58 0-1.15-.22-1.59-.65L12 10.79l-8.16 8.06c-.88.87-2.3.87-3.18 0a2.21 2.21 0 0 1 0-3.15L12 4.5l11.34 11.2c.88.87.88 2.28 0 3.15-.44.43-1.01.65-1.59.65';

  var arrowUpRight = 'M4.9283,1 C3.6273,1 2.5713,2.054 2.5713,3.357 C2.5713,4.66 3.6273,5.714 4.9283,5.714 L14.9523,5.714 L1.6893,18.976 C0.7703,19.896 0.7703,21.389 1.6893,22.31 C2.1503,22.771 2.7533,23 3.3573,23 C3.9603,23 4.5633,22.771 5.0243,22.31 L18.2853,9.047 L18.2853,19.071 C18.2853,20.374 19.3413,21.429 20.6433,21.429 C21.9443,21.429 23.0003,20.374 23.0003,19.071 L23.0003,1 L4.9283,1 Z';

  var bell = 'M12 24c-1.66 0-3-1.34-3-3h6c0 1.66-1.34 3-3 3zm7-10.83c1.58 1.52 2.67 3.55 3 5.83H2c.33-2.28 1.42-4.31 3-5.83V7c0-3.87 3.13-7 7-7s7 3.13 7 7v6.17z';

  var camera = 'M6.36 4.99L8.56 2h6.88l2.2 2.99h3.09c1.8 0 3.27 1.49 3.27 3.33v10.35c0 1.84-1.47 3.33-3.27 3.33H3.27C1.47 22 0 20.51 0 18.67V8.32c0-1.84 1.47-3.33 3.27-3.33h3.09zM12 7.22a5.74 5.74 0 1 0 0 11.48 5.74 5.74 0 0 0 0-11.48m0 2.73c1.66 0 3.01 1.35 3.01 3.01 0 1.66-1.35 3.01-3.01 3.01-1.66 0-3.01-1.35-3.01-3.01 0-1.66 1.35-3.01 3.01-3.01';

  var cameraRoll = 'M8 10c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2M6.25 3.5h11.5c1.52 0 2.75 1.23 2.75 2.75v8.25L17 11l-6 6-3.5-3.5-4 4V6.25c0-1.52 1.23-2.75 2.75-2.75M17.75 1H6.25A5.25 5.25 0 0 0 1 6.25v11.5C1 20.64 3.35 23 6.25 23h11.5c2.89 0 5.25-2.36 5.25-5.25V6.25C23 3.35 20.64 1 17.75 1';

  var cancel = 'M15.18 12l7.16-7.16c.88-.88.88-2.3 0-3.18-.88-.88-2.3-.88-3.18 0L12 8.82 4.84 1.66c-.88-.88-2.3-.88-3.18 0-.88.88-.88 2.3 0 3.18L8.82 12l-7.16 7.16c-.88.88-.88 2.3 0 3.18.44.44 1.01.66 1.59.66.58 0 1.15-.22 1.59-.66L12 15.18l7.16 7.16c.44.44 1.01.66 1.59.66.58 0 1.15-.22 1.59-.66.88-.88.88-2.3 0-3.18L15.18 12z';

  var canonicalPin = 'M19 20c0 .551-.448 1-1 1h-7.471c-.551 0-1-.449-1-1v-2H14a2 2 0 0 0 2-2V8h2c.552 0 1 .449 1 1v11zM5.705 9.996a1.126 1.126 0 0 1 1.59-1.591L8.7 9.809l3.004-3.004a1.125 1.125 0 1 1 1.592 1.591L8.7 12.991 5.705 9.996zM18 6h-2V3a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2h2.529v2c0 1.654 1.346 3 3 3H18c1.654 0 3-1.346 3-3V9c0-1.654-1.346-3-3-3z';

  var check = 'M9.17 21.75L.73 12.79c-.97-1.04-.97-2.71 0-3.75a2.403 2.403 0 0 1 3.53 0l4.91 5.22L19.74 3.03c.98-1.04 2.55-1.04 3.53 0 .97 1.03.97 2.71 0 3.74L9.17 21.75z';

  var checkCircle = 'M18.88 9.88l-8.66 8.67-5.12-5.13a1.25 1.25 0 0 1 0-1.77c.48-.49 1.28-.49 1.76 0l3.36 3.36 6.9-6.89c.49-.49 1.28-.49 1.76 0 .49.49.49 1.28 0 1.76M12 0C5.37 0 0 5.37 0 12s5.37 12 12 12 12-5.37 12-12S18.63 0 12 0';

  var circleOutline = 'M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.6 0 12 0zm0 22.2C6.45 22.2 1.8 17.7 1.8 12 1.8 6.3 6.3 1.8 12 1.8c5.7 0 10.2 4.5 10.2 10.2 0 5.7-4.65 10.2-10.2 10.2z';

  var clear = 'M15.18 16.95L12 13.77l-3.18 3.18c-.49.49-1.28.49-1.77 0a1.25 1.25 0 0 1 0-1.77L10.23 12 7.05 8.82a1.25 1.25 0 0 1 0-1.77 1.25 1.25 0 0 1 1.77 0L12 10.23l3.18-3.18a1.25 1.25 0 0 1 1.77 0c.49.49.49 1.28 0 1.77L13.77 12l3.18 3.18c.49.49.49 1.28 0 1.77s-1.28.49-1.77 0M24 12c0-6.63-5.37-12-12-12S0 5.37 0 12s5.37 12 12 12 12-5.37 12-12';

  var clock = 'M17.83 17.83c-.37.36-.85.55-1.33.55-.48 0-.96-.19-1.33-.55l-5.04-5.05V6c0-1.04.83-1.87 1.87-1.87s1.88.83 1.88 1.87v5.22l3.95 3.95c.73.74.73 1.92 0 2.66M12 0C5.37 0 0 5.37 0 12s5.37 12 12 12 12-5.37 12-12S18.63 0 12 0';

  var cog = 'M6.25 2L.5 12l5.75 10h11.5l5.75-10-5.75-10H6.25zm1.703 10a4 4 0 1 1 8 0 4 4 0 0 1-8 0z';

  var colorPicker = 'M1.73 18.751l8.23-8.231 3.52 3.52-8.232 8.23a2.487 2.487 0 0 1-3.519 0 2.487 2.487 0 0 1 0-3.519zM22.026 1.972a3.318 3.318 0 0 1 0 4.693l-3.907 3.908.116.118a1.493 1.493 0 1 1-2.111 2.111l-4.928-4.927a1.494 1.494 0 0 1 2.112-2.112l.117.117 3.908-3.908a3.318 3.318 0 0 1 4.693 0z';

  var compass = 'M12.868 12.9A1.25 1.25 0 1 0 11.1 11.13a1.25 1.25 0 0 0 1.77 1.768m2.268 1.134c-.207.517-.62.924-1.139 1.124L5.62 18.38l3.223-8.377c.2-.52.607-.933 1.124-1.139l8.617-3.447-3.447 8.617zm5.348-10.519c-4.686-4.686-12.284-4.686-16.97 0-4.687 4.687-4.687 12.285 0 16.971 4.686 4.686 12.284 4.686 16.97 0 4.686-4.686 4.686-12.284 0-16.97z';

  var compose = 'M2.337 19.942l5.671-1.977L19.265 6.706c.981-.98.981-2.57 0-3.55l-1.42-1.421a2.51 2.51 0 0 0-3.55 0L3.036 12.992l-1.978 5.671a1.005 1.005 0 0 0 1.279 1.279M23 22c0 .55-.45 1-1 1H2c-.55 0-1-.45-1-1s.45-1 1-1h20c.55 0 1 .45 1 1';

  var crop = 'M22.5 4a1.5 1.5 0 1 1 0 3H20v11.5a1.5 1.5 0 0 1-1.5 1.5H7v2.5a1.5 1.5 0 1 1-3 0V20H1.5a1.5 1.5 0 1 1 0-3H4V5.5A1.5 1.5 0 0 1 5.5 4H17V1.5a1.5 1.5 0 1 1 3 0V4h2.5zM7 17h10V7H7v10zm5-3a2 2 0 1 1 .001-4.001A2 2 0 0 1 12 14z';

  var dash = 'M20 16H4c-2.2 0-4-1.8-4-4s1.8-4 4-4h16c2.2 0 4 1.8 4 4s-1.8 4-4 4';

  var download = 'M21 14a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-6a2 2 0 0 1 4 0v4h14v-4a2 2 0 0 1 2-2zM8.815 6.987l1.176 1.178V2a2 2 0 0 1 4 0v6.178l1.196-1.193a2 2 0 1 1 2.826 2.831l-6.025 6.013-6.004-6.016a2 2 0 0 1 2.831-2.826z';

  var edit = 'M13.386 6.018l4.596 4.596L7.097 21.499 1 22.999l1.501-6.096L13.386 6.018zm8.662-4.066a3.248 3.248 0 0 1 0 4.596L19.75 8.848 15.154 4.25l2.298-2.299a3.248 3.248 0 0 1 4.596 0z';

  var ellipsis = 'M12 9c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3M3 9c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm18 0c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3z';

  var ellipsisCircleOutline = 'M12 10.5c.9 0 1.5.6 1.5 1.5s-.6 1.5-1.5 1.5-1.5-.6-1.5-1.5.6-1.5 1.5-1.5zm-4.5 0c.9 0 1.5.6 1.5 1.5s-.6 1.5-1.5 1.5S6 12.9 6 12s.6-1.5 1.5-1.5zm9 0c.9 0 1.5.6 1.5 1.5s-.6 1.5-1.5 1.5S15 12.9 15 12s.6-1.5 1.5-1.5zM12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.6 0 12 0zm0 22.2C6.45 22.2 1.8 17.7 1.8 12 1.8 6.3 6.3 1.8 12 1.8c5.7 0 10.2 4.5 10.2 10.2 0 5.7-4.65 10.2-10.2 10.2z';

  var envelope = 'M21.53 7.508l-7.586 7.452c-.536.526-1.24.79-1.944.79a2.77 2.77 0 0 1-1.945-.79L2.47 7.508a.728.728 0 0 1 0-1.043.76.76 0 0 1 1.061 0l7.586 7.452c.487.48 1.28.48 1.768 0l7.585-7.452a.76.76 0 0 1 1.061 0 .728.728 0 0 1 0 1.043zM1 19h22V5H1v14z';

  var eye = 'M10,12 C10,13.105 10.895,14 12,14 C13.105,14 14,13.105 14,12 C14,10.895 13.105,10 12,10 C10.895,10 10,10.895 10,12 Z M12,17 C9.239,17 7,14.761 7,12 C7,9.239 9.239,7 12,7 C14.761,7 17,9.239 17,12 C17,14.761 14.761,17 12,17 M12,3.5 C6.455,3.5 1.751,7.051 0,12 C1.751,16.949 6.455,20.5 12,20.5 C17.545,20.5 22.249,16.949 24,12 C22.249,7.051 17.545,3.5 12,3.5';

  var facebook = 'M17.75 3.984l-2.312.001c-1.811 0-2.163.842-2.163 2.077v2.724h4.323l-.563 4.267h-3.76V24H8.769V13.053H5V8.786h3.769V5.64C8.769 1.988 11.05 0 14.383 0c1.596 0 2.967.116 3.367.168v3.816z';

  var faceHappy = 'M12.023 20.713c-2.944 0-5.378-1.96-5.356-4.906.017-2.117 1.728-.536 5.33-.545 3.6-.01 5.322-1.645 5.327.548.007 2.946-2.356 4.903-5.3 4.903m4.439-9.83a1.675 1.675 0 1 1 0-3.351 1.675 1.675 0 0 1 0 3.35M6.093 9.207a1.675 1.675 0 1 1 3.35 0 1.675 1.675 0 0 1-3.35 0m17.906 2.782C23.994 5.367 18.623 0 12 0 5.373 0 0 5.373 0 12c0 6.628 5.373 12 12 12C18.624 24 23.995 18.633 24 12.01L24 12l-.001-.01';

  var faceSad = 'M17.088 17.841a1.2 1.2 0 0 1-1.593.58 4.517 4.517 0 0 0-.744-.217c-.738-.168-1.653-.27-2.75-.271-1.098 0-2.012.103-2.752.27-.411.094-.657.18-.741.217a1.199 1.199 0 1 1-1.014-2.174c.237-.11.643-.251 1.223-.383.915-.207 2.008-.33 3.284-.33 1.276.001 2.369.123 3.281.33.582.132.988.273 1.226.384.601.279.86.992.58 1.594zm-.624-6.959a1.675 1.675 0 1 1 0-3.35 1.675 1.675 0 0 1 0 3.35zM6.093 9.207a1.675 1.675 0 1 1 3.35 0 1.675 1.675 0 0 1-3.35 0zM24 11.989C23.995 5.367 18.624 0 12.002 0 5.373 0 0 5.373 0 12c0 6.628 5.373 12 12.002 12C18.623 24 23.995 18.633 24 12.01v-.02z';

  var faceSmiley = 'M16.5 11a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m.449 5.95A6.947 6.947 0 0 1 12 19a6.96 6.96 0 0 1-4.948-2.048.999.999 0 0 1 0-1.414.999.999 0 0 1 1.414-.001A4.968 4.968 0 0 0 12 17c1.336 0 2.592-.52 3.535-1.464a1 1 0 0 1 1.414 1.414M6 9.5a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0';

  var filter = 'M24 3.5c0-1.1-.9-2-2-2H2c-1.1 0-2 .9-2 2 0 .55.22 1.05.58 1.41L9 13.46v9.04l6-2v-7.05l8.37-8.5c.39-.36.63-.88.63-1.45';

  var fillOpaque = 'M6 18h12V6H6v12zm14.5 1.75a.75.75 0 0 1-.75.75H4.25a.75.75 0 0 1-.75-.75V4.25a.75.75 0 0 1 .75-.75h15.5a.75.75 0 0 1 .75.75v15.5zM19.75 1H4.25A3.254 3.254 0 0 0 1 4.25v15.5A3.254 3.254 0 0 0 4.25 23h15.5A3.254 3.254 0 0 0 23 19.75V4.25A3.254 3.254 0 0 0 19.75 1z';

  var fillTransparent = 'M10 14v-4h4v4h-4zm-4-4V6h4v4H6zm8 0V6h4v4h-4zm0 8v-4h4v4h-4zm-8 0v-4h4v4H6zm14.5 1.75a.75.75 0 0 1-.75.75H4.25a.75.75 0 0 1-.75-.75V4.25a.75.75 0 0 1 .75-.75h15.5a.75.75 0 0 1 .75.75v15.5zM19.75 1H4.25A3.254 3.254 0 0 0 1 4.25v15.5A3.254 3.254 0 0 0 4.25 23h15.5A3.254 3.254 0 0 0 23 19.75V4.25A3.254 3.254 0 0 0 19.75 1z';

  var flag = 'M17 7.5L22 0H2v22c0 1.1.9 2 2 2s2-.9 2-2v-7h16l-5-7.5z';

  var flashlight = 'M6 7.08V10H1V7.08A6.086 6.086 0 0 1 7.079 1H10v5H6v1.08zM6 18h4v5H7.079A6.086 6.086 0 0 1 1 16.921V14h5v4zM16.92 1A6.086 6.086 0 0 1 23 7.079V10h-5V6h-4V1h2.92zM18 16.92V14h5v2.92A6.086 6.086 0 0 1 16.921 23H14v-5h4v-1.08z';

  var flipHorizontal = 'M12 4.118v16.384H3.815L12 4.118zm10.778 15.975L13.792 2.107A1.98 1.98 0 0 0 12 1c-.712 0-1.423.37-1.792 1.107L1.22 20.093C.541 21.422 1.51 23 3.006 23h17.99c1.495 0 2.462-1.578 1.782-2.907z';

  var flipVertical = 'M19.882 12H3.498V3.814L19.882 12zm2.012-1.792L3.907 1.22A1.98 1.98 0 0 0 2.999 1C1.951 1 1 1.843 1 3.005v17.99C1 22.157 1.951 23 3 23c.3 0 .61-.07.907-.221l17.987-8.987c1.475-.737 1.475-2.847 0-3.584z';

  var gif = 'M19.5 3h-15C2.02 3 0 5.03 0 7.5v9C0 18.98 2.02 21 4.5 21h15c2.47 0 4.5-2.02 4.5-4.5v-9C24 5.03 21.97 3 19.5 3zm-7.41 12.88v-7.8h1.59v7.8h-1.59zm3.45-7.8h5.58v1.34h-4v1.88h3.39v1.35h-3.39v3.23h-1.58v-7.8zm-11.4 6.83c-.33-.37-.58-.79-.76-1.28-.17-.49-.26-1.03-.26-1.62 0-.66.11-1.26.33-1.8.22-.55.53-1.01.95-1.39.32-.29.68-.51 1.1-.66.41-.15.88-.23 1.4-.23.49 0 .93.06 1.32.19s.72.31 1 .54c.27.23.5.51.67.83.17.32.29.67.35 1.04H8.69a1.67 1.67 0 0 0-.56-.93c-.29-.24-.69-.36-1.19-.36-.37 0-.7.07-.97.21-.27.14-.5.34-.69.59-.18.25-.32.54-.41.88-.09.34-.13.7-.13 1.09 0 .4.05.77.15 1.1.1.34.25.63.43.88.19.24.42.43.69.57.27.14.57.21.9.21.31 0 .59-.05.83-.16.25-.1.46-.23.64-.4.17-.17.31-.36.4-.57.1-.21.14-.42.14-.64v-.04H7.05v-1.22h3.28v4.14H9.14l-.05-1.05h-.03c-.27.45-.58.77-.94.94a2.8 2.8 0 0 1-1.25.27c-.59 0-1.11-.1-1.56-.3-.46-.2-.85-.48-1.17-.83z';

  var globe = 'M15.49 20.83c.87-2.01 1.37-4.75 1.48-7.58h4.44a9.53 9.53 0 0 1-5.92 7.58zm-12.9-7.58h4.44c.11 2.83.61 5.57 1.49 7.58-3.15-1.25-5.47-4.12-5.93-7.58zM8.52 3.17c-.88 2.01-1.38 4.75-1.49 7.58H2.59c.46-3.46 2.78-6.33 5.93-7.58zm1.01 7.58C9.76 5.43 11.4 2.54 12 2.5h.01c.67.06 2.24 3.01 2.46 8.25H9.53zm2.48 10.75H12c-.6-.04-2.24-2.93-2.47-8.25h4.94c-.22 5.24-1.79 8.19-2.46 8.25zm9.4-10.75h-4.44c-.11-2.83-.61-5.57-1.48-7.58a9.53 9.53 0 0 1 5.92 7.58zM24 12C24 5.39 18.62.01 12.01 0H12C5.38 0 0 5.38 0 12s5.38 12 12 12h.01C18.62 24 24 18.61 24 12z';

  var globeChecked = 'M6.8 9.8H3.1C3.5 7 5.4 4.6 8 3.6c-.7 1.7-1.1 3.9-1.2 6.2m-3.7 2.1h3.7c.1 2.3.5 4.6 1.2 6.2-2.6-1-4.5-3.3-4.9-6.2m7.8-8.8c.5 0 1.8 2.4 2 6.7H8.8c.2-4.3 1.6-6.7 2.1-6.7M9.5 16.3c-.3-1.1-.6-2.6-.7-4.4h2.7c.9-1 2.1-1.7 3.5-2.1-.1-2.3-.5-4.5-1.3-6.2 2.6 1 4.4 3.3 4.9 6.1.7.1 1.5.4 2.1.8-.2-5.3-4.5-9.5-9.8-9.5C5.4 1 1 5.4 1 10.9c0 5.3 4.2 9.6 9.5 9.8-.6-1.1-1-2.3-1-3.7v-.7m10.8-.5L16.2 20l-2.5-2.5c-.3-.3-.3-.8 0-1.1.3-.3.8-.3 1 0l1.5 1.5 3.1-3.2c.2-.3.7-.3 1 0 .3.3.3.8 0 1.1M17 11c-3.3 0-6 2.7-6 6s2.7 6 6 6 6-2.7 6-6-2.7-6-6-6';

  var gmail = 'M3.173 4L12 10.194 20.556 4H3.173zM12 13.29L1 5.806V20h22V5.548L12 13.29z';

  var googlePlus = 'M7 11v2.4h3.97c-.16 1.029-1.2 3.02-3.97 3.02-2.39 0-4.34-1.979-4.34-4.42 0-2.44 1.95-4.42 4.34-4.42 1.36 0 2.27.58 2.79 1.08l1.9-1.83C10.47 5.69 8.89 5 7 5c-3.87 0-7 3.13-7 7s3.13 7 7 7c4.04 0 6.721-2.84 6.721-6.84 0-.46-.051-.81-.111-1.16H7zm17 0v2h-3v3h-2v-3h-3v-2h3V8h2v3h3z';

  var graphBar = 'M1 23V10h5v13H1zm8.5 0V1h5v22h-5zm8.5 0V7h4.999v16H18z';

  var knoop = 'M15 10.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5m0 6c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5m-6-6c-.83 0-1.5-.67-1.5-1.5S8.17 7.5 9 7.5s1.5.67 1.5 1.5-.67 1.5-1.5 1.5m0 6c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5M12 0C5.37 0 0 5.37 0 12s5.37 12 12 12 12-5.37 12-12S18.63 0 12 0';

  var lightbulb = 'M20 8c0 2.23-.91 4.24-2.39 5.7h.02c-.99.97-1.6 2.31-1.63 3.8V19H8v-1.5c-.03-1.5-.65-2.85-1.64-3.83A7.955 7.955 0 0 1 4 8c0-4.42 3.58-8 8-8s8 3.58 8 8zM8 22.5V21h8v1.5c0 .83-.67 1.5-1.5 1.5h-5c-.83 0-1.5-.67-1.5-1.5z';

  var logout = 'M12 14a2 2 0 0 0 2-2V3a2 2 0 0 0-4 0v9a2 2 0 0 0 2 2m11-2c0 2.938-1.144 5.701-3.222 7.778A10.925 10.925 0 0 1 12 23a10.925 10.925 0 0 1-7.778-3.222A10.925 10.925 0 0 1 1 12c0-2.938 1.144-5.701 3.222-7.778A2 2 0 0 1 7.05 7.051 6.952 6.952 0 0 0 5 12c0 1.87.728 3.627 2.05 4.949A6.953 6.953 0 0 0 12 19c1.87 0 3.627-.728 4.949-2.05A6.953 6.953 0 0 0 19 12c0-1.87-.728-3.627-2.05-4.949a2 2 0 1 1 2.828-2.829A10.925 10.925 0 0 1 23 12';

  var logoLarge = 'M18.656 11.196l-3.333 2.573 1.25 4.089c.25.817-.687 1.477-1.359.958L12 16.334l-3.214 2.482c-.673.519-1.609-.141-1.359-.958l1.25-4.09-3.334-2.572c-.66-.511-.304-1.578.53-1.578h4.073L11.17 5.62c.252-.826 1.41-.826 1.662 0l1.222 3.998h4.075c.833 0 1.19 1.067.528 1.578zM21.75 3.5H2.25a1.25 1.25 0 0 1 0-2.5h19.5a1.25 1.25 0 0 1 0 2.5zm0 19.5H2.25a1.25 1.25 0 0 1 0-2.5h19.5a1.25 1.25 0 0 1 0 2.5z';

  var logoSmall = 'M15.804 14.54L13.9 16.01l.714 2.337c.143.467-.392.845-.777.547L12 17.477l-1.837 1.418c-.384.297-.92-.08-.776-.547l.714-2.337-1.904-1.47c-.378-.293-.174-.902.3-.902h2.329l.7-2.285a.495.495 0 0 1 .949 0l.699 2.285h2.328c.476 0 .68.61.302.902zM21.75 9.5H2.25a1.25 1.25 0 0 1 0-2.5h19.5a1.25 1.25 0 0 1 0 2.5zm0 13.5H2.25a1.25 1.25 0 0 1 0-2.5h19.5a1.25 1.25 0 0 1 0 2.5z';

  var handle = 'M3 15h18a1 1 0 0 1 0 2H3a1 1 0 0 1 0-2zm0-4h18a1 1 0 0 1 0 2H3a1 1 0 0 1 0-2zm0-4h18a1 1 0 0 1 0 2H3a1 1 0 1 1 0-2z';

  var handPointing = 'M17.776,22.390 C13.775,23.978 9.246,22.359 7.219,18.770 C7.040,18.503 6.860,18.218 6.688,17.910 C5.132,15.163 3.028,13.782 2.588,13.581 C2.149,13.378 0.595,12.613 1.100,11.692 C1.381,11.180 2.163,10.801 2.878,10.726 C4.000,10.481 5.897,11.034 7.772,12.222 L4.054,3.419 C3.741,2.677 3.989,1.850 4.609,1.379 C4.612,1.376 4.616,1.373 4.621,1.369 C4.676,1.327 4.734,1.289 4.796,1.253 C4.810,1.247 4.821,1.239 4.835,1.231 C4.901,1.195 4.970,1.160 5.042,1.132 C5.044,1.131 5.044,1.131 5.045,1.131 C5.045,1.131 5.045,1.131 5.047,1.129 C5.119,1.101 5.193,1.079 5.267,1.060 C5.281,1.057 5.295,1.054 5.309,1.049 C5.380,1.035 5.449,1.021 5.518,1.013 C5.525,1.013 5.529,1.011 5.534,1.011 C6.317,0.928 7.093,1.347 7.406,2.088 L9.592,7.261 C9.643,6.623 10.055,6.035 10.709,5.776 C11.633,5.410 12.689,5.839 13.069,6.734 C13.071,6.742 13.074,6.752 13.077,6.759 C13.143,6.136 13.552,5.565 14.191,5.312 C15.117,4.946 16.173,5.373 16.551,6.271 C16.567,6.305 16.578,6.341 16.591,6.379 C16.680,5.784 17.079,5.249 17.695,5.006 C18.619,4.640 19.619,4.970 19.999,5.867 L20.001,5.872 C20.001,5.872 21.115,8.039 22.366,11.651 C22.413,11.791 22.457,11.931 22.495,12.072 C24.027,16.161 21.967,20.728 17.776,22.390';

  var heart = 'M11.98 22.25L1.82 11.95C-.28 9.83-.65 6.4 1.18 4.03a5.763 5.763 0 0 1 8.7-.56l2.1 2.14 1.95-1.98c2.1-2.13 5.48-2.5 7.82-.65 2.8 2.23 2.99 6.35.55 8.82L11.98 22.25z';

  var heartBroken = 'M11.98 22.25L1.82 11.95C-.28 9.83-.65 6.4 1.18 4.03a5.763 5.763 0 0 1 8.7-.56l2.1 2.14 1.95-1.98c2.1-2.13 5.48-2.5 7.82-.65 2.8 2.23 2.99 6.35.55 8.82L11.98 22.25zM15.3 9.54c.4-.4.4-1.06 0-1.46-.4-.4-1.05-.4-1.45 0L12 9.94l-1.85-1.86c-.4-.4-1.05-.4-1.45 0-.4.4-.4 1.06 0 1.46l1.85 1.86-1.85 1.86c-.4.4-.4 1.05 0 1.45.4.4 1.05.41 1.45 0L12 12.85l1.85 1.86c.4.41 1.05.41 1.45 0 .4-.4.4-1.05 0-1.45l-1.85-1.86 1.85-1.86z';

  var impressum = 'M10 12c0-1.103.897-2 2-2s2 .897 2 2-.897 2-2 2-2-.897-2-2m2-5c-1.103 0-2-.897-2-2s.897-2 2-2 2 .897 2 2h3c0-2.757-2.243-5-5-5S7 2.243 7 5a4.98 4.98 0 0 0 1.438 3.5A4.98 4.98 0 0 0 7 12c0 2.757 2.243 5 5 5 1.103 0 2 .897 2 2s-.897 2-2 2-2-.897-2-2H7c0 2.757 2.243 5 5 5s5-2.243 5-5a4.98 4.98 0 0 0-1.438-3.5A4.98 4.98 0 0 0 17 12c0-2.757-2.243-5-5-5';

  var link = 'M21 15.05c1.1 0 2 .9 2 2V21c0 1.1-.9 2-2 2H3c-1.1 0-2-.9-2-2V3c0-1.1.9-2 2-2h4a2 2 0 1 1 0 4H5v14h14v-1.95c0-1.1.9-2 2-2zM12 14c-.51 0-1.02-.2-1.41-.59-.79-.78-.79-2.04 0-2.82L16.16 5 14 5.01c-1.1 0-2-.9-2-2 0-1.11.89-2 2-2L20.99 1h2v2l.01 7a2 2 0 1 1-4 0V7.83l-5.59 5.58c-.39.39-.9.59-1.41.59z';

  var location = 'M12 4.5c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3m7.5 3C19.5 3.36 16.14 0 12 0 7.86 0 4.5 3.36 4.5 7.5c0 1.3.36 2.5.94 3.56H5.4L12 24l6.6-12.94h-.04c.58-1.06.94-2.26.94-3.56';

  var lock = 'M8 10V7c0-2.206 1.794-4 4-4s4 1.794 4 4v3H8zm11 .017V7c0-3.86-3.141-7-7-7S5 3.14 5 7v3.017a8.698 8.698 0 0 0-1.75 5.233 8.75 8.75 0 1 0 17.5 0A8.698 8.698 0 0 0 19 10.017z';

  var marginsLarge = 'M18.75 1A4.255 4.255 0 0 1 23 5.25v13.5A4.255 4.255 0 0 1 18.75 23H5.25A4.255 4.255 0 0 1 1 18.75V5.25A4.255 4.255 0 0 1 5.25 1h13.5zM5.5 18.5h13v-13h-13v13zm9.97-1.97l-1.5-1.5-1.47 1.47v-4h4l-1.47 1.47 1.5 1.5-1.06 1.06zM7.5 11.5l1.47-1.47-1.5-1.5 1.06-1.06 1.5 1.5L11.5 7.5v4h-4z';

  var marginsMedium = 'M7.53 6.47l1.5 1.5L10.5 6.5v4h-4l1.47-1.47-1.5-1.5 1.06-1.06zm9.97 7.03l-1.47 1.47 1.5 1.5-1.06 1.06-1.5-1.5-1.47 1.47v-4h4zm2 5.75a.25.25 0 0 1-.25.25H4.75a.25.25 0 0 1-.25-.25V4.75a.25.25 0 0 1 .25-.25h14.5a.25.25 0 0 1 .25.25v14.5zM19.25 1H4.75A3.754 3.754 0 0 0 1 4.75v14.5A3.754 3.754 0 0 0 4.75 23h14.5A3.754 3.754 0 0 0 23 19.25V4.75A3.754 3.754 0 0 0 19.25 1z';

  var marginsSmall = 'M18.5 14.5l-1.47 1.47 1.5 1.5-1.06 1.06-1.5-1.5-1.47 1.47v-4h4zM6.53 5.47l1.5 1.5L9.5 5.5v4h-4l1.47-1.47-1.5-1.5 1.06-1.06zM20.5 19.75a.75.75 0 0 1-.75.75H4.25a.75.75 0 0 1-.75-.75V4.25a.75.75 0 0 1 .75-.75h15.5a.75.75 0 0 1 .75.75v15.5zM19.75 1H4.25A3.254 3.254 0 0 0 1 4.25v15.5A3.254 3.254 0 0 0 4.25 23h15.5A3.254 3.254 0 0 0 23 19.75V4.25A3.254 3.254 0 0 0 19.75 1z';

  var maximize = 'M11 2.25c0 .69-.56 1.25-1.25 1.25H5.268l5.366 5.366a1.25 1.25 0 0 1-1.768 1.768L3.5 5.268V9.75a1.25 1.25 0 0 1-2.5 0V1h8.75c.69 0 1.25.56 1.25 1.25zM21.75 13c.69 0 1.25.56 1.25 1.25V23h-8.75a1.25 1.25 0 0 1 0-2.5h4.482l-5.366-5.366a1.25 1.25 0 0 1 1.768-1.768l5.366 5.366V14.25c0-.69.56-1.25 1.25-1.25z';

  var megaphone = 'M14 17.5c0 1.378-1.122 2.5-2.5 2.5A2.503 2.503 0 0 1 9 17.5V17h5v.5zm8.947-1.87L18.701 2.712a1.022 1.022 0 0 0-1.566-.521l-15.7 11.24c-.37.264-.525.744-.382 1.179l.551 1.678c.14.425.532.712.974.712H7v.5a4.5 4.5 0 0 0 9 0V17h5.973c.7 0 1.195-.696.974-1.37z';

  var menu = 'M21.5 9.5c1.38 0 2.5 1.13 2.5 2.5a2.5 2.5 0 0 1-2.5 2.5h-19C1.13 14.5 0 13.38 0 12c0-1.37 1.13-2.5 2.5-2.5h19zm-19-3C1.13 6.5 0 5.38 0 4c0-1.37 1.13-2.5 2.5-2.5h19C22.88 1.5 24 2.63 24 4a2.5 2.5 0 0 1-2.5 2.5h-19zm19 11c1.38 0 2.5 1.13 2.5 2.5a2.5 2.5 0 0 1-2.5 2.5h-19C1.13 22.5 0 21.38 0 20c0-1.37 1.13-2.5 2.5-2.5h19z';

  var minimize = 'M1 9.75c0-.69.56-1.25 1.25-1.25h4.482L1.366 3.134a1.25 1.25 0 0 1 1.768-1.768L8.5 6.732V2.25a1.25 1.25 0 0 1 2.5 0V11H2.25C1.56 11 1 10.44 1 9.75zM14.25 23c-.69 0-1.25-.56-1.25-1.25V13h8.75a1.25 1.25 0 0 1 0 2.5h-4.482l5.366 5.366a1.25 1.25 0 0 1-1.768 1.768L15.5 17.268v4.482c0 .69-.56 1.25-1.25 1.25z';

  var move = 'M14.3 18.17a1.25 1.25 0 0 1 1.77 0c.49.49.49 1.28 0 1.76L12 24l-4.07-4.07c-.48-.48-.48-1.27 0-1.76a1.25 1.25 0 0 1 1.77 0l1.05 1.04v-3.96a1.25 1.25 0 0 1 2.5 0v3.96l1.05-1.04zm-9.51-4.92l1.04 1.05c.49.49.49 1.28 0 1.77-.48.48-1.28.48-1.76 0L0 12l4.07-4.07c.48-.48 1.28-.48 1.76 0 .49.49.49 1.28 0 1.77l-1.04 1.05h3.96a1.25 1.25 0 0 1 0 2.5H4.79zm15.14-5.32L24 12l-4.07 4.07c-.48.48-1.27.48-1.76 0a1.25 1.25 0 0 1 0-1.77l1.04-1.05h-3.96a1.25 1.25 0 0 1 0-2.5h3.96L18.17 9.7a1.25 1.25 0 0 1 0-1.77c.49-.48 1.28-.48 1.76 0zM9.7 5.83c-.49.49-1.28.49-1.77 0-.48-.49-.48-1.28 0-1.76L12 0l4.07 4.07c.49.48.49 1.27 0 1.76s-1.28.49-1.77 0l-1.05-1.04v3.96a1.25 1.25 0 0 1-2.5 0V4.79L9.7 5.83z';

  var mute = 'M5.00,7.94 L5.00,7.96 L12.00,1.00 L12.00,23.00 L5.00,16.91 L5.00,16.94 L2.00,16.94 C0.90,16.94 0.00,16.04 0.00,14.94 L0.00,9.94 C0.00,8.83 0.90,7.94 2.00,7.94 L5.00,7.94 Z M23.63,14.12 C24.12,14.60 24.12,15.39 23.63,15.88 C23.15,16.37 22.35,16.37 21.87,15.88 L19.75,13.77 L17.63,15.88 C17.15,16.37 16.35,16.37 15.87,15.88 C15.38,15.39 15.38,14.60 15.87,14.12 L17.98,12.00 L15.87,9.88 C15.38,9.39 15.38,8.60 15.87,8.12 C16.35,7.63 17.15,7.63 17.63,8.12 L19.75,10.23 L21.86,8.12 C22.35,7.63 23.15,7.63 23.63,8.12 C24.12,8.60 24.12,9.40 23.63,9.88 L21.52,12.00 L23.63,14.12 Z';

  var overlayText = 'M20 1a3 3 0 0 1 3 3v16a3 3 0 0 1-3 3H4a3 3 0 0 1-3-3V4a3 3 0 0 1 3-3h16zm-6.718 4.133a1.403 1.403 0 0 0-2.564 0l-5.597 12.6a1.396 1.396 0 0 0 .714 1.846 1.401 1.401 0 0 0 1.85-.711L8.56 16.9h6.882l.874 1.967a1.404 1.404 0 0 0 1.851.71 1.397 1.397 0 0 0 .713-1.845l-5.597-12.6zM9.803 14.1L12 9.155l2.197 4.945H9.803z';

  var pause = 'M7 0c1.65 0 3 1.35 3 3v18c0 1.65-1.35 3-3 3s-3-1.35-3-3V3c0-1.65 1.35-3 3-3zm10 0c1.65 0 3 1.35 3 3v18c0 1.65-1.35 3-3 3s-3-1.35-3-3V3c0-1.65 1.35-3 3-3z';

  var people = 'M8 11a4.5 4.5 0 1 1 0-9 4.5 4.5 0 0 1 0 9zm10 3c3.314 0 6 2.713 6 6.061V22H0v-1.919C0 15.618 3.582 12 8 12c2.614 0 4.927 1.272 6.387 3.23A5.927 5.927 0 0 1 18 14zm0-1a3.25 3.25 0 1 1 0-6.5 3.25 3.25 0 0 1 0 6.5z';

  var person = 'M12 12c5.523 0 10 4.477 10 10v2H2v-2c0-5.523 4.477-10 10-10zm0-1a5.5 5.5 0 1 1 0-11 5.5 5.5 0 1 1 0 11z';

  var personAdd = 'M16.5 12a7.5 7.5 0 0 1 7.5 7.5V21H9v-1.5a7.5 7.5 0 0 1 7.5-7.5zm0-1a4 4 0 1 1 0-8 4 4 0 0 1 0 8zm-7.25 1H6.5v2.75a1.25 1.25 0 0 1-2.5 0V12H1.25a1.25 1.25 0 0 1 0-2.5H4V6.75a1.25 1.25 0 0 1 2.5 0V9.5h2.75a1.25 1.25 0 0 1 0 2.5z';

  var pin = 'M18 13.5c0-2.22-1.21-4.15-3-5.19V2.45A2.5 2.5 0 0 0 17 0H7a2.5 2.5 0 0 0 2 2.45v5.86c-1.79 1.04-3 2.97-3 5.19h5v8.46L12 24l1-2.04V13.5h5z';

  var pinHide = 'M9.13 6.37c.49.48.49 1.27 0 1.76l-2.61 2.62 2.61 2.62c.49.48.49 1.27 0 1.76-.48.49-1.27.49-1.76 0l-2.62-2.61-2.62 2.61c-.48.49-1.28.49-1.76 0-.49-.49-.49-1.28 0-1.76l2.61-2.62L.37 8.13c-.49-.49-.49-1.28 0-1.76.48-.49 1.28-.49 1.76 0l2.62 2.61 2.62-2.61c.49-.49 1.28-.49 1.76 0zM20.5 8.69c1.49.87 2.5 2.46 2.5 4.31h-4v7.96L18 23l-1-2.04V13h-4c0-1.85 1.01-3.44 2.5-4.31V2.93c-.86-.22-1.5-1-1.5-1.93h8c0 .93-.64 1.71-1.5 1.93v5.76z';

  var pinterest = 'M0 12c0 5.123 3.211 9.497 7.73 11.218-.11-.937-.227-2.482.025-3.566.217-.932 1.401-5.938 1.401-5.938s-.357-.715-.357-1.774c0-1.66.962-2.9 2.161-2.9 1.02 0 1.512.765 1.512 1.682 0 1.025-.653 2.557-.99 3.978-.281 1.189.597 2.159 1.769 2.159 2.123 0 3.756-2.239 3.756-5.471 0-2.861-2.056-4.86-4.991-4.86-3.398 0-5.393 2.549-5.393 5.184 0 1.027.395 2.127.889 2.726a.36.36 0 0 1 .083.343c-.091.378-.293 1.189-.332 1.355-.053.218-.173.265-.4.159-1.492-.694-2.424-2.875-2.424-4.627 0-3.769 2.737-7.229 7.892-7.229 4.144 0 7.365 2.953 7.365 6.899 0 4.117-2.595 7.431-6.199 7.431-1.211 0-2.348-.63-2.738-1.373 0 0-.599 2.282-.744 2.84-.282 1.084-1.064 2.456-1.549 3.235C9.584 23.815 10.77 24 12 24c6.627 0 12-5.373 12-12S18.627 0 12 0 0 5.373 0 12';

  var play = 'M20.62 9.48L6.63.48C4.63-.8 2 .63 2 3v18c0 2.37 2.63 3.8 4.63 2.52l13.99-9c1.84-1.18 1.84-3.86 0-5.04';

  var questionMark = 'M14.34 21.2c0 1.57-1.19 2.8-2.78 2.8-1.58 0-2.77-1.23-2.77-2.8 0-1.57 1.19-2.8 2.77-2.8 1.59 0 2.78 1.23 2.78 2.8m-2.53-10.88c1.41-1.23 3.3-2.05 3.3-3.87 0-1.45-1.24-2.36-2.95-2.36-2.12 0-3.52 1.48-3.55 3.43H3.75C3.88 3.3 6.96 0 12.34 0c4.86 0 7.91 2.52 7.91 6.32 0 2.36-1.09 3.81-2.3 4.78-1.68 1.33-2.84 1.89-3.49 2.61-.5.57-.62 1.04-.65 1.95H9.45c0-2.64.65-3.9 2.36-5.34';

  var remove = 'M17.75 13.25H6.25a1.25 1.25 0 0 1 0-2.5h11.5a1.25 1.25 0 0 1 0 2.5M12 0C5.37 0 0 5.37 0 12s5.37 12 12 12 12-5.37 12-12S18.63 0 12 0';

  var report = 'M7.91 18.89A8.013 8.013 0 0 0 18.89 7.91L7.91 18.89zm-2.82-2.83L16.06 5.09A8.015 8.015 0 0 0 5.09 16.06zM12 24C5.37 24 0 18.63 0 12S5.37 0 12 0s12 5.37 12 12-5.37 12-12 12z';

  var rotate = 'M11.003 9.96c1.105 0 2 .899 2 2.006v9.028a2.004 2.004 0 0 1-2 2.006H2.001C.896 23 0 22.102 0 20.994v-9.028C0 10.86.896 9.96 2 9.96h9.003zm12.63 1.872c.489.49.489 1.283 0 1.773l-3.885 3.896-3.878-3.897a1.256 1.256 0 0 1 .002-1.773 1.248 1.248 0 0 1 1.768.002l.865.87V7.27a3.76 3.76 0 0 0-3.75-3.762H7.251c-.69 0-1.25-.562-1.25-1.254 0-.693.56-1.254 1.25-1.254h7.502c3.447 0 6.252 2.812 6.252 6.27v5.424l.86-.862c.489-.49 1.28-.49 1.768 0z';

  var search = 'M10 16c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6m13.12 2.88l-4.26-4.26A9.842 9.842 0 0 0 20 10c0-5.52-4.48-10-10-10S0 4.48 0 10s4.48 10 10 10c1.67 0 3.24-.41 4.62-1.14l4.26 4.26a3 3 0 0 0 4.24 0 3 3 0 0 0 0-4.24';

  var security = 'M21 9.587c0 6.06-3.721 11.246-9 13.413-5.279-2.167-9-7.353-9-13.413V3a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v6.587z';

  var send = 'M6 6l-6 6 7.67 2.56L21 3 9.44 16.34 12 24l6-6 6-18';

  var share = 'M21 14c1.1 0 2 .9 2 2v6c0 1.1-.9 2-2 2H3c-1.1 0-2-.9-2-2v-6c0-1.1.9-2 2-2s2 .9 2 2v4h14v-4c0-1.1.9-2 2-2zM8.82 8.84c-.78.78-2.05.79-2.83 0-.78-.78-.79-2.04-.01-2.82L11.99 0l6.02 6.01c.78.78.79 2.05.01 2.83-.78.78-2.05.79-2.83 0l-1.2-1.19v6.18a2 2 0 1 1-4 0V7.66L8.82 8.84z';

  var shoppingBag = 'M9.5 5a2.5 2.5 0 0 1 5 0v2h-5V5zM17 7V5c0-2.76-2.24-5-5-5S7 2.24 7 5v2H2v15c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V7h-5z';

  var smiley = 'M12.03 19.29h-.06c-3.48-.03-4.92-2.31-4.98-2.41a.896.896 0 0 1 .27-1.22.82.82 0 0 1 1.17.26c.06.08 1.06 1.58 3.57 1.59 2.51-.01 3.52-1.6 3.56-1.67.25-.41.78-.54 1.18-.28.39.26.52.8.28 1.21-.06.1-1.5 2.49-4.99 2.52zM18 9.43c0 .95-.77 1.71-1.71 1.71-.95 0-1.72-.76-1.72-1.71s.77-1.72 1.72-1.72c.94 0 1.71.77 1.71 1.72zm-12 0c0-.95.77-1.72 1.71-1.72.95 0 1.72.77 1.72 1.72s-.77 1.71-1.72 1.71c-.94 0-1.71-.76-1.71-1.71z';

  var smileyOutline = 'M12.03 19.29h-.06c-3.48-.03-4.92-2.31-4.98-2.41a.896.896 0 0 1 .27-1.22.82.82 0 0 1 1.17.26c.06.08 1.06 1.58 3.57 1.59 2.51-.01 3.52-1.6 3.56-1.67.25-.41.78-.54 1.18-.28.39.26.52.8.28 1.21-.06.1-1.5 2.49-4.99 2.52zM18 9.43c0 .95-.77 1.71-1.71 1.71-.95 0-1.72-.76-1.72-1.71s.77-1.72 1.72-1.72c.94 0 1.71.77 1.71 1.72zm-12 0c0-.95.77-1.72 1.71-1.72.95 0 1.72.77 1.72 1.72s-.77 1.71-1.72 1.71c-.94 0-1.71-.76-1.71-1.71zM12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.6 0 12 0zm0 22.2C6.45 22.2 1.8 17.7 1.8 12 1.8 6.3 6.3 1.8 12 1.8c5.7 0 10.2 4.5 10.2 10.2 0 5.7-4.65 10.2-10.2 10.2z';

  var sound = 'M20.48 3.51A11.92 11.92 0 0 1 24 12c0 3.2-1.25 6.22-3.51 8.48-.25.25-.57.37-.89.37-.32 0-.64-.12-.88-.37-.49-.48-.49-1.27 0-1.76A9.465 9.465 0 0 0 21.5 12c0-2.54-.99-4.93-2.79-6.72-.48-.49-.48-1.28 0-1.77a1.25 1.25 0 0 1 1.77 0zM5 7.94v.02L12 1v22l-7-6.09v.03H2c-1.1 0-2-.9-2-2v-5a2 2 0 0 1 2-2h3zm11.95-.89A6.96 6.96 0 0 1 19 12c0 1.87-.73 3.63-2.05 4.95-.24.24-.56.36-.88.36-.32 0-.64-.12-.89-.36a1.25 1.25 0 0 1 0-1.77c.85-.85 1.32-1.98 1.32-3.18 0-1.2-.47-2.33-1.32-3.18a1.25 1.25 0 0 1 0-1.77 1.25 1.25 0 0 1 1.77 0z';

  var speech = 'M12 0C5.85 0 .75 4.94.75 11.08c0 2.7.9 5.24 2.7 7.19L2.1 23.51c-.15.3.3.6.6.45l5.25-2.55c1.35.45 2.7.75 4.05.75 6.15 0 11.25-4.94 11.25-11.08S18.15 0 12 0';

  var speechEllipsis = 'M18 12.5a1.5 1.5 0 1 1 .001-3.001A1.5 1.5 0 0 1 18 12.5m-6 0a1.5 1.5 0 1 1 .001-3.001A1.5 1.5 0 0 1 12 12.5m-6 0a1.5 1.5 0 1 1 .001-3.001A1.5 1.5 0 0 1 6 12.5M12 0C5.925 0 1 4.925 1 11c0 2.653.94 5.086 2.504 6.986L2 24l5.336-3.049A10.93 10.93 0 0 0 12 22c6.075 0 11-4.925 11-11S18.075 0 12 0';

  var star = 'M22.46 10.736l-5.237 4.044 1.964 6.424c.393 1.285-1.079 2.323-2.136 1.506L12 18.81l-5.051 3.9c-1.057.817-2.529-.221-2.135-1.506l1.963-6.424-5.237-4.044c-1.039-.802-.477-2.48.83-2.48h6.402l1.921-6.282c.398-1.3 2.216-1.3 2.614 0l1.921 6.283h6.402c1.308 0 1.869 1.677.83 2.479';

  var switchAccount = 'M7.184 22.56a1.5 1.5 0 0 0-.002-2.121l-1.442-1.44 8.76-.003a1.5 1.5 0 1 0-.001-3l-8.755.003 1.437-1.44a1.5 1.5 0 1 0-2.123-2.118L0 17.508l5.063 5.054a1.5 1.5 0 0 0 2.121-.002m9.637-10.998a1.501 1.501 0 0 1-.002-2.121L18.256 8 9.5 8.005a1.5 1.5 0 0 1-.001-3L18.26 5l-1.442-1.44a1.494 1.494 0 0 1-.441-1.061 1.498 1.498 0 0 1 2.56-1.061L24 6.493l-5.058 5.067a1.5 1.5 0 0 1-2.121.002';

  var tag = 'M6 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2m7.36-6.2l8.84 8.84a2.71 2.71 0 0 1 0 3.85l-7.71 7.71a2.71 2.71 0 0 1-3.85 0L1.8 13.36c-.51-.51-.8-1.2-.8-1.92V3.73C1 2.22 2.22 1 3.73 1h7.71c.72 0 1.41.29 1.92.8';

  var terms = 'M21 18H11a2 2 0 1 0 0 4h10a2 2 0 1 0 0-4M4 17a3 3 0 1 0 0 6 3 3 0 0 0 0-6m17-7H11a2 2 0 1 0 0 4h10a2 2 0 1 0 0-4M4 9a3 3 0 1 0 0 6 3 3 0 0 0 0-6m7-3h10a2 2 0 1 0 0-4H11a2 2 0 1 0 0 4M7 4a3 3 0 1 1-6 0 3 3 0 0 1 6 0';

  var textAlignCenter = 'M0 4.5h24v-3H0v3zm3 6h18V7.499H3V10.5zm-3 6h24v-3H0v3zm3 6h18v-3H3v3z';

  var textAlignLeft = 'M0 4.5h24v-3H0v3zm0 6h18V7.499H0V10.5zm0 6h24v-3H0v3zm0 6h18v-3H0v3z';

  var textAlignRight = 'M24 4.5H0v-3h24v3zm0 6H6v-3h18v3zm0 6H0v-3h24v3zm0 6H6v-3h18v3z';

  var textExtraSmall = 'M2.25 11.5a1.25 1.25 0 0 1 0-2.5h19.5a1.25 1.25 0 0 1 0 2.5H2.25zm19.5 9a1.25 1.25 0 0 1 0 2.5H2.25a1.25 1.25 0 0 1 0-2.5h19.5zM12 13c.218 0 .416.127.504.324l2.199 4.91A.545.545 0 0 1 14.2 19a.55.55 0 0 1-.504-.325l-.344-.766h-2.703l-.344.766a.553.553 0 0 1-.727.278.543.543 0 0 1-.28-.72l2.198-4.909A.553.553 0 0 1 12 13zm-.863 3.818h1.727L12 14.891l-.863 1.927z';

  var textLarge = 'M2.25 3.5a1.25 1.25 0 0 1 0-2.5h19.5a1.25 1.25 0 0 1 0 2.5H2.25zm19.5 17a1.25 1.25 0 0 1 0 2.5H2.25a1.25 1.25 0 0 1 0-2.5h19.5zM12 5c.508 0 .968.297 1.174.757l5.131 11.454a1.266 1.266 0 0 1-.654 1.678 1.288 1.288 0 0 1-1.696-.647l-.8-1.788h-6.31l-.8 1.788a1.29 1.29 0 0 1-1.697.647 1.266 1.266 0 0 1-.654-1.678l5.13-11.454C11.03 5.297 11.491 5 12 5zm-2.014 8.908h4.027L12 9.413l-2.014 4.495z';

  var textMedium = 'M2.25 6.5a1.25 1.25 0 0 1 0-2.5h19.5a1.25 1.25 0 0 1 0 2.5H2.25zm19.5 14a1.25 1.25 0 0 1 0 2.5H2.25a1.25 1.25 0 0 1 0-2.5h19.5zM12 8c.399 0 .762.232.923.595l4.032 9a.996.996 0 0 1-.515 1.319 1.013 1.013 0 0 1-1.333-.51L14.479 17H9.522l-.629 1.404a1.014 1.014 0 0 1-1.333.51.996.996 0 0 1-.515-1.319l4.031-9A1.01 1.01 0 0 1 12 8zm-1.582 7h3.164L12 11.467 10.418 15z';

  var textSmall = 'M2.25 9.5a1.25 1.25 0 0 1 0-2.5h19.5a1.25 1.25 0 0 1 0 2.5H2.25zm19.5 11a1.25 1.25 0 0 1 0 2.5H2.25a1.25 1.25 0 0 1 0-2.5h19.5zM12 11c.29 0 .554.169.671.433l2.932 6.545a.724.724 0 0 1-.67 1.022.735.735 0 0 1-.673-.432l-.458-1.023h-3.604l-.458 1.023a.74.74 0 0 1-.97.37.725.725 0 0 1-.374-.96l2.932-6.545A.734.734 0 0 1 12 11zm-1.15 5.09h2.301l-1.15-2.568-1.152 2.569z';

  var twitter = 'M7.548 21.5c9.056 0 14.01-7.31 14.01-13.65 0-.208 0-.414-.015-.62A9.88 9.88 0 0 0 24 4.747c-.899.388-1.852.642-2.828.754a4.838 4.838 0 0 0 2.165-2.653c-.967.559-2.024.953-3.127 1.164-1.526-1.58-3.952-1.968-5.916-.944-1.964 1.025-2.98 3.205-2.475 5.32C7.859 8.194 4.17 6.372 1.67 3.375.363 5.567 1.031 8.372 3.195 9.78a4.986 4.986 0 0 1-2.235-.6v.06c0 2.284 1.653 4.25 3.95 4.703a5.042 5.042 0 0 1-2.223.082c.645 1.954 2.494 3.293 4.6 3.332A10.048 10.048 0 0 1 0 19.345a14.21 14.21 0 0 0 7.548 2.151';

  var viewTypeDefault = 'M13.5 24V13.5H24V24H13.5zM0 10.5V0h10.5v10.5H0zm13.5 0V0H24v10.5H13.5zM0 24V13.5h10.5V24H0z';

  var viewTypeDense = 'M17.999 24H24v-6h-6.001v6zm-9-17.999V0h6v6.001H9zM0 6.001V0h6v6.001H0zm17.999 0V0H24v6.001h-6.001zM0 15.001V9h6v6H0zm9 0V9h6v6H9zm8.999 0V9H24v6h-6.001zM0 24v-6h6v6H0zm9 0v-6h6v6H9z';

  var viewTypeList = 'M0 13.502v-3h24v3H0zm0-7.5V3h24v3.002H0zm0 15v-3h24v3H0z';

  var icons = {
    add: add,
    'add-circle': addCircle,
    'add-pin': addPin,
    'align-bottom-center': alignBottomCenter,
    'align-bottom-left': alignBottomLeft,
    'align-bottom-right': alignBottomRight,
    'align-bottom': alignBottom,
    'align-middle': alignMiddle,
    'align-top-center': alignTopCenter,
    'align-top-left': alignTopLeft,
    'align-top-right': alignTopRight,
    'align-top': alignTop,
    'angled-pin': angledPin,
    apps: apps,
    'arrow-back': arrowBack,
    'arrow-circle-down': arrowCircleDown,
    'arrow-circle-forward': arrowCircleForward,
    'arrow-down': arrowDown,
    'arrow-forward': arrowForward,
    'arrow-up': arrowUp,
    'arrow-up-right': arrowUpRight,
    bell: bell,
    camera: camera,
    'camera-roll': cameraRoll,
    cancel: cancel,
    'canonical-pin': canonicalPin,
    'color-picker': colorPicker,
    check: check,
    'check-circle': checkCircle,
    'circle-outline': circleOutline,
    clear: clear,
    clock: clock,
    cog: cog,
    compass: compass,
    compose: compose,
    crop: crop,
    dash: dash,
    download: download,
    edit: edit,
    ellipsis: ellipsis,
    'ellipsis-circle-outline': ellipsisCircleOutline,
    envelope: envelope,
    eye: eye,
    facebook: facebook,
    'face-happy': faceHappy,
    'face-sad': faceSad,
    'face-smiley': faceSmiley,
    'fill-opaque': fillOpaque,
    'fill-transparent': fillTransparent,
    filter: filter,
    flag: flag,
    flashlight: flashlight,
    flipHorizontal: flipHorizontal,
    flipVertical: flipVertical,
    gif: gif,
    globe: globe,
    'globe-checked': globeChecked,
    gmail: gmail,
    'google-plus': googlePlus,
    'graph-bar': graphBar,
    handle: handle,
    'hand-pointing': handPointing,
    heart: heart,
    'heart-broken': heartBroken,
    impressum: impressum,
    knoop: knoop,
    lightbulb: lightbulb,
    link: link,
    location: location,
    lock: lock,
    'logo-large': logoLarge,
    'logo-small': logoSmall,
    logout: logout,
    'margins-large': marginsLarge,
    'margins-medium': marginsMedium,
    'margins-small': marginsSmall,
    maximize: maximize,
    megaphone: megaphone,
    menu: menu,
    minimize: minimize,
    move: move,
    mute: mute,
    'overlay-text': overlayText,
    pause: pause,
    people: people,
    person: person,
    'person-add': personAdd,
    pin: pin,
    'pin-hide': pinHide,
    pinterest: pinterest,
    play: play,
    'question-mark': questionMark,
    remove: remove,
    report: report,
    rotate: rotate,
    search: search,
    security: security,
    'shopping-bag': shoppingBag,
    smiley: smiley,
    'smiley-outline': smileyOutline,
    send: send,
    share: share,
    sound: sound,
    speech: speech,
    'speech-ellipsis': speechEllipsis,
    star: star,
    'switch-account': switchAccount,
    tag: tag,
    terms: terms,
    'text-align-left': textAlignLeft,
    'text-align-center': textAlignCenter,
    'text-align-right': textAlignRight,
    'text-extra-small': textExtraSmall,
    'text-large': textLarge,
    'text-medium': textMedium,
    'text-small': textSmall,
    twitter: twitter,
    'view-type-default': viewTypeDefault,
    'view-type-dense': viewTypeDense,
    'view-type-list': viewTypeList
  };

  var IconNames = Object.keys(icons);

  function Icon(props) {
    var accessibilityLabel = props.accessibilityLabel,
        _props$color = props.color,
        color = _props$color === undefined ? 'gray' : _props$color,
        icon = props.icon,
        inline = props.inline,
        _props$size = props.size,
        size = _props$size === undefined ? 16 : _props$size,
        dangerouslySetSvgPath = props.dangerouslySetSvgPath;


    var cs = classnames(styles$1.icon, colors[color], defineProperty({}, styles$1.iconBlock, !inline));

    var path = icon && icons[icon] ||
    /* eslint-disable-next-line no-underscore-dangle */
    dangerouslySetSvgPath && dangerouslySetSvgPath.__path || undefined;

    var ariaHidden = accessibilityLabel === '' ? true : null;

    return React.createElement(
      'svg',
      {
        className: cs,
        height: size,
        width: size,
        viewBox: '0 0 24 24',
        'aria-hidden': ariaHidden,
        'aria-label': accessibilityLabel,
        role: 'img'
      },
      React.createElement(
        'title',
        null,
        accessibilityLabel
      ),
      React.createElement('path', { d: path })
    );
  }

  Icon.icons = IconNames;

  Icon.propTypes = {
    accessibilityLabel: PropTypes.string.isRequired,
    color: PropTypes.oneOf(['blue', 'darkGray', 'eggplant', 'gray', 'green', 'lightGray', 'maroon', 'midnight', 'navy', 'olive', 'orange', 'orchid', 'pine', 'purple', 'red', 'watermelon', 'white']),
    dangerouslySetSvgPath: PropTypes.shape({
      __path: PropTypes.string
    }),
    icon: PropTypes.oneOf(IconNames),
    inline: PropTypes.bool,
    size: PropTypes.oneOfType([PropTypes.number, PropTypes.string])
  };

  var styles$2 = { "img": "_u3 _45 _y8 _4h", "scaled-img": "_u4 _4f", "contain": "_u5 _u4 _4f", "cover": "_u6 _u4 _4f" };

  var shouldScaleImage = function shouldScaleImage(fit) {
    return fit === 'cover' || fit === 'contain';
  };

  var Image = function (_React$PureComponent) {
    inherits(Image, _React$PureComponent);

    function Image() {
      var _ref;

      var _temp, _this, _ret;

      classCallCheck(this, Image);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Image.__proto__ || Object.getPrototypeOf(Image)).call.apply(_ref, [this].concat(args))), _this), _this.handleLoad = function () {
        if (_this.props.onLoad) {
          _this.props.onLoad();
        }
      }, _this.handleError = function () {
        if (_this.props.onError) {
          _this.props.onError();
        }
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(Image, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        if (shouldScaleImage(this.props.fit)) {
          this.loadImage();
        }
      }
    }, {
      key: 'componentDidUpdate',
      value: function componentDidUpdate(prevProps) {
        var _props = this.props,
            fit = _props.fit,
            src = _props.src;

        if (shouldScaleImage(fit) && prevProps.src !== src) {
          this.loadImage();
        }
      }
    }, {
      key: 'loadImage',
      value: function loadImage() {
        if (typeof window !== 'undefined') {
          var image = new window.Image();
          image.onload = this.handleLoad;
          image.onerror = this.handleError;
          image.src = this.props.src;
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var _props2 = this.props,
            alt = _props2.alt,
            color = _props2.color,
            children = _props2.children,
            fit = _props2.fit,
            naturalHeight = _props2.naturalHeight,
            naturalWidth = _props2.naturalWidth,
            sizes = _props2.sizes,
            src = _props2.src,
            srcSet = _props2.srcSet;


        var isScaledImage = shouldScaleImage(fit);
        var childContent = children ? React.createElement(
          Box,
          { position: 'absolute', top: true, left: true, bottom: true, right: true, overflow: 'hidden' },
          children
        ) : null;

        return isScaledImage ? React.createElement(
          'div',
          {
            'aria-label': alt,
            className: styles$2[fit],
            style: {
              backgroundColor: color,
              backgroundImage: 'url(\'' + src + '\')'
            },
            role: 'img'
          },
          childContent
        ) : React.createElement(
          Box,
          {
            position: 'relative',
            dangerouslySetInlineStyle: {
              __style: {
                backgroundColor: color,
                paddingBottom: naturalHeight / naturalWidth * 100 + '%'
              }
            }
          },
          React.createElement('img', {
            alt: alt,
            className: styles$2.img,
            onError: this.handleError,
            onLoad: this.handleLoad,
            sizes: sizes,
            src: src,
            srcSet: srcSet
          }),
          childContent
        );
      }
    }]);
    return Image;
  }(React.PureComponent);

  Image.propTypes = {
    alt: PropTypes.string.isRequired,
    children: PropTypes.node,
    color: PropTypes.string,
    fit: PropTypes.oneOf(['contain', 'cover', 'none']),
    naturalHeight: PropTypes.number.isRequired,
    naturalWidth: PropTypes.number.isRequired,
    onError: PropTypes.func,
    onLoad: PropTypes.func,
    sizes: PropTypes.string,
    src: PropTypes.string.isRequired,
    srcSet: PropTypes.string
  };
  Image.defaultProps = {
    color: 'transparent',
    fit: 'none'
  };

  var styles$3 = { "Mask": "_ub _49 _4f", "square": "_uc _2v", "rounded": "_ud _2y", "circle": "_ue _2w", "wash": "_uf _4h _4l _4m _4k _4j" };

  function Mask(props) {
    var children = props.children,
        _props$shape = props.shape,
        shape = _props$shape === undefined ? 'square' : _props$shape,
        width = props.width,
        height = props.height,
        _props$wash = props.wash,
        wash = _props$wash === undefined ? false : _props$wash;

    return React.createElement(
      'div',
      { className: classnames(styles$3.Mask, styles$3[shape]), style: { width: width, height: height } },
      children,
      wash && React.createElement('div', { className: styles$3.wash })
    );
  }

  Mask.propTypes = {
    children: PropTypes.node,
    height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    shape: PropTypes.oneOf(['circle', 'rounded', 'square']),
    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    wash: PropTypes.bool
  };

  var typography = { "antialiased": "_0", "sansSerif": "_1", "letterSpacing": "_2", "leadingShort": "_3", "leadingTall": "_4", "fontWeightNormal": "_5", "fontWeightBold": "_6", "fontStyleRegular": "_7", "fontStyleItalic": "_8", "underline": "_9", "noUnderline": "_a", "breakWord": "_b", "truncate": "_c", "alignLeft": "_d", "alignRight": "_e", "alignCenter": "_f", "textJustify": "_g" };

  var Square = function Square(props) {
    return React.createElement(
      Box,
      _extends({}, props, { position: 'relative' }),
      React.createElement(Box, {
        dangerouslySetInlineStyle: { __style: { paddingBottom: '100%' } },
        position: 'relative'
      }),
      React.createElement(
        Box,
        { position: 'absolute', top: true, left: true, bottom: true, right: true },
        props.children
      )
    );
  };

  var DefaultAvatar = function DefaultAvatar(_ref) {
    var name = _ref.name;

    var firstInitial = name ? [].concat(toConsumableArray(name))[0].toUpperCase() : '';
    return React.createElement(
      Square,
      { color: 'gray', shape: 'circle' },
      firstInitial && React.createElement(
        'svg',
        {
          width: '100%',
          viewBox: '-50 -50 100 100',
          version: '1.1',
          preserveAspectRatio: 'xMidYMid meet',
          xmlns: 'http://www.w3.org/2000/svg'
        },
        React.createElement(
          'title',
          null,
          name
        ),
        React.createElement(
          'text',
          {
            fontSize: '50px',
            fill: '#fff',
            dominantBaseline: 'central',
            textAnchor: 'middle',
            className: [typography.antialiased, typography.sansSerif, typography.leadingSmall, typography.fontWeightBold].join(' ')
          },
          firstInitial
        )
      )
    );
  };

  var sizes = {
    sm: 24,
    md: 40,
    lg: 72
  };

  var Avatar = function (_React$PureComponent) {
    inherits(Avatar, _React$PureComponent);

    function Avatar() {
      var _ref2;

      var _temp, _this, _ret;

      classCallCheck(this, Avatar);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref2 = Avatar.__proto__ || Object.getPrototypeOf(Avatar)).call.apply(_ref2, [this].concat(args))), _this), _this.state = {
        isImageLoaded: true
      }, _this.handleImageError = function () {
        return _this.setState({ isImageLoaded: false });
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(Avatar, [{
      key: 'render',
      value: function render() {
        var _props = this.props,
            name = _props.name,
            outline = _props.outline,
            size = _props.size,
            src = _props.src,
            verified = _props.verified;
        var isImageLoaded = this.state.isImageLoaded;

        var width = size ? sizes[size] : '100%';
        var height = size ? sizes[size] : '';
        return React.createElement(
          Box,
          _extends({
            color: 'white'
          }, outline ? {
            dangerouslySetInlineStyle: {
              __style: {
                boxShadow: '0 0 0 2px #fff'
              }
            }
          } : {}, {
            width: width,
            height: height,
            position: 'relative',
            shape: 'circle'
          }),
          src && isImageLoaded ? React.createElement(
            Mask,
            { shape: 'circle', wash: true },
            React.createElement(Image, {
              alt: name,
              color: '#EFEFEF',
              naturalHeight: 1,
              naturalWidth: 1,
              src: src,
              onError: this.handleImageError
            })
          ) : React.createElement(DefaultAvatar, { name: name }),
          verified && React.createElement(
            Box,
            {
              position: 'absolute',
              width: '20%',
              height: '20%',
              minWidth: 8,
              minHeight: 8,
              dangerouslySetInlineStyle: {
                __style: {
                  bottom: '4%',
                  right: '4%'
                }
              }
            },
            React.createElement(
              Box,
              {
                color: 'white',
                width: '100%',
                height: '100%',
                shape: 'circle',
                dangerouslySetInlineStyle: {
                  __style: {
                    boxShadow: '0 0 0 2px #fff'
                  }
                }
              },
              React.createElement(Icon, {
                color: 'red',
                icon: 'check-circle',
                accessibilityLabel: '',
                size: '100%'
              })
            )
          )
        );
      }
    }]);
    return Avatar;
  }(React.PureComponent);

  Avatar.propTypes = {
    name: PropTypes.string.isRequired,
    outline: PropTypes.bool,
    src: PropTypes.string,
    size: PropTypes.oneOf(['sm', 'md', 'lg']),
    verified: PropTypes.bool
  };

  var styles$4 = { "button": "_r3 _4q", "solid": "_r4 _33", "enabled": "_r5 _xu _z9", "sm": "_r6 _4n", "md": "_r7 _4o", "lg": "_r8 _4p", "block": "_r9 _y8 _45", "inline": "_ra _47", "disabled": "_rb _39", "gray": "_rc _39", "red": "_rd _35", "blue": "_re _3l", "transparent": "_rf _42", "white": "_rg _37" };

  var styles$5 = { "Text": "_w7 _0 _1 _2", "fontSize1": "_w8", "fontSize2": "_w9", "fontSize3": "_wa", "fontSize4": "_wb", "fontSize5": "_wc", "smFontSize1": "_wd", "smFontSize2": "_we", "smFontSize3": "_wf", "smFontSize4": "_wg", "smFontSize5": "_wh", "mdFontSize1": "_wi", "mdFontSize2": "_wj", "mdFontSize3": "_wk", "mdFontSize4": "_wl", "mdFontSize5": "_wm", "lgFontSize1": "_wn", "lgFontSize2": "_wo", "lgFontSize3": "_wp", "lgFontSize4": "_wq", "lgFontSize5": "_wr" };

  var SIZE_SCALE = {
    xs: 1,
    sm: 2,
    md: 3,
    lg: 4,
    xl: 5
  };

  function Text(_ref) {
    var _ref$align = _ref.align,
        align = _ref$align === undefined ? 'left' : _ref$align,
        _ref$bold = _ref.bold,
        bold = _ref$bold === undefined ? false : _ref$bold,
        children = _ref.children,
        _ref$color = _ref.color,
        color = _ref$color === undefined ? 'darkGray' : _ref$color,
        _ref$inline = _ref.inline,
        inline = _ref$inline === undefined ? false : _ref$inline,
        _ref$italic = _ref.italic,
        italic = _ref$italic === undefined ? false : _ref$italic,
        _ref$overflow = _ref.overflow,
        overflow = _ref$overflow === undefined ? 'breakWord' : _ref$overflow,
        _ref$size = _ref.size,
        size = _ref$size === undefined ? 'md' : _ref$size,
        smSize = _ref.smSize,
        mdSize = _ref.mdSize,
        lgSize = _ref.lgSize,
        leading = _ref.leading,
        _ref$truncate = _ref.truncate,
        truncate = _ref$truncate === undefined ? false : _ref$truncate,
        _ref$__dangerouslyInc = _ref.__dangerouslyIncreaseLineHeight,
        __dangerouslyIncreaseLineHeight = _ref$__dangerouslyInc === undefined ? false : _ref$__dangerouslyInc;

    var scale = SIZE_SCALE[size];
    var smScale = SIZE_SCALE[smSize];
    var mdScale = SIZE_SCALE[mdSize];
    var lgScale = SIZE_SCALE[lgSize];

    var cs = classnames(styles$5.Text, styles$5['fontSize' + scale], lgSize && styles$5['lgFontSize' + lgScale], mdSize && styles$5['mdFontSize' + mdScale], smSize && styles$5['smFontSize' + smScale], color === 'blue' && colors.blue, color === 'darkGray' && colors.darkGray, color === 'eggplant' && colors.eggplant, color === 'gray' && colors.gray, color === 'green' && colors.green, color === 'lightGray' && colors.lightGray, color === 'maroon' && colors.maroon, color === 'midnight' && colors.midnight, color === 'navy' && colors.navy, color === 'olive' && colors.olive, color === 'orange' && colors.orange, color === 'orchid' && colors.orchid, color === 'pine' && colors.pine, color === 'purple' && colors.purple, color === 'red' && colors.red, color === 'watermelon' && colors.watermelon, color === 'white' && colors.white, leading === 'short' && typography.leadingShort, (leading === 'tall' || __dangerouslyIncreaseLineHeight) && typography.leadingTall, align === 'center' && typography.alignCenter, align === 'justify' && typography.alignJustify, align === 'left' && typography.alignLeft, align === 'right' && typography.alignRight, overflow === 'breakWord' && typography.breakWord, italic && typography.fontStyleItalic, !italic && typography.fontStyleNormal, bold && typography.fontWeightBold, !bold && typography.fontWeightNormal, truncate && typography.truncate);
    var Tag = inline ? 'span' : 'div';

    return React.createElement(
      Tag,
      _extends({
        className: cs
      }, truncate && typeof children === 'string' ? { title: children } : null),
      children
    );
  }

  Text.propTypes = {
    __dangerouslyIncreaseLineHeight: PropTypes.bool,
    align: PropTypes.oneOf(['left', 'right', 'center', 'justify']),
    bold: PropTypes.bool,
    children: PropTypes.node,
    color: PropTypes.oneOf(['green', 'pine', 'olive', 'blue', 'navy', 'midnight', 'purple', 'orchid', 'eggplant', 'maroon', 'watermelon', 'orange', 'darkGray', 'gray', 'lightGray', 'red', 'white']),
    inline: PropTypes.bool,
    italic: PropTypes.bool,
    leading: PropTypes.oneOf(['tall', 'short']),
    lgSize: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
    mdSize: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
    overflow: PropTypes.oneOf(['normal', 'breakWord']),
    size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
    smSize: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
    truncate: PropTypes.bool
  };

  function Button(props) {
    var _classnames;

    var accessibilityExpanded = props.accessibilityExpanded,
        accessibilityHaspopup = props.accessibilityHaspopup,
        accessibilityLabel = props.accessibilityLabel,
        _props$color = props.color,
        color = _props$color === undefined ? 'gray' : _props$color,
        _props$disabled = props.disabled,
        disabled = _props$disabled === undefined ? false : _props$disabled,
        _props$inline = props.inline,
        inline = _props$inline === undefined ? false : _props$inline,
        name = props.name,
        onClick = props.onClick,
        _props$size = props.size,
        size = _props$size === undefined ? 'md' : _props$size,
        text = props.text,
        _props$type = props.type,
        type = _props$type === undefined ? 'button' : _props$type;


    var textColor = {
      blue: 'white',
      gray: 'darkGray',
      red: 'white',
      transparent: 'white',
      white: 'darkGray'
    };

    var classes = classnames(styles$4.button, (_classnames = {}, defineProperty(_classnames, styles$4.sm, size === 'sm'), defineProperty(_classnames, styles$4.md, size === 'md'), defineProperty(_classnames, styles$4.lg, size === 'lg'), defineProperty(_classnames, styles$4.solid, color !== 'transparent'), defineProperty(_classnames, styles$4[color], !disabled), defineProperty(_classnames, styles$4.disabled, disabled), defineProperty(_classnames, styles$4.enabled, !disabled), defineProperty(_classnames, styles$4.inline, inline), defineProperty(_classnames, styles$4.block, !inline), _classnames));

    /* eslint-disable react/button-has-type */
    return React.createElement(
      'button',
      {
        'aria-expanded': accessibilityExpanded,
        'aria-haspopup': accessibilityHaspopup,
        'aria-label': accessibilityLabel,
        className: classes,
        disabled: disabled,
        name: name,
        onClick: function (_onClick) {
          function onClick(_x) {
            return _onClick.apply(this, arguments);
          }

          onClick.toString = function () {
            return _onClick.toString();
          };

          return onClick;
        }(function (event) {
          return onClick && onClick({ event: event });
        }),
        type: type
      },
      React.createElement(
        Text,
        {
          align: 'center',
          bold: true,
          color: disabled ? 'gray' : textColor[color],
          overflow: 'normal',
          size: size
        },
        text
      )
    );
    /* eslint-enable react/button-has-type */
  }

  Button.propTypes = {
    accessibilityExpanded: PropTypes.bool,
    accessibilityHaspopup: PropTypes.bool,
    accessibilityLabel: PropTypes.string,
    color: PropTypes.oneOf(['blue', 'gray', 'red', 'transparent', 'white']),
    disabled: PropTypes.bool,
    inline: PropTypes.bool,
    name: PropTypes.string,
    onClick: PropTypes.func,
    size: PropTypes.oneOf(['sm', 'md', 'lg']),
    text: PropTypes.string.isRequired,
    type: PropTypes.oneOf(['button', 'submit'])
  };

  var styles$6 = { "card": "_rt _4h _2y _4j _4k _4l _4m _4r", "hover": "_ru", "animateIn": "_rv" };

  var Card = function (_React$Component) {
    inherits(Card, _React$Component);

    function Card() {
      var _ref;

      var _temp, _this, _ret;

      classCallCheck(this, Card);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Card.__proto__ || Object.getPrototypeOf(Card)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        hovered: false
      }, _this.handleMouseEnter = function (event) {
        var onMouseEnter = _this.props.onMouseEnter;

        _this.setState({ hovered: true }, onMouseEnter && function () {
          return onMouseEnter({ event: event });
        });
      }, _this.handleMouseLeave = function (event) {
        var onMouseLeave = _this.props.onMouseLeave;

        _this.setState({ hovered: false }, onMouseLeave && function () {
          return onMouseLeave({ event: event });
        });
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(Card, [{
      key: 'render',
      value: function render() {
        var _props = this.props,
            active = _props.active,
            children = _props.children,
            image = _props.image;
        var hovered = this.state.hovered;


        var classes = classnames(styles$6.card, defineProperty({}, styles$6.hover, active || active == null && hovered));

        return React.createElement(
          Box,
          {
            onMouseEnter: this.handleMouseEnter,
            onMouseLeave: this.handleMouseLeave,
            position: 'relative'
          },
          image && React.createElement(
            Box,
            { marginBottom: 1 },
            image
          ),
          React.createElement(
            Box,
            null,
            children
          ),
          React.createElement('div', { className: classes })
        );
      }
    }]);
    return Card;
  }(React.Component);

  Card.propTypes = {
    active: PropTypes.bool,
    children: PropTypes.node,
    image: PropTypes.node,
    onMouseEnter: PropTypes.func,
    onMouseLeave: PropTypes.func
  };

  var styles$7 = { "border": "_rh", "borderError": "_ri", "borderDark": "_rj", "check": "_rk _45 _4q _4s _50 _5a", "checkEnabled": "_rl _z9", "checkFocused": "_rm _xv", "checkSm": "_rn", "checkMd": "_ro", "input": "_rp _4h _od", "inputEnabled": "_rq _z9", "inputSm": "_rr", "inputMd": "_rs" };

  var Checkbox = function (_React$Component) {
    inherits(Checkbox, _React$Component);

    function Checkbox() {
      var _ref;

      var _temp, _this, _ret;

      classCallCheck(this, Checkbox);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Checkbox.__proto__ || Object.getPrototypeOf(Checkbox)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        focused: false
      }, _this.handleChange = function (event) {
        var checked = event.target.checked;

        _this.props.onChange({ event: event, checked: checked });
      }, _this.handleClick = function (event) {
        var onClick = _this.props.onClick;

        if (onClick) {
          var _checked = event.currentTarget.checked;

          onClick({ event: event, checked: _checked });
        }
      }, _this.handleBlur = function () {
        return _this.setState({ focused: false });
      }, _this.handleFocus = function () {
        return _this.setState({ focused: true });
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(Checkbox, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        if (this.props.indeterminate) {
          this.setIndeterminate(!!this.props.indeterminate);
        }
      }
    }, {
      key: 'componentDidUpdate',
      value: function componentDidUpdate(previousProps) {
        if (previousProps.indeterminate !== this.props.indeterminate) {
          this.setIndeterminate(!!this.props.indeterminate);
        }
      }
    }, {
      key: 'setIndeterminate',
      value: function setIndeterminate(indeterminate) {
        if (this.input) {
          this.input.indeterminate = indeterminate;
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var _classnames,
            _this2 = this,
            _classnames2;

        var _props = this.props,
            checked = _props.checked,
            disabled = _props.disabled,
            hasError = _props.hasError,
            id = _props.id,
            indeterminate = _props.indeterminate,
            name = _props.name,
            size = _props.size;


        var borderStyle = styles$7.border;
        if (!disabled && (checked || indeterminate)) {
          borderStyle = styles$7.borderDark;
        } else if (hasError) {
          borderStyle = styles$7.borderError;
        }

        return React.createElement(
          Box,
          { position: 'relative' },
          React.createElement('input', {
            checked: checked,
            className: classnames(styles$7.input, (_classnames = {}, defineProperty(_classnames, styles$7.inputEnabled, !disabled), defineProperty(_classnames, styles$7.indeterminate, indeterminate), defineProperty(_classnames, styles$7.inputSm, size === 'sm'), defineProperty(_classnames, styles$7.inputMd, size === 'md'), _classnames)),
            disabled: disabled,
            id: id,
            name: name,
            onBlur: this.handleBlur,
            onChange: this.handleChange,
            onClick: this.handleClick,
            onFocus: this.handleFocus,
            ref: function ref(el) {
              _this2.input = el;
            },
            type: 'checkbox'
          }),
          React.createElement(
            'div',
            {
              className: classnames(borderStyle, styles$7.check,
              // eslint-disable-next-line no-nested-ternary
              disabled ? checked || indeterminate ? colors.grayBg : colors.lightGrayBg : checked || indeterminate ? colors.darkGrayBg : colors.whiteBg, (_classnames2 = {}, defineProperty(_classnames2, styles$7.checkEnabled, !disabled), defineProperty(_classnames2, styles$7.checkFocused, this.state.focused), defineProperty(_classnames2, styles$7.checkMd, size === 'md'), defineProperty(_classnames2, styles$7.checkSm, size === 'sm'), _classnames2))
            },
            (checked || indeterminate) && React.createElement(Icon, {
              accessibilityLabel: '',
              color: 'white',
              icon: indeterminate ? 'dash' : 'check',
              size: size === 'sm' ? 8 : 12
            })
          )
        );
      }
    }]);
    return Checkbox;
  }(React.Component);

  Checkbox.propTypes = {
    checked: PropTypes.bool,
    disabled: PropTypes.bool,
    hasError: PropTypes.bool,
    id: PropTypes.string.isRequired,
    indeterminate: PropTypes.bool,
    name: PropTypes.string,
    onChange: PropTypes.func.isRequired,
    onClick: PropTypes.func,
    size: PropTypes.oneOf(['sm', 'md'])
  };
  Checkbox.defaultProps = {
    checked: false,
    disabled: false,
    hasError: false,
    indeterminate: false,
    size: 'md'
  };

  var Collection = function (_React$PureComponent) {
    inherits(Collection, _React$PureComponent);

    function Collection() {
      classCallCheck(this, Collection);
      return possibleConstructorReturn(this, (Collection.__proto__ || Object.getPrototypeOf(Collection)).apply(this, arguments));
    }

    createClass(Collection, [{
      key: 'render',
      value: function render() {
        var _props = this.props,
            Item = _props.Item,
            layout$$1 = _props.layout,
            _props$viewportTop = _props.viewportTop,
            viewportTop = _props$viewportTop === undefined ? 0 : _props$viewportTop,
            _props$viewportLeft = _props.viewportLeft,
            viewportLeft = _props$viewportLeft === undefined ? 0 : _props$viewportLeft;

        // Calculate the full dimensions of the item layer

        var width = Math.max.apply(Math, toConsumableArray(layout$$1.map(function (item) {
          return item.left + item.width;
        })));
        var height = Math.max.apply(Math, toConsumableArray(layout$$1.map(function (item) {
          return item.top + item.height;
        })));

        // Default the viewport to being the full width of the content layer
        var _props2 = this.props,
            _props2$viewportWidth = _props2.viewportWidth,
            viewportWidth = _props2$viewportWidth === undefined ? width : _props2$viewportWidth,
            _props2$viewportHeigh = _props2.viewportHeight,
            viewportHeight = _props2$viewportHeigh === undefined ? height : _props2$viewportHeigh;

        // Calculates which items from the item layer to render in the viewport
        // layer.

        var items = layout$$1.reduce(function (acc, position, idx) {
          if (position.top + position.height > viewportTop && position.top < viewportHeight + viewportTop && position.left < viewportWidth + viewportLeft && position.left + position.width > viewportLeft) {
            acc.push(_extends({ idx: idx }, position));
          }
          return acc;
        }, []);

        return React.createElement(
          'div',
          { className: layout.relative, style: { width: width, height: height } },
          items.map(function (_ref) {
            var idx = _ref.idx,
                style = objectWithoutProperties(_ref, ['idx']);
            return React.createElement(
              'div',
              { key: idx, className: layout.absolute, style: style },
              React.createElement(Item, { idx: idx })
            );
          })
        );
      }
    }]);
    return Collection;
  }(React.PureComponent);

  Collection.propTypes = {
    // eslint-disable-next-line react/forbid-prop-types
    Item: PropTypes.any,
    layout: PropTypes.arrayOf(PropTypes.exact({
      top: PropTypes.number.isRequired,
      left: PropTypes.number.isRequired,
      width: PropTypes.number.isRequired,
      height: PropTypes.number.isRequired
    }).isRequired),
    viewportHeight: PropTypes.number,
    viewportLeft: PropTypes.number,
    viewportTop: PropTypes.number,
    viewportWidth: PropTypes.number
  };
  Collection.defaultProps = {
    layout: [],
    viewportLeft: 0,
    viewportTop: 0
  };

  /*

  This function just implements the design constraints for asymetrical columns in
  a very simple way. It's not perfect, but it's very predictible. If you do
  anything, improve it so that it takes these constraints and generates them
  for n > 4.

  1 + n columns:
    first column is 50/50
    can't have 3 columns in a row be 50/50

  */
  var UP = [0.75, 0.25];
  var DOWN = [0.25, 0.75];
  var MID = [0.5, 0.5];
  var columnLayout = function columnLayout(numOfColumns) {
    switch (numOfColumns) {
      case 1:
        return [[MID], [UP], [DOWN]];
      case 2:
        return [[UP, MID], [DOWN, MID], [MID, UP], [MID, DOWN]];
      case 4:
        return [[MID, UP, MID, MID], [MID, DOWN, MID, MID], [MID, MID, UP, MID], [MID, MID, DOWN, MID], [MID, UP, MID, DOWN], [MID, DOWN, MID, UP]];
      case 3:
      default:
        return [[MID, UP, MID], [MID, DOWN, MID], [MID, MID, UP], [MID, MID, DOWN]];
    }
  };

  var paddingAll = function paddingAll(gutter, positions) {
    return positions.map(function (_ref) {
      var top = _ref.top,
          left = _ref.left,
          width = _ref.width,
          height = _ref.height;
      return {
        top: top,
        left: left,
        width: width - gutter,
        height: height - gutter
      };
    });
  };

  var mindex = function mindex(arr) {
    return arr.reduce(function (minIndex, item, i) {
      return item < arr[minIndex] ? i : minIndex;
    }, 0);
  };

  var columnsForCollageWithCover = function columnsForCollageWithCover(numOfColumns) {
    return numOfColumns === 4 ? 2 : 1;
  };

  function getCollageLayout(_ref2) {
    var gutter = _ref2.gutter,
        cover = _ref2.cover,
        numCols = _ref2.columns,
        h = _ref2.height,
        w = _ref2.width,
        layoutKey = _ref2.layoutKey;

    var positions = [];
    var width = w + gutter;
    var height = h + gutter;

    // If there's a cover image, we'll add that later. It should be a little
    // less than half the width of the collage. We do this now (and not later
    // when we add the cover image) because of `columnLayout`'s constraints
    // needing the exact number of columns that are displayed.
    var gridCols = cover ? columnsForCollageWithCover(numCols) : numCols;

    // Selects the layout that we're going to use for the grid
    var columns = columnLayout(gridCols);
    var layoutIdx = layoutKey % columns.length;
    var layout = columns[layoutIdx];

    // This does a really simple version of our masonry layout. Why replicate
    // that here? a.) fewer dependencies and b.) we need the algorithm to
    // roughly preserve the order of the collages from when they were ordered
    // by Masonry.
    var colHeights = new Array(gridCols).fill(0);
    var colCounts = new Array(gridCols).fill(0);

    // We iterate over every position that we think we could _potentially_ have
    // so that we can fill them with empty sections if need be.
    for (var i = 0; i < 2 * gridCols; i += 1) {
      var col = mindex(colHeights);
      var colIdx = colCounts[col];
      var itemHeight = layout[col][colIdx] * height;

      positions.push({
        top: colHeights[col],
        left: col * (width / numCols),
        width: width / numCols,
        height: itemHeight
      });

      colHeights[col] += itemHeight;
      colCounts[col] += 1;
    }

    // If we have a cover image, figure out how big it is, then move all the
    // existing columns over.
    if (cover) {
      var coverImageWidth = Math.ceil(numCols / 2) * (width / numCols);
      positions = positions.map(function (position) {
        return _extends({}, position, {
          left: coverImageWidth + position.left
        });
      });
      positions.unshift({ top: 0, left: 0, width: coverImageWidth, height: height });
    }

    // This adds the space between any items that we have. It's nice to do
    // this as a separate pass after everything else, because the math earlier
    // becomes easier and it's less brittle to change.
    if (gutter) {
      positions = paddingAll(gutter, positions);
    }

    return positions;
  }

  function Collage(props) {
    var columns = props.columns,
        cover = props.cover,
        gutter = props.gutter,
        height = props.height,
        layoutKey = props.layoutKey,
        renderImage = props.renderImage,
        width = props.width;

    var positions = getCollageLayout({
      columns: columns,
      cover: !!cover,
      width: width,
      height: height,
      gutter: gutter || 0,
      layoutKey: layoutKey || 0
    });
    return React.createElement(Collection, {
      Item: function Item(_ref3) {
        var index = _ref3.idx;
        return renderImage({
          index: index,
          width: positions[index].width,
          height: positions[index].height
        });
      },
      layout: positions
    });
  }

  Collage.propTypes = {
    columns: PropTypes.oneOf([2, 3, 4]).isRequired,
    cover: PropTypes.bool,
    gutter: PropTypes.number,
    height: PropTypes.number.isRequired,
    layoutKey: PropTypes.number,
    renderImage: PropTypes.func.isRequired,
    width: PropTypes.number.isRequired
  };

  var styles$8 = { "deprecatedColumn": "_rw", "xsCol0": "_rx", "xsCol1": "_ry _xx", "xsCol2": "_rz _xy", "xsCol3": "_s0 _xz", "xsCol4": "_s1 _y0", "xsCol5": "_s2 _y1", "xsCol6": "_s3 _y2", "xsCol7": "_s4 _y3", "xsCol8": "_s5 _y4", "xsCol9": "_s6 _y5", "xsCol10": "_s7 _y6", "xsCol11": "_s8 _y7", "xsCol12": "_s9 _y8", "smCol0": "_sa", "smCol1": "_sb _y9", "smCol2": "_sc _ya", "smCol3": "_sd _yb", "smCol4": "_se _yc", "smCol5": "_sf _yd", "smCol6": "_sg _ye", "smCol7": "_sh _yf", "smCol8": "_si _yg", "smCol9": "_sj _yh", "smCol10": "_sk _yi", "smCol11": "_sl _yj", "smCol12": "_sm _yk", "mdCol0": "_sn", "mdCol1": "_so _yl", "mdCol2": "_sp _ym", "mdCol3": "_sq _yn", "mdCol4": "_sr _yo", "mdCol5": "_ss _yp", "mdCol6": "_st _yq", "mdCol7": "_su _yr", "mdCol8": "_sv _ys", "mdCol9": "_sw _yt", "mdCol10": "_sx _yu", "mdCol11": "_sy _yv", "mdCol12": "_sz _yw", "lgCol0": "_t0", "lgCol1": "_t1 _yx", "lgCol2": "_t2 _yy", "lgCol3": "_t3 _yz", "lgCol4": "_t4 _z0", "lgCol5": "_t5 _z1", "lgCol6": "_t6 _z2", "lgCol7": "_t7 _z3", "lgCol8": "_t8 _z4", "lgCol9": "_t9 _z5", "lgCol10": "_ta _z6", "lgCol11": "_tb _z7", "lgCol12": "_tc _z8" };

  function Column(props) {
    var children = props.children;

    var cs = classnames((props.xs !== undefined || props.sm !== undefined || props.md !== undefined || props.lg !== undefined) && styles$8.deprecatedColumn, props.xs && styles$8['xsCol' + props.xs], props.sm && styles$8['smCol' + props.sm], props.md && styles$8['mdCol' + props.md], props.lg && styles$8['lgCol' + props.lg], props.span != null && styles$8['xsCol' + props.span], props.smSpan != null && styles$8['smCol' + props.smSpan], props.mdSpan != null && styles$8['mdCol' + props.mdSpan], props.lgSpan != null && styles$8['lgCol' + props.lgSpan]);
    return React.createElement(
      'div',
      { className: cs },
      children
    );
  }

  Column.propTypes = {
    children: PropTypes.node,
    xs: PropTypes.number,
    sm: PropTypes.number,
    md: PropTypes.number,
    lg: PropTypes.number,
    span: PropTypes.number,
    smSpan: PropTypes.number,
    mdSpan: PropTypes.number,
    lgSpan: PropTypes.number
  };

  function Container(props) {
    var children = props.children;

    return React.createElement(
      Box,
      { justifyContent: 'center', display: 'flex' },
      React.createElement(
        Box,
        { maxWidth: 800, width: '100%' },
        children
      )
    );
  }

  Container.propTypes = {
    children: PropTypes.node
  };

  var styles$9 = { "divider": "_td _45 _2r _od" };

  function Divider() {
    return React.createElement('hr', { className: styles$9.divider });
  }

  function Caret(props) {
    var direction = props.direction;

    var path = void 0;
    switch (direction) {
      case 'up':
        path = 'M0 0 L12 12 L24 0';
        break;
      case 'right':
        path = 'M24 0 L12 12 L24 24';
        break;
      case 'down':
        path = 'M0 24 L12 12 L24 24';
        break;
      case 'left':
        path = 'M0 0 L12 12 L0 24';
        break;
      default:
    }

    return React.createElement(
      'svg',
      { width: '24', height: '24' },
      React.createElement('path', { d: path })
    );
  }

  Caret.propTypes = {
    direction: PropTypes.oneOf(['up', 'right', 'down', 'left'])
  };

  var styles$a = { "container": "_xp _4h", "contents": "_xq _4h _45 _4q _2y", "dimensions": "_xr", "innerContents": "_xs _4s _4d _2y", "caret": "_xt _4h" };

  /* Needed until this Flow issue is fixed: https://github.com/facebook/flow/issues/380 */
  /* eslint quote-props: 0 */
  var SPACES_INDEX_MAP = {
    '0': 'up',
    '1': 'right',
    '2': 'down',
    '3': 'left'
  };

  var DIR_INDEX_MAP = {
    up: 0,
    right: 1,
    down: 2,
    left: 3
  };

  var MARGIN = 24;
  var CARET_HEIGHT = 24;
  var CARET_OFFSET_FROM_SIDE = 24;
  var BORDER_RADIUS = 8;

  /**
   * Determines the main direction the flyout opens
   */
  function getMainDir(flyoutSize, idealDirection, triggerRect, windowSize) {
    // Calculates the available space if we were to place the flyout in the 4 main directions
    // to determine which 'quadrant' to position the flyout inside of
    var up = triggerRect.top - flyoutSize.height - CARET_HEIGHT;
    var right = windowSize.width - flyoutSize.width - CARET_HEIGHT - triggerRect.right;
    var down = windowSize.height - flyoutSize.height - CARET_HEIGHT - triggerRect.bottom;
    var left = triggerRect.left - flyoutSize.width - CARET_HEIGHT;

    // overrides available space when the trigger is close to the edge of the screen
    // trigger is too close to top/bottom of screen for left & right flyouts
    if (triggerRect.top < BORDER_RADIUS || windowSize.height - triggerRect.bottom < BORDER_RADIUS) {
      left = 0;
      right = 0;
    }

    // trigger is too close to the left/right of screen for up & down flyouts
    if (triggerRect.left < BORDER_RADIUS || windowSize.width - triggerRect.right < BORDER_RADIUS) {
      up = 0;
      down = 0;
    }

    var spaces = [up, right, down, left];

    // Identify best direction of available spaces
    var max = Math.max.apply(Math, spaces);

    // Chose the main direction for the flyout based on available spaces & user preference
    var mainDir = void 0;
    if (idealDirection && spaces[DIR_INDEX_MAP[idealDirection]] > 0) {
      // user pref
      mainDir = idealDirection;
    } else {
      // If no direction pref, chose the direction in which there is the most space available
      mainDir = SPACES_INDEX_MAP[spaces.indexOf(max)];
    }
    return mainDir;
  }

  /**
   * Determines the sub direction of how the flyout is positioned within the main dir
   */
  function getSubDir(flyoutSize, mainDir, triggerRect, windowSize) {
    // Now that we have the main direction, chose from 3 caret placements for that direction
    var offset = void 0;
    var triggerMid = void 0;
    var windowSpaceAvailable = void 0;

    if (mainDir === 'right' || mainDir === 'left') {
      offset = flyoutSize.height / 2;
      triggerMid = triggerRect.top + (triggerRect.bottom - triggerRect.top) / 2;
      windowSpaceAvailable = windowSize.height;
    } else {
      // (mainDir === 'up' || mainDir === 'down')
      offset = flyoutSize.width / 2;
      triggerMid = triggerRect.left + (triggerRect.right - triggerRect.left) / 2;
      windowSpaceAvailable = windowSize.width;
    }

    var aboveOrLeft = triggerMid - offset - MARGIN;
    var belowOrRight = windowSpaceAvailable - triggerMid - offset - MARGIN;
    var subDir = void 0;
    if (aboveOrLeft > 0 && belowOrRight > 0) {
      // caret should go in middle b/c it can
      subDir = 'middle';
    } else if (belowOrRight > 0) {
      // caret should go at top for left/right and left for up/down
      subDir = mainDir === 'left' || mainDir === 'right' ? 'up' : 'left';
    } else {
      // caret should go at bottom for left/right and right for up/down
      subDir = mainDir === 'left' || mainDir === 'right' ? 'down' : 'right';
    }
    return subDir;
  }

  /**
   * Calculates the amount the flyout & caret need to shift over to align with designs
   */
  function calcEdgeShifts(subDir, triggerRect, windowSize) {
    // Target values for flyout and caret shifts
    var flyoutVerticalShift = CARET_OFFSET_FROM_SIDE - (triggerRect.height - CARET_HEIGHT) / 2;
    var flyoutHorizontalShift = CARET_OFFSET_FROM_SIDE - (triggerRect.width - CARET_HEIGHT) / 2;
    var caretVerticalShift = CARET_HEIGHT;
    var caretHorizontalShift = CARET_HEIGHT;

    // Covers edge case where trigger is in a corner and we need to adjust the offset of the caret
    // to something smaller than normal in order
    var isCloseVertically = triggerRect.top - flyoutVerticalShift < 0 || triggerRect.bottom + flyoutVerticalShift > windowSize.height;
    var isCloseHorizontally = triggerRect.left - flyoutHorizontalShift < 0 || triggerRect.right + flyoutHorizontalShift > windowSize.width;
    if (isCloseVertically) {
      flyoutVerticalShift = BORDER_RADIUS - (triggerRect.height - CARET_HEIGHT) / 2;
      caretVerticalShift = BORDER_RADIUS;
    }
    if (isCloseHorizontally) {
      flyoutHorizontalShift = BORDER_RADIUS - (triggerRect.width - CARET_HEIGHT) / 2;
      caretHorizontalShift = BORDER_RADIUS;
    }

    return {
      flyout: {
        x: flyoutHorizontalShift,
        y: flyoutVerticalShift
      },
      caret: {
        x: caretHorizontalShift,
        y: caretVerticalShift
      }
    };
  }

  /**
   * Calculates flyout and caret offsets for styling
   */
  function adjustOffsets(base, edgeShift, flyoutSize, mainDir, subDir, triggerRect) {
    var flyoutLeft = base.left;
    var flyoutTop = base.top;

    var caretTop = mainDir === 'down' ? -CARET_HEIGHT : null;
    var caretRight = mainDir === 'left' ? -CARET_HEIGHT : null;
    var caretBottom = null;
    var caretLeft = mainDir === 'right' ? -CARET_HEIGHT : null;

    if (subDir === 'up') {
      flyoutTop = base.top - edgeShift.flyout.y;
      caretTop = edgeShift.caret.y;
    } else if (subDir === 'down') {
      flyoutTop = base.top - flyoutSize.height + triggerRect.height + edgeShift.flyout.y;
      caretBottom = edgeShift.caret.y;
    } else if (subDir === 'left') {
      flyoutLeft = base.left - edgeShift.flyout.x;
      caretLeft = edgeShift.caret.x;
    } else if (subDir === 'right') {
      flyoutLeft = base.left - flyoutSize.width + triggerRect.width + edgeShift.flyout.x;
      caretRight = edgeShift.caret.x;
    } else if (subDir === 'middle') {
      if (mainDir === 'left' || mainDir === 'right') {
        var triggerMid = flyoutTop + triggerRect.height / 2;
        flyoutTop = triggerMid - flyoutSize.height / 2;
        caretTop = (flyoutSize.height - CARET_HEIGHT) / 2;
      }
      if (mainDir === 'up' || mainDir === 'down') {
        var _triggerMid = flyoutLeft + triggerRect.width / 2;
        flyoutLeft = _triggerMid - flyoutSize.width / 2;
        caretLeft = (flyoutSize.width - CARET_HEIGHT) / 2;
      }
    }

    return {
      flyoutOffset: {
        top: flyoutTop,
        left: flyoutLeft
      },
      caretOffset: {
        top: caretTop,
        right: caretRight,
        bottom: caretBottom,
        left: caretLeft
      }
    };
  }

  /* Calculates baseline top and left offset for flyout */
  function baseOffsets(relativeOffset, flyoutSize, mainDir, triggerRect, windowSize) {
    var HALF_CARET = CARET_HEIGHT / 2;
    // TOP OFFSET
    var top = void 0;
    if (mainDir === 'down') {
      top = windowSize.scrollY + triggerRect.bottom + HALF_CARET;
    } else if (mainDir === 'up') {
      top = windowSize.scrollY + (triggerRect.top - flyoutSize.height - HALF_CARET);
    } else {
      // left and right
      top = windowSize.scrollY + triggerRect.top;
    }

    // LEFT OFFSET
    var left = void 0;
    if (mainDir === 'left') {
      left = windowSize.scrollX + (triggerRect.left - flyoutSize.width - HALF_CARET);
    } else if (mainDir === 'right') {
      left = windowSize.scrollX + triggerRect.right + HALF_CARET;
    } else {
      // down and up
      left = windowSize.scrollX + triggerRect.left;
    }

    // Adjusts for the relative parent container
    top -= relativeOffset.y;
    left -= relativeOffset.x;
    return { top: top, left: left };
  }

  var Contents = function (_React$Component) {
    inherits(Contents, _React$Component);

    function Contents() {
      var _ref;

      var _temp, _this, _ret;

      classCallCheck(this, Contents);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Contents.__proto__ || Object.getPrototypeOf(Contents)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        flyoutOffset: {
          top: undefined,
          right: undefined,
          bottom: undefined,
          left: undefined
        },
        caretOffset: {
          top: undefined,
          right: undefined,
          bottom: undefined,
          left: undefined
        },
        mainDir: null
      }, _this.setFlyoutPosition = function (props) {
        var relativeOffset = props.relativeOffset,
            idealDirection = props.idealDirection,
            positionRelativeToAnchor = props.positionRelativeToAnchor,
            triggerRect = props.triggerRect,
            width = props.width;

        // Scroll not needed for relative elements
        // We can't use window.scrollX / window.scrollY since it's not supported by IE11

        var scrollX = positionRelativeToAnchor ? 0 : window.pageXOffset || document.documentElement && document.documentElement.scrollLeft || 0;
        var scrollY = positionRelativeToAnchor ? 0 : window.pageYOffset || document.documentElement && document.documentElement.scrollTop || 0;

        var windowSize = {
          height: window.innerHeight,
          width: window.innerWidth,
          scrollX: scrollX,
          scrollY: scrollY
        };

        var flyoutSize = {
          height: _this.flyout ? _this.flyout.clientHeight : 0,
          width: width
        };

        // First choose one of 4 main direction
        var mainDir = getMainDir(flyoutSize, idealDirection, triggerRect, windowSize);

        // Now that we have the main direction, chose from 3 caret placements for that direction
        var subDir = getSubDir(flyoutSize, mainDir, triggerRect, windowSize);

        // Gets the base offset that positions the flyout based on the main direction only
        var base = baseOffsets(relativeOffset, flyoutSize, mainDir, triggerRect, windowSize);

        // Gets the edge shifts for the flyout
        var edgeShifts = calcEdgeShifts(subDir, triggerRect, windowSize);

        // Adjusts for the subdirection of the caret

        var _adjustOffsets = adjustOffsets(base, edgeShifts, flyoutSize, mainDir, subDir, triggerRect),
            flyoutOffset = _adjustOffsets.flyoutOffset,
            caretOffset = _adjustOffsets.caretOffset;

        _this.setState({
          caretOffset: caretOffset,
          flyoutOffset: flyoutOffset,
          mainDir: mainDir
        });
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(Contents, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        var _this2 = this;

        this.setFlyoutPosition(this.props);
        setTimeout(function () {
          if (_this2.props.shouldFocus && _this2.flyout) {
            _this2.flyout.focus();
          }
        });
        window.addEventListener('resize', this.props.onResize);
        window.addEventListener('keydown', this.props.onKeyDown);
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        this.setFlyoutPosition(nextProps);
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        window.removeEventListener('resize', this.props.onResize);
        window.removeEventListener('keydown', this.props.onKeyDown);
      }

      /**
       * Determines the main direciton, sub direction, and corresponding offsets needed
       * to correctly position the offset
       */

    }, {
      key: 'render',
      value: function render() {
        var _this3 = this;

        var _props = this.props,
            bgColor = _props.bgColor,
            children = _props.children,
            width = _props.width;

        // Needed to prevent UI thrashing

        var visibility = this.state.mainDir === null ? 'hidden' : 'visible';
        var background = bgColor + 'Bg';
        var stroke = bgColor === 'white' ? '#efefef' : null;
        var borderColor = bgColor === 'white' ? 'lightGray' : bgColor;

        return React.createElement(
          'div',
          {
            className: styles$a.container,
            style: _extends({ stroke: stroke, visibility: visibility }, this.state.flyoutOffset)
          },
          React.createElement(
            'div',
            {
              className: classnames(colors[background], colors[borderColor], styles$a.dimensions, styles$a.contents),
              ref: function ref(c) {
                _this3.flyout = c;
              },
              tabIndex: -1
            },
            React.createElement(
              'div',
              {
                className: classnames(styles$a.dimensions, styles$a.innerContents),
                style: { width: width }
              },
              children
            ),
            React.createElement(
              'div',
              {
                className: classnames(colors[bgColor], styles$a.caret),
                style: _extends({}, this.state.caretOffset)
              },
              React.createElement(Caret, { direction: this.state.mainDir })
            )
          )
        );
      }
    }]);
    return Contents;
  }(React.Component);
  Contents.propTypes = {
    bgColor: PropTypes.oneOf(['blue', 'darkGray', 'orange', 'white']),
    children: PropTypes.node,
    idealDirection: PropTypes.oneOf(['up', 'right', 'down', 'left']),
    onKeyDown: PropTypes.func.isRequired,
    onResize: PropTypes.func.isRequired,
    relativeOffset: PropTypes.exact({ x: PropTypes.number, y: PropTypes.number }),
    positionRelativeToAnchor: PropTypes.bool,
    shouldFocus: PropTypes.bool,
    triggerRect: PropTypes.exact({
      bottom: PropTypes.number,
      height: PropTypes.number,
      left: PropTypes.number,
      right: PropTypes.number,
      top: PropTypes.number,
      width: PropTypes.number
    }),
    width: PropTypes.number
  };

  var OutsideEventBehavior = function (_React$Component) {
    inherits(OutsideEventBehavior, _React$Component);

    function OutsideEventBehavior() {
      var _ref;

      var _temp, _this, _ret;

      classCallCheck(this, OutsideEventBehavior);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = OutsideEventBehavior.__proto__ || Object.getPrototypeOf(OutsideEventBehavior)).call.apply(_ref, [this].concat(args))), _this), _this.handleClickEvent = function (event) {
        // eslint-disable-next-line react/no-find-dom-node
        var el = reactDom.findDOMNode(_this);
        if (!_this.props.onClick || !el || event.target instanceof Node && el.contains(event.target)) {
          return;
        }
        _this.props.onClick(event);
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(OutsideEventBehavior, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        document.addEventListener('click', this.handleClickEvent, {
          capture: true
        });
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        document.removeEventListener('click', this.handleClickEvent, {
          capture: true
        });
      }
    }, {
      key: 'render',
      value: function render() {
        return this.props.children;
      }
    }]);
    return OutsideEventBehavior;
  }(React.Component);

  var SIZE_WIDTH_MAP = {
    xs: 185,
    sm: 230,
    md: 284,
    lg: 320,
    xl: 375
  };

  var ESCAPE_KEY_CODE = 27;

  var Controller = function (_React$Component) {
    inherits(Controller, _React$Component);

    function Controller() {
      var _ref;

      var _temp, _this, _ret;

      classCallCheck(this, Controller);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Controller.__proto__ || Object.getPrototypeOf(Controller)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        relativeOffset: {
          x: 0,
          y: 0
        },
        triggerBoundingRect: {
          bottom: 0,
          height: 0,
          left: 0,
          right: 0,
          top: 0,
          width: 0
        }
      }, _this.handleKeyDown = function (event) {
        if (event.keyCode === ESCAPE_KEY_CODE) {
          _this.props.onDismiss();
        }
      }, _this.handlePageClick = function (event) {
        if (event.target instanceof Node && _this.props.anchor && !_this.props.anchor.contains(event.target)) {
          _this.props.onDismiss();
        }
      }, _this.handleResize = function () {
        _this.updateTriggerRect(_this.props);
      }, _this.updateTriggerRect = function (props) {
        var anchor = props.anchor,
            positionRelativeToAnchor = props.positionRelativeToAnchor;

        var triggerBoundingRect = void 0;
        var relativeOffset = void 0;
        if (anchor) {
          triggerBoundingRect = anchor.getBoundingClientRect();

          // Needed for correct positioning within Contents.js
          relativeOffset = {
            x: positionRelativeToAnchor ? triggerBoundingRect.left - anchor.offsetLeft : 0,
            y: positionRelativeToAnchor ? triggerBoundingRect.top - anchor.offsetTop : 0
          };
        }

        _this.setState({ relativeOffset: relativeOffset, triggerBoundingRect: triggerBoundingRect });
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(Controller, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        this.updateTriggerRect(this.props);
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        this.updateTriggerRect(nextProps);
      }
    }, {
      key: 'render',
      value: function render() {
        var _props = this.props,
            anchor = _props.anchor,
            bgColor = _props.bgColor,
            children = _props.children,
            idealDirection = _props.idealDirection,
            positionRelativeToAnchor = _props.positionRelativeToAnchor,
            shouldFocus = _props.shouldFocus;

        if (!anchor) {
          return null;
        }
        var size = this.props.size ? this.props.size : 'sm';
        var width = typeof size === 'string' ? SIZE_WIDTH_MAP[size] : size;
        return React.createElement(
          OutsideEventBehavior,
          { onClick: this.handlePageClick },
          React.createElement(
            Contents,
            {
              bgColor: bgColor,
              idealDirection: idealDirection,
              onKeyDown: this.handleKeyDown,
              onResize: this.handleResize,
              positionRelativeToAnchor: positionRelativeToAnchor,
              relativeOffset: this.state.relativeOffset,
              shouldFocus: shouldFocus,
              triggerRect: this.state.triggerBoundingRect,
              width: width
            },
            children
          )
        );
      }
    }]);
    return Controller;
  }(React.Component);


  Controller.propTypes = {
    anchor: PropTypes.shape({
      contains: PropTypes.func,
      getBoundingClientRect: PropTypes.func
    }),
    bgColor: PropTypes.oneOf(['blue', 'darkGray', 'orange', 'white']),
    children: PropTypes.node,
    idealDirection: PropTypes.oneOf(['up', 'right', 'down', 'left']),
    onDismiss: PropTypes.func.isRequired,
    positionRelativeToAnchor: PropTypes.bool,
    shouldFocus: PropTypes.bool,
    size: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])] // default: sm
    )
  };

  function Flyout(props) {
    var anchor = props.anchor,
        children = props.children,
        idealDirection = props.idealDirection,
        onDismiss = props.onDismiss,
        _props$positionRelati = props.positionRelativeToAnchor,
        positionRelativeToAnchor = _props$positionRelati === undefined ? true : _props$positionRelati,
        _props$color = props.color,
        color = _props$color === undefined ? 'white' : _props$color,
        _props$shouldFocus = props.shouldFocus,
        shouldFocus = _props$shouldFocus === undefined ? true : _props$shouldFocus,
        size = props.size;


    if (!anchor) {
      return null;
    }

    return React.createElement(
      Controller,
      {
        anchor: anchor,
        bgColor: color,
        idealDirection: idealDirection,
        onDismiss: onDismiss,
        positionRelativeToAnchor: positionRelativeToAnchor,
        shouldFocus: shouldFocus,
        size: size
      },
      children
    );
  }

  Flyout.propTypes = {
    anchor: PropTypes.shape({
      contains: PropTypes.func,
      getBoundingClientRect: PropTypes.func
    }),
    children: PropTypes.node,
    idealDirection: PropTypes.oneOf(['up', 'right', 'down', 'left']),
    onDismiss: PropTypes.func.isRequired,
    positionRelativeToAnchor: PropTypes.bool,
    color: PropTypes.oneOf(['blue', 'orange', 'white', 'darkGray']),
    size: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])] // default: sm
    )
  };

  var styles$b = { "wash": "_te _4h _4j _4m _4k _4l" };

  function zip(a, b) {
    return a.map(function (item, idx) {
      return [item, b[idx]];
    });
  }

  var BORDER_WIDTH = 2;

  var AVATAR_SIZES = {
    sm: 24,
    md: 40,
    lg: 72
  };

  var avatarLayout = function avatarLayout(n, size) {
    switch (n) {
      case 0:
      case 1:
        return [{ top: 0, left: 0, width: size, height: size, textLayout: 'center' }];
      case 2:
        return [{
          top: 0,
          left: 0,
          width: 'calc(50% - ' + BORDER_WIDTH / 2 + 'px)',
          height: size,
          textLayout: 'center'
        }, {
          top: 0,
          left: 'calc(50% + ' + BORDER_WIDTH / 2 + 'px)',
          width: 'calc(50% - ' + BORDER_WIDTH / 2 + 'px)',
          height: size,
          textLayout: 'center'
        }];
      default:
        return [{
          top: 0,
          left: 0,
          width: 'calc(50% - ' + BORDER_WIDTH / 2 + 'px)',
          height: size,
          textLayout: 'center'
        }, {
          top: 0,
          left: 'calc(50% + ' + BORDER_WIDTH / 2 + 'px)',
          width: 'calc(50%)',
          height: 'calc(50% - ' + BORDER_WIDTH / 2 + 'px)',
          textLayout: 'topLeft'
        }, {
          top: 'calc(50% + ' + BORDER_WIDTH / 2 + 'px)',
          left: 'calc(50% + ' + BORDER_WIDTH / 2 + 'px)',
          width: 'calc(50%)',
          height: 'calc(50% - ' + BORDER_WIDTH / 2 + 'px)',
          textLayout: 'bottomLeft'
        }];
    }
  };

  var degToRad = function degToRad(deg) {
    return deg * (Math.PI / 180);
  };

  var DefaultAvatar$1 = function DefaultAvatar(props) {
    var size = props.size,
        name = props.name,
        textLayout = props.textLayout;


    var quarterPadding = 'calc(' + Math.sin(degToRad(45)) + ' * (' + size + ') / 2)';

    var initial = React.createElement(
      'svg',
      {
        width: '100%',
        viewBox: '-50 -50 100 100',
        version: '1.1',
        preserveAspectRatio: 'xMidYMid meet',
        xmlns: 'http://www.w3.org/2000/svg'
      },
      React.createElement(
        'title',
        null,
        name
      ),
      React.createElement(
        'text',
        {
          fontSize: '50px',
          fill: '#fff',
          dominantBaseline: 'central',
          textAnchor: 'middle',
          className: [typography.antialiased, typography.sansSerif, typography.leadingSmall, typography.fontWeightBold].join(' ')
        },
        name ? [].concat(toConsumableArray(name))[0].toUpperCase() : ''
      )
    );
    switch (textLayout) {
      case 'bottomLeft':
        return React.createElement(
          Box,
          {
            'aria-label': name,
            color: 'gray',
            height: '100%',
            display: 'flex',
            alignItems: 'end',
            dangerouslySetInlineStyle: {
              __style: {
                paddingBottom: quarterPadding,
                paddingRight: quarterPadding
              }
            }
          },
          initial
        );
      case 'topLeft':
        return React.createElement(
          Box,
          {
            'aria-label': name,
            color: 'gray',
            height: '100%',
            display: 'flex',
            alignItems: 'start',
            dangerouslySetInlineStyle: {
              __style: {
                paddingTop: quarterPadding,
                paddingRight: quarterPadding
              }
            }
          },
          initial
        );
      default:
        return React.createElement(
          Box,
          {
            'aria-label': name,
            color: 'gray',
            height: '100%',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center'
          },
          initial
        );
    }
  };

  function GroupAvatar(props) {
    var collaborators = props.collaborators,
        outline = props.outline,
        size = props.size;

    var avatarWidth = size ? AVATAR_SIZES[size] : '100%';
    var avatarHeight = size ? AVATAR_SIZES[size] : '';
    var positions = avatarLayout(collaborators.length, avatarWidth);
    return React.createElement(
      Box,
      {
        color: 'white',
        overflow: 'hidden',
        shape: 'circle',
        width: avatarWidth,
        height: avatarHeight,
        position: 'relative',
        dangerouslySetInlineStyle: {
          __style: _extends({}, outline ? { boxShadow: '0 0 0 2px #fff' } : {}, {
            // willChange: transform fixes a strange behavior where the border of the children
            // are not properly trimmed even though overflow: hidden is set
            willChange: 'transform'
          })
        }
      },
      React.createElement(Box, { dangerouslySetInlineStyle: { __style: { paddingBottom: '100%' } } }),
      zip(positions, collaborators).map(function (_ref, idx) {
        var _ref2 = slicedToArray(_ref, 2),
            position = _ref2[0],
            _ref2$ = _ref2[1],
            collaborator = _ref2$ === undefined ? { name: '', src: undefined } : _ref2$;

        var width = position.width,
            height = position.height,
            top = position.top,
            left = position.left,
            textLayout = position.textLayout;
        var name = collaborator.name,
            src = collaborator.src;

        return React.createElement(
          Box,
          {
            key: idx,
            position: 'absolute',
            width: width,
            height: height,
            dangerouslySetInlineStyle: { __style: { top: top, left: left } }
          },
          src ? React.createElement(Image, {
            alt: name,
            color: '#EFEFEF',
            src: src,
            naturalWidth: 1,
            naturalHeight: 1,
            fit: 'cover'
          }) : React.createElement(DefaultAvatar$1, {
            name: name,
            textLayout: textLayout,
            size: height
          }),
          React.createElement('div', { className: styles$b.wash })
        );
      })
    );
  }

  GroupAvatar.propTypes = {
    collaborators: PropTypes.arrayOf(PropTypes.exact({
      name: PropTypes.string.isRequired,
      src: PropTypes.string
    })).isRequired,
    outline: PropTypes.bool,
    size: PropTypes.oneOf(['sm', 'md', 'lg'])
  };

  var styles$c = { "Heading": "_tf _0 _1 _2", "fontSize1": "_tg", "fontSize2": "_th", "fontSize3": "_ti", "fontSize4": "_tj", "fontSize5": "_tk", "smFontSize1": "_tl", "smFontSize2": "_tm", "smFontSize3": "_tn", "smFontSize4": "_to", "smFontSize5": "_tp", "mdFontSize1": "_tq", "mdFontSize2": "_tr", "mdFontSize3": "_ts", "mdFontSize4": "_tt", "mdFontSize5": "_tu", "lgFontSize1": "_tv", "lgFontSize2": "_tw", "lgFontSize3": "_tx", "lgFontSize4": "_ty", "lgFontSize5": "_tz" };

  var defaultHeadingLevels = {
    xs: 5,
    sm: 4,
    md: 3,
    lg: 2,
    xl: 1
  };

  var SIZE_SCALE$1 = {
    xs: 1,
    sm: 2,
    md: 3,
    lg: 4,
    xl: 5
  };

  function Heading(props) {
    var accessibilityLevel = props.accessibilityLevel,
        children = props.children,
        _props$color = props.color,
        color = _props$color === undefined ? 'darkGray' : _props$color,
        _props$id = props.id,
        id = _props$id === undefined ? null : _props$id,
        lgSize = props.lgSize,
        mdSize = props.mdSize,
        _props$overflow = props.overflow,
        overflow = _props$overflow === undefined ? 'breakWord' : _props$overflow,
        _props$size = props.size,
        size = _props$size === undefined ? 'md' : _props$size,
        smSize = props.smSize,
        _props$truncate = props.truncate,
        truncate = _props$truncate === undefined ? false : _props$truncate;


    var cs = classnames(styles$c.Heading, styles$c['fontSize' + SIZE_SCALE$1[size]], smSize && styles$c['smFontSize' + SIZE_SCALE$1[smSize]], mdSize && styles$c['mdFontSize' + SIZE_SCALE$1[mdSize]], lgSize && styles$c['lgFontSize' + SIZE_SCALE$1[lgSize]], colors[color], overflow === 'breakWord' && typography.breakWord, truncate && typography.truncate);

    var headingLevel = accessibilityLevel || defaultHeadingLevels[size];
    return React.createElement('h' + headingLevel, _extends({
      className: cs,
      id: id
    }, truncate && typeof children === 'string' ? { title: children } : null), children);
  }

  Heading.propTypes = {
    accessibilityLevel: PropTypes.oneOf([1, 2, 3, 4, 5, 6]),
    children: PropTypes.node,
    color: PropTypes.oneOf(['blue', 'darkGray', 'eggplant', 'gray', 'green', 'lightGray', 'maroon', 'midnight', 'navy', 'olive', 'orange', 'orchid', 'pine', 'purple', 'red', 'watermelon', 'white']),
    id: PropTypes.string,
    overflow: PropTypes.oneOf(['normal', 'breakWord']),
    size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
    smSize: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
    mdSize: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
    lgSize: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
    truncate: PropTypes.bool
  };

  var styles$d = { "button": "_u2 _45 _33 _oi _z9" };

  var styles$e = { "pog": "_um _2w _4s _50 _5a", "focused": "_un _xv", "transparent": "_uo _42", "hovered": "_up", "white": "_uq _37", "active": "_ur", "lightGray": "_us _39", "gray": "_ut _3b" };

  var SIZE_NAME_TO_PIXEL = {
    xs: 24,
    sm: 32,
    md: 40,
    lg: 48,
    xl: 56
  };

  var defaultIconButtonIconColors = {
    transparent: 'gray',
    gray: 'white',
    lightGray: 'gray',
    white: 'gray'
  };

  function Pog(props) {
    var _classnames;

    var _props$active = props.active,
        active = _props$active === undefined ? false : _props$active,
        _props$bgColor = props.bgColor,
        bgColor = _props$bgColor === undefined ? 'transparent' : _props$bgColor,
        _props$focused = props.focused,
        focused = _props$focused === undefined ? false : _props$focused,
        _props$hovered = props.hovered,
        hovered = _props$hovered === undefined ? false : _props$hovered,
        _props$iconColor = props.iconColor,
        iconColor = _props$iconColor === undefined ? defaultIconButtonIconColors[bgColor] : _props$iconColor,
        icon = props.icon,
        _props$size = props.size,
        size = _props$size === undefined ? 'md' : _props$size;


    var iconSize = SIZE_NAME_TO_PIXEL[size] / 2;

    var inlineStyle = {
      height: SIZE_NAME_TO_PIXEL[size],
      width: SIZE_NAME_TO_PIXEL[size]
    };

    var classes = classnames(styles$e.pog, styles$e[bgColor], (_classnames = {}, defineProperty(_classnames, styles$e.active, active), defineProperty(_classnames, styles$e.focused, focused), defineProperty(_classnames, styles$e.hovered, hovered && !focused && !active), _classnames));

    return React.createElement(
      'div',
      { className: classes, style: inlineStyle },
      React.createElement(
        Box,
        { shape: 'circle' },
        React.createElement(Icon, {
          color: iconColor,
          icon: icon,
          size: iconSize,
          accessibilityLabel: ''
        })
      )
    );
  }

  Pog.propTypes = {
    active: PropTypes.bool,
    bgColor: PropTypes.oneOf(['transparent', 'gray', 'lightGray', 'white']),
    focused: PropTypes.bool,
    hovered: PropTypes.bool,
    iconColor: PropTypes.oneOf(['gray', 'darkGray', 'red', 'blue', 'white']),
    icon: PropTypes.oneOf(Object.keys(icons)).isRequired,
    size: PropTypes.oneOf(Object.keys(SIZE_NAME_TO_PIXEL))
  };

  var IconButton = function (_React$Component) {
    inherits(IconButton, _React$Component);

    function IconButton() {
      var _ref;

      var _temp, _this, _ret;

      classCallCheck(this, IconButton);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = IconButton.__proto__ || Object.getPrototypeOf(IconButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        active: false,
        focused: false,
        hovered: false
      }, _this.handleBlur = function () {
        return _this.setState({ focused: false });
      }, _this.handleFocus = function () {
        _this.setState({ focused: true });
      }, _this.handleMouseDown = function () {
        _this.setState({ active: true });
      }, _this.handleMouseEnter = function () {
        _this.setState({ hovered: true });
      }, _this.handleMouseLeave = function () {
        _this.setState({
          active: false,
          hovered: false
        });
      }, _this.handleMouseUp = function () {
        _this.setState({ active: false });
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(IconButton, [{
      key: 'render',
      value: function render() {
        var _props = this.props,
            accessibilityExpanded = _props.accessibilityExpanded,
            accessibilityHaspopup = _props.accessibilityHaspopup,
            accessibilityLabel = _props.accessibilityLabel,
            bgColor = _props.bgColor,
            iconColor = _props.iconColor,
            icon = _props.icon,
            size = _props.size,
            onClick = _props.onClick;
        var _state = this.state,
            active = _state.active,
            focused = _state.focused,
            hovered = _state.hovered;


        return React.createElement(
          'button',
          {
            'aria-expanded': accessibilityExpanded,
            'aria-haspopup': accessibilityHaspopup,
            'aria-label': accessibilityLabel,
            className: styles$d.button,
            onBlur: this.handleBlur,
            onClick: function (_onClick) {
              function onClick(_x) {
                return _onClick.apply(this, arguments);
              }

              onClick.toString = function () {
                return _onClick.toString();
              };

              return onClick;
            }(function (event) {
              return onClick && onClick({ event: event });
            }),
            onFocus: this.handleFocus,
            onMouseDown: this.handleMouseDown,
            onMouseEnter: this.handleMouseEnter,
            onMouseLeave: this.handleMouseLeave,
            onMouseUp: this.handleMouseUp,
            title: accessibilityLabel,
            type: 'button'
          },
          React.createElement(Pog, {
            active: active,
            bgColor: bgColor,
            focused: focused,
            hovered: hovered,
            iconColor: iconColor,
            icon: icon,
            size: size
          })
        );
      }
    }]);
    return IconButton;
  }(React.Component);

  IconButton.propTypes = {
    accessibilityExpanded: PropTypes.bool,
    accessibilityHaspopup: PropTypes.bool,
    accessibilityLabel: PropTypes.string.isRequired,
    bgColor: PropTypes.oneOf(['transparent', 'gray', 'lightGray', 'white']),
    icon: PropTypes.oneOf(Object.keys(icons)).isRequired,
    iconColor: PropTypes.oneOf(['gray', 'darkGray', 'red', 'blue', 'white']),
    onClick: PropTypes.func,
    size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])
  };

  var styles$f = { "label": "_u7 _45 _z9" };

  function Label(props) {
    var children = props.children,
        htmlFor = props.htmlFor;


    return React.createElement(
      'label',
      { className: styles$f.label, htmlFor: htmlFor },
      children
    );
  }

  Label.propTypes = {
    children: PropTypes.node,
    htmlFor: PropTypes.string.isRequired
  };

  var Layer = function (_React$Component) {
    inherits(Layer, _React$Component);

    function Layer(props) {
      classCallCheck(this, Layer);

      var _this = possibleConstructorReturn(this, (Layer.__proto__ || Object.getPrototypeOf(Layer)).call(this, props));

      _this.state = {
        mounted: false
      };

      if (typeof document !== 'undefined' && document.createElement) {
        _this.el = document.createElement('div');
      } else {
        // eslint-disable-next-line no-console
        console.warn('Using Layer without document present. Children will not be rendered.');
      }
      return _this;
    }

    createClass(Layer, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        if (typeof document !== 'undefined' && document.body) {
          document.body.appendChild(this.el);
          this.setState({ mounted: true });
        }
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        if (document.body) {
          document.body.removeChild(this.el);
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var children = this.props.children;

        return this.state.mounted && reactDom.createPortal(children, this.el);
      }
    }]);
    return Layer;
  }(React.Component);

  /*
    Much of the math and understanding about this component comes from @vjeaux's
    excellent blog post on image resizing.

    http://blog.vjeux.com/2013/image/css-container-and-cover.html

    I highly recommend you read that first before continuing on reading.
  */

  var aspectRatio = function aspectRatio(width, height) {
    return width / height;
  };

  function Letterbox(_ref) {
    var children = _ref.children,
        contentAspectRatio = _ref.contentAspectRatio,
        height = _ref.height,
        width = _ref.width;

    var viewportAspectRatio = aspectRatio(width, height);

    var contentHeight = void 0;
    var contentWidth = void 0;

    if (contentAspectRatio < viewportAspectRatio) {
      contentWidth = width;
      contentHeight = width / contentAspectRatio;
    } else {
      contentWidth = height * contentAspectRatio;
      contentHeight = height;
    }

    var offsetTop = (contentHeight - height) / -2;
    var offsetLeft = (contentWidth - width) / -2;

    return React.createElement(
      Mask,
      { width: width, height: height },
      React.createElement(
        'div',
        { style: { marginTop: offsetTop, marginLeft: offsetLeft } },
        React.createElement(
          Mask,
          { width: contentWidth, height: contentHeight },
          children
        )
      )
    );
  }

  Letterbox.propTypes = {
    children: PropTypes.node,
    contentAspectRatio: PropTypes.number.isRequired,
    height: PropTypes.number.isRequired,
    width: PropTypes.number.isRequired
  };

  var styles$g = { "link": "_u8 _a", "accessibleFocusStyle": "_u9 _xu", "block": "_ua _45" };

  var TAB_KEY_CODE = 9;

  var Link = function (_React$Component) {
    inherits(Link, _React$Component);

    function Link() {
      var _ref;

      var _temp, _this, _ret;

      classCallCheck(this, Link);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Link.__proto__ || Object.getPrototypeOf(Link)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        enableFocusStyles: true
      }, _this.handleClick = function (event) {
        var _this$props = _this.props,
            href = _this$props.href,
            onClick = _this$props.onClick;

        if (onClick && href) {
          onClick({ event: event });
        }
      }, _this.handleMouseDown = function () {
        var _this$props2 = _this.props,
            href = _this$props2.href,
            target = _this$props2.target;

        if (target === 'blank' && href) {
          _this.setState({ enableFocusStyles: false });
        }
      }, _this.handleKeyUp = function (event) {
        var _this$props3 = _this.props,
            href = _this$props3.href,
            target = _this$props3.target;

        if (target === 'blank' && event.keyCode === TAB_KEY_CODE && href) {
          _this.setState({ enableFocusStyles: true });
        }
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(Link, [{
      key: 'render',
      value: function render() {
        var _props = this.props,
            children = _props.children,
            _props$inline = _props.inline,
            inline = _props$inline === undefined ? false : _props$inline,
            _props$target = _props.target,
            target = _props$target === undefined ? null : _props$target,
            href = _props.href;

        var rel = target === 'blank' ? 'noopener noreferrer' : null;
        var linkTarget = target ? '_' + target : null;

        return React.createElement(
          'a',
          {
            className: classnames(styles$g.link, this.state.enableFocusStyles ? styles$g.accessibleFocusStyle : '', inline ? '' : styles$g.block),
            href: href,
            onMouseDown: this.handleMouseDown,
            onKeyUp: this.handleKeyUp,
            onClick: this.handleClick,
            rel: rel,
            target: linkTarget
          },
          children
        );
      }
    }]);
    return Link;
  }(React.Component);

  Link.propTypes = {
    children: PropTypes.node.isRequired,
    href: PropTypes.string.isRequired,
    inline: PropTypes.bool,
    onClick: PropTypes.func,
    target: PropTypes.oneOf([null, 'self', 'blank'])
  };

  /**
   * debounce prevents a particular function from being called until after a given
   * cooldown period (default 100ms). Every time the function is called, it resets
   * the cooldown.
   */

  function debounce(fn) {
    var threshhold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;

    var deferTimer = null;

    var debounced = function debounced() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (deferTimer) {
        clearTimeout(deferTimer);
      }

      deferTimer = setTimeout(function () {
        deferTimer = null;
        fn.apply(undefined, toConsumableArray(args));
      }, threshhold);
    };

    debounced.clearTimeout = function () {
      if (deferTimer) {
        clearTimeout(deferTimer);
      }
    };

    return debounced;
  }

  /**
   * FetchItems is a logic component that renders no content itself. Its job
   * is to manage when the given fetchMore method should be called based on
   * the given scroll/size props.
   *
   * While no element is actually passed to FetchItems, it is intended to be used
   * in conjunction with a large scroll container that uses async fetching to
   * load and render additional data. Based on the height of this container and
   * its current scroll position, FetchItems is responsible for triggering future
   * fetch calls.
   */

  var FetchItems = function (_React$PureComponent) {
    inherits(FetchItems, _React$PureComponent);

    function FetchItems() {
      var _ref;

      var _temp, _this, _ret;

      classCallCheck(this, FetchItems);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = FetchItems.__proto__ || Object.getPrototypeOf(FetchItems)).call.apply(_ref, [this].concat(args))), _this), _this.check = function () {
        var _this$props = _this.props,
            containerHeight = _this$props.containerHeight,
            isAtEnd = _this$props.isAtEnd,
            isFetching = _this$props.isFetching,
            fetchMore = _this$props.fetchMore,
            scrollHeight = _this$props.scrollHeight,
            scrollTop = _this$props.scrollTop;


        if (isAtEnd || isFetching || !fetchMore) {
          return;
        }
        var scrollBuffer = containerHeight * 3;

        if (scrollTop + scrollBuffer > scrollHeight) {
          fetchMore();
        }
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(FetchItems, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        setTimeout(this.check);
      }
    }, {
      key: 'componentDidUpdate',
      value: function componentDidUpdate() {
        this.check();
      }
    }, {
      key: 'render',
      value: function render() {
        return null;
      }
    }]);
    return FetchItems;
  }(React.PureComponent);

  FetchItems.propTypes = {
    containerHeight: PropTypes.number.isRequired,
    isAtEnd: PropTypes.bool,
    isFetching: PropTypes.bool.isRequired,
    fetchMore: PropTypes.func,
    scrollHeight: PropTypes.number.isRequired,
    scrollTop: PropTypes.number.isRequired
  };

  var styles$h = { "Masonry": "_ug _4f", "Masonry__Item": "_uh _4h", "Masonry__Item__Mounted": "_ui" };

  /**
   * ScrollContainer is a pass-through component that simply sets up an onScroll
   * handler on the given scrollContainer element (or the element that is
   * returned as result of calling the scrollContainer method). This allows for
   * the event listener subscription of the scrollContainer to be managed inside
   * the React lifecycle without adding bloat to Masonry or other onScroll
   * subscribers.
   *
   * Note that this Component renders its children without creating any
   * additional content. Also note that, while the component is built to manage
   * onScroll inside of the React lifecycle, it doesn't change onScroll events
   * or the API at all, so it could easily be adapted to other event types.
   */

  function getScrollContainer(scrollContainer) {
    return typeof scrollContainer === 'function' ? scrollContainer() : scrollContainer;
  }

  var ScrollContainer = function (_React$Component) {
    inherits(ScrollContainer, _React$Component);

    function ScrollContainer() {
      var _ref;

      var _temp, _this, _ret;

      classCallCheck(this, ScrollContainer);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ScrollContainer.__proto__ || Object.getPrototypeOf(ScrollContainer)).call.apply(_ref, [this].concat(args))), _this), _this.getScrollContainerRef = function () {
        return _this.scrollContainer;
      }, _this.handleScroll = function (event) {
        _this.props.onScroll(event);
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(ScrollContainer, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        var scrollContainer = getScrollContainer(this.props.scrollContainer);
        if (scrollContainer) {
          this.updateScrollContainer(scrollContainer);
        }
      }
    }, {
      key: 'componentDidUpdate',
      value: function componentDidUpdate() {
        var nextScrollContainer = getScrollContainer(this.props.scrollContainer);
        if (nextScrollContainer && nextScrollContainer !== this.scrollContainer) {
          this.updateScrollContainer(nextScrollContainer);
        }
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        if (this.scrollContainer) {
          this.scrollContainer.removeEventListener('scroll', this.handleScroll);
        }
      }
    }, {
      key: 'updateScrollContainer',
      value: function updateScrollContainer(scrollContainer) {
        if (this.scrollContainer) {
          // cleanup existing scroll container if it exists
          this.scrollContainer.removeEventListener('scroll', this.handleScroll);
        }
        this.scrollContainer = scrollContainer;
        this.scrollContainer.addEventListener('scroll', this.handleScroll);
      }
    }, {
      key: 'render',
      value: function render() {
        return React.Children.only(this.props.children);
      }
    }]);
    return ScrollContainer;
  }(React.Component);

  ScrollContainer.propTypes = {
    children: PropTypes.node.isRequired,
    onScroll: PropTypes.func.isRequired,
    scrollContainer: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired
  };

  /**
   * throttle limits the number of times a function can be called to a
   * given threshhold (100ms by default). The function is always called
   * on the leading and trailing edge.
   */

  function throttle(fn) {
    var threshhold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;

    var last = void 0;
    var deferTimer = void 0;
    var throttled = function throttled() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var now = Date.now();
      if (last !== undefined && now - last < threshhold) {
        clearTimeout(deferTimer);
        deferTimer = setTimeout(function () {
          last = now;
          fn.apply(undefined, toConsumableArray(args));
        }, threshhold - (now - last));
      } else {
        last = now;
        fn.apply(undefined, toConsumableArray(args));
      }
    };

    throttled.clearTimeout = function () {
      if (deferTimer) {
        clearTimeout(deferTimer);
      }
    };

    return throttled;
  }

  var MeasurementStore = function () {
    function MeasurementStore() {
      classCallCheck(this, MeasurementStore);
      this.map = new WeakMap();
    }

    createClass(MeasurementStore, [{
      key: 'get',
      value: function get$$1(key) {
        return this.map.get(key);
      }
    }, {
      key: 'has',
      value: function has(key) {
        return this.map.has(key);
      }
    }, {
      key: 'set',
      value: function set$$1(key, value) {
        this.map.set(key, value);
      }
    }, {
      key: 'reset',
      value: function reset() {
        this.map = new WeakMap();
      }
    }]);
    return MeasurementStore;
  }();

  /**
   * Measuring scroll positions, element heights, etc is different between
   * different browsers and the window object vs other DOM nodes. These
   * utils abstract away these differences.
   */

  function getElementHeight(element) {
    return element === window ? window.innerHeight : element.clientHeight;
  }

  function getWindowScrollPos() {
    if (window.scrollY !== undefined) {
      // Modern browser
      return window.scrollY;
    }
    if (document.documentElement && document.documentElement.scrollTop !== undefined) {
      // IE support.
      return document.documentElement.scrollTop;
    }
    return 0;
  }

  function getRelativeScrollTop(element) {
    return element === window ? getWindowScrollPos() : element.scrollTop - element.getBoundingClientRect().top;
  }

  function getScrollHeight(element) {
    return element === window && document.documentElement ? document.documentElement.scrollHeight : element.scrollHeight;
  }

  function getScrollPos(element) {
    return element === window ? getWindowScrollPos() : element.scrollTop;
  }

  var DefaultLayoutSymbol = Symbol('default');
  var UniformRowLayoutSymbol = Symbol('uniformRow');

  var mindex$1 = function mindex(arr) {
    var idx = 0;
    for (var i = 0; i < arr.length; i += 1) {
      if (arr[i] < arr[idx]) {
        idx = i;
      }
    }
    return idx;
  };

  var offscreen = function offscreen(width) {
    var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;
    return {
      top: -9999,
      left: -9999,
      width: width,
      height: height
    };
  };

  var defaultLayout = (function (_ref) {
    var cache = _ref.cache,
        _ref$columnWidth = _ref.columnWidth,
        columnWidth = _ref$columnWidth === undefined ? 236 : _ref$columnWidth,
        _ref$gutter = _ref.gutter,
        gutter = _ref$gutter === undefined ? 14 : _ref$gutter,
        _ref$minCols = _ref.minCols,
        minCols = _ref$minCols === undefined ? 2 : _ref$minCols,
        width = _ref.width;
    return function (items) {
      if (width == null) {
        return items.map(function () {
          return offscreen(columnWidth);
        });
      }

      var columnWidthAndGutter = columnWidth + gutter;
      var columnCount = Math.max(Math.floor((width + gutter) / columnWidthAndGutter), minCols);
      // the total height of each column
      var heights = new Array(columnCount).fill(0);
      var centerOffset = Math.max(Math.floor((width - columnWidthAndGutter * columnCount + gutter) / 2), 0);

      return items.reduce(function (acc, item) {
        var positions = acc;
        // $FlowFixMe
        var height = cache.get(item);
        var position = void 0;

        if (height == null) {
          position = offscreen(columnWidth);
        } else {
          var heightAndGutter = height + gutter;
          var col = mindex$1(heights);
          var _top = heights[col];
          var _left = col * columnWidthAndGutter + centerOffset;

          heights[col] += heightAndGutter;
          position = { top: _top, left: _left, width: columnWidth, height: height };
        }
        positions.push(position);
        return positions;
      }, []);
    };
  });

  var offscreen$1 = function offscreen(width) {
    var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;
    return {
      top: -9999,
      left: -9999,
      width: width,
      height: height
    };
  };

  var uniformRowLayout = (function (_ref) {
    var cache = _ref.cache,
        _ref$columnWidth = _ref.columnWidth,
        columnWidth = _ref$columnWidth === undefined ? 236 : _ref$columnWidth,
        _ref$gutter = _ref.gutter,
        gutter = _ref$gutter === undefined ? 14 : _ref$gutter,
        width = _ref.width,
        _ref$minCols = _ref.minCols,
        minCols = _ref$minCols === undefined ? 3 : _ref$minCols;
    return function (items) {
      if (width == null) {
        return items.map(function () {
          return offscreen$1(columnWidth);
        });
      }

      var columnWidthAndGutter = columnWidth + gutter;
      var columnCount = Math.max(Math.floor((width + gutter) / columnWidthAndGutter), minCols);

      var positions = [];
      var heights = [];

      for (var i = 0; i < items.length; i += 1) {
        var position = void 0;
        var _height = cache.get(items[i]);

        if (_height == null) {
          position = offscreen$1(columnWidth);
        } else {
          var column = i % columnCount;
          var row = Math.floor(i / columnCount);

          if (column === 0 || _height > heights[row]) {
            heights[row] = _height;
          }

          var _top = row > 0 ? heights.slice(0, row).reduce(function (sum, y) {
            return sum + y + gutter;
          }, 0) : 0;

          position = {
            top: _top,
            left: column * columnWidthAndGutter,
            width: columnWidth,
            height: _height
          };
        }
        positions.push(position);
      }
      return positions;
    };
  });

  var mindex$2 = function mindex(arr) {
    var idx = 0;
    for (var i = 0; i < arr.length; i += 1) {
      if (arr[i] < arr[idx]) {
        idx = i;
      }
    }
    return idx;
  };

  var fullWidthLayout = (function (_ref) {
    var _ref$gutter = _ref.gutter,
        gutter = _ref$gutter === undefined ? 0 : _ref$gutter,
        cache = _ref.cache,
        _ref$minCols = _ref.minCols,
        minCols = _ref$minCols === undefined ? 2 : _ref$minCols,
        _ref$idealColumnWidth = _ref.idealColumnWidth,
        idealColumnWidth = _ref$idealColumnWidth === undefined ? 240 : _ref$idealColumnWidth,
        width = _ref.width;

    if (width == null) {
      return function (items) {
        return items.map(function () {
          return {
            top: Infinity,
            left: Infinity,
            width: Infinity,
            height: Infinity
          };
        });
      };
    }

    // "This is kind of crazy!" - you
    // Yes, indeed. The "guessing" here is meant to replicate the pass that the
    // original implementation takes with CSS.
    var colguess = Math.floor(width / idealColumnWidth);
    var columnCount = Math.max(Math.floor((width - colguess * gutter) / idealColumnWidth), minCols);
    var columnWidth = Math.floor(width / columnCount);

    return function (items) {
      // the total height of each column
      var heights = new Array(columnCount).fill(0);

      return items.reduce(function (acc, item) {
        var positions = acc;
        var height = cache.get(item);
        var position = void 0;

        if (height == null) {
          position = {
            top: Infinity,
            left: Infinity,
            width: columnWidth,
            height: Infinity
          };
        } else {
          var col = mindex$2(heights);
          var _top = heights[col];
          var _left = col * columnWidth + gutter / 2;

          heights[col] += height;
          position = {
            top: _top,
            left: _left,
            width: columnWidth - gutter,
            height: height
          };
        }

        positions.push(position);
        return positions;
      }, []);
    };
  });

  var MasonryLayout = function MasonryLayout() {
    classCallCheck(this, MasonryLayout);
  };

  var UniformRowLayout = function UniformRowLayout() {
    classCallCheck(this, UniformRowLayout);
  };

  var RESIZE_DEBOUNCE = 300;
  // Multiplied against container height.
  // The amount of extra buffer space for populating visible items.
  var VIRTUAL_BUFFER_FACTOR = 0.7;

  var layoutNumberToCssDimension = function layoutNumberToCssDimension(n) {
    return n !== Infinity ? n : undefined;
  };

  /**
   * NOTE: This is to be replaced by MasonryInfiniteBeta when it is ready
   * NOTE: Please do not modify this or make sure changes in here are also
   *       replicated in MasonryBeta.
   */

  var Masonry = function (_React$Component) {
    inherits(Masonry, _React$Component);
    createClass(Masonry, null, [{
      key: 'createMeasurementStore',
      value: function createMeasurementStore() {
        return new MeasurementStore();
      }

      /**
       * Delays resize handling in case the scroll container is still being resized.
       */

    }]);

    function Masonry(props) {
      classCallCheck(this, Masonry);

      var _this = possibleConstructorReturn(this, (Masonry.__proto__ || Object.getPrototypeOf(Masonry)).call(this, props));

      _this.handleResize = debounce(function () {
        if (_this.gridWrapper) {
          _this.setState({ width: _this.gridWrapper.clientWidth });
        }
      }, RESIZE_DEBOUNCE);
      _this.updateScrollPosition = throttle(function () {
        if (!_this.scrollContainer) {
          return;
        }
        var scrollContainer = _this.scrollContainer.getScrollContainerRef();

        if (!scrollContainer) {
          return;
        }

        _this.setState({
          scrollTop: getScrollPos(scrollContainer)
        });
      });
      _this.measureContainerAsync = debounce(function () {
        _this.measureContainer();
      }, 0);

      _this.setGridWrapperRef = function (ref) {
        _this.gridWrapper = ref;
      };

      _this.setScrollContainerRef = function (ref) {
        _this.scrollContainer = ref;
      };

      _this.fetchMore = function () {
        var loadItems = _this.props.loadItems;

        if (loadItems && typeof loadItems === 'function') {
          _this.setState({
            isFetching: true
          }, function () {
            return loadItems({ from: _this.props.items.length });
          });
        }
      };

      _this.renderMasonryComponent = function (itemData, idx, position) {
        var _this$props = _this.props,
            Component = _this$props.comp,
            virtualize = _this$props.virtualize,
            virtualBoundsTop = _this$props.virtualBoundsTop,
            virtualBoundsBottom = _this$props.virtualBoundsBottom;
        var top = position.top,
            left = position.left,
            width = position.width,
            height = position.height;


        var isVisible = void 0;
        if (_this.props.scrollContainer) {
          var virtualBuffer = _this.containerHeight * VIRTUAL_BUFFER_FACTOR;
          var offsetScrollPos = _this.state.scrollTop - _this.containerOffset;
          var viewportTop = virtualBoundsTop ? offsetScrollPos - virtualBoundsTop : offsetScrollPos - virtualBuffer;
          var viewportBottom = virtualBoundsBottom ? offsetScrollPos + _this.containerHeight + virtualBoundsBottom : offsetScrollPos + _this.containerHeight + virtualBuffer;

          isVisible = !(position.top + position.height < viewportTop || position.top > viewportBottom);
        } else {
          // if no scroll container is passed in, items should always be visible
          isVisible = true;
        }

        var itemComponent = React.createElement(
          'div',
          {
            key: 'item-' + idx,
            className: [styles$h.Masonry__Item, styles$h.Masonry__Item__Mounted].join(' '),
            'data-grid-item': true,
            style: {
              top: 0,
              left: 0,
              transform: 'translateX(' + left + 'px) translateY(' + top + 'px)',
              WebkitTransform: 'translateX(' + left + 'px) translateY(' + top + 'px)',
              width: layoutNumberToCssDimension(width),
              height: layoutNumberToCssDimension(height)
            }
          },
          React.createElement(Component, { data: itemData, itemIdx: idx, isMeasuring: false })
        );

        return virtualize ? isVisible && itemComponent || null : itemComponent;
      };

      _this.containerHeight = 0;
      _this.containerOffset = 0;

      _this.state = {
        hasPendingMeasurements: props.items.some(function (item) {
          return !!item && !props.measurementStore.has(item);
        }),
        isFetching: false,
        // eslint-disable-next-line react/no-unused-state
        items: props.items,
        scrollTop: 0,
        width: undefined
      };
      return _this;
    }

    /**
     * Adds hooks after the component mounts.
     */


    createClass(Masonry, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        var _this2 = this;

        window.addEventListener('resize', this.handleResize);

        this.measureContainer();

        var scrollTop = this.state.scrollTop;

        if (this.scrollContainer != null) {
          var _scrollContainer = this.scrollContainer.getScrollContainerRef();
          if (_scrollContainer) {
            scrollTop = getScrollPos(_scrollContainer);
          }
        }

        this.setState(function (prevState) {
          return {
            scrollTop: scrollTop,
            width: _this2.gridWrapper ? _this2.gridWrapper.clientWidth : prevState.width
          };
        });
      }
    }, {
      key: 'componentDidUpdate',
      value: function componentDidUpdate(prevProps, prevState) {
        var _this3 = this;

        var _props = this.props,
            items = _props.items,
            measurementStore = _props.measurementStore;


        this.measureContainerAsync();

        if (prevState.width != null && this.state.width !== prevState.width) {
          measurementStore.reset();
        }
        // calculate whether we still have pending measurements
        var hasPendingMeasurements = items.some(function (item) {
          return !!item && !measurementStore.has(item);
        });
        if (hasPendingMeasurements || hasPendingMeasurements !== this.state.hasPendingMeasurements || prevState.width == null) {
          this.insertAnimationFrame = requestAnimationFrame(function () {
            _this3.setState({
              hasPendingMeasurements: hasPendingMeasurements
            });
          });
        }
      }

      /**
       * Remove listeners when unmounting.
       */

    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        if (this.insertAnimationFrame) {
          cancelAnimationFrame(this.insertAnimationFrame);
        }

        // Make sure async methods are cancelled.
        this.measureContainerAsync.clearTimeout();
        this.handleResize.clearTimeout();
        this.updateScrollPosition.clearTimeout();

        window.removeEventListener('resize', this.handleResize);
      }
    }, {
      key: 'measureContainer',
      value: function measureContainer() {
        if (this.scrollContainer != null) {
          var _scrollContainer2 = this.scrollContainer;

          var scrollContainerRef = _scrollContainer2.getScrollContainerRef();
          if (scrollContainerRef) {
            this.containerHeight = getElementHeight(scrollContainerRef);
            var el = this.gridWrapper;
            if (el instanceof HTMLElement) {
              var relativeScrollTop = getRelativeScrollTop(scrollContainerRef);
              this.containerOffset = el.getBoundingClientRect().top + relativeScrollTop;
            }
          }
        }
      }

      /**
       * Clear measurements/positions and force a reflow of the entire grid.
       * Only use this if absolutely necessary - ex: We need to reflow items if the
       * number of columns we would display should change after a resize.
       */

    }, {
      key: 'reflow',
      value: function reflow() {
        this.props.measurementStore.reset();
        this.measureContainer();
        this.forceUpdate();
      }
    }, {
      key: 'render',
      value: function render() {
        var _this4 = this;

        var _props2 = this.props,
            columnWidth = _props2.columnWidth,
            Component = _props2.comp,
            flexible = _props2.flexible,
            gutter = _props2.gutterWidth,
            measurementStore = _props2.measurementStore,
            items = _props2.items,
            minCols = _props2.minCols;
        var _state = this.state,
            hasPendingMeasurements = _state.hasPendingMeasurements,
            width = _state.width;


        var layout = void 0;
        if (flexible && width !== null) {
          layout = fullWidthLayout({
            gutter: gutter,
            cache: measurementStore,
            minCols: minCols,
            idealColumnWidth: columnWidth,
            width: width
          });
        } else if (this.props.layout === UniformRowLayoutSymbol || this.props.layout instanceof UniformRowLayout) {
          layout = uniformRowLayout({
            cache: measurementStore,
            columnWidth: columnWidth,
            gutter: gutter,
            minCols: minCols,
            width: width
          });
        } else {
          layout = defaultLayout({
            cache: measurementStore,
            columnWidth: columnWidth,
            gutter: gutter,
            minCols: minCols,
            width: width
          });
        }

        var gridBody = void 0;
        if (width == null && hasPendingMeasurements) {
          // When hyrdating from a server render, we don't have the width of the grid
          // and the measurement store is empty
          gridBody = React.createElement(
            'div',
            {
              className: styles$h.Masonry,
              style: { height: 0, width: '100%' },
              ref: this.setGridWrapperRef
            },
            items.filter(function (item) {
              return item;
            }).map(function (item, i) {
              return React.createElement(
                'div',
                { // keep this in sync with renderMasonryComponent
                  className: 'static',
                  'data-grid-item': true,
                  key: i,
                  style: {
                    top: 0,
                    left: 0,
                    transform: 'translateX(0px) translateY(0px)',
                    WebkitTransform: 'translateX(0px) translateY(0px)',
                    width: flexible ? undefined : layoutNumberToCssDimension(columnWidth) // we can't set a width for server rendered flexible items
                  },
                  ref: function ref(el) {
                    if (el && !flexible) {
                      // only measure flexible items on client
                      measurementStore.set(item, el.clientHeight);
                    }
                  }
                },
                React.createElement(Component, { data: item, itemIdx: i, isMeasuring: false })
              );
            })
          );
        } else if (width == null) {
          // When the width is empty (usually after a re-mount) render an empty
          // div to collect the width for layout
          gridBody = React.createElement('div', { style: { width: '100%' }, ref: this.setGridWrapperRef });
        } else {
          // Full layout is possible
          var itemsToRender = items.filter(function (item) {
            return item && measurementStore.has(item);
          });
          var itemsToMeasure = items.filter(function (item) {
            return item && !measurementStore.has(item);
          }).slice(0, minCols);

          var positions = layout(itemsToRender);
          var measuringPositions = layout(itemsToMeasure);
          // Math.max() === -Infinity when there are no positions
          var height = positions.length ? Math.max.apply(Math, toConsumableArray(positions.map(function (pos) {
            return pos.top + pos.height;
          }))) : 0;
          gridBody = React.createElement(
            'div',
            { style: { width: '100%' }, ref: this.setGridWrapperRef },
            React.createElement(
              'div',
              { className: styles$h.Masonry, style: { height: height, width: width } },
              itemsToRender.map(function (item, i) {
                return _this4.renderMasonryComponent(item, i, positions[i]);
              })
            ),
            React.createElement(
              'div',
              { className: styles$h.Masonry, style: { width: width } },
              itemsToMeasure.map(function (data, i) {
                // itemsToMeasure is always the length of minCols, so i will always be 0..minCols.length
                // we normalize the index here relative to the item list as a whole so that itemIdx is correct
                // and so that React doesnt reuse the measurement nodes
                var measurementIndex = itemsToRender.length + i;
                var position = measuringPositions[i];
                return React.createElement(
                  'div',
                  {
                    key: 'measuring-' + measurementIndex,
                    style: {
                      visibility: 'hidden',
                      position: 'absolute',
                      top: layoutNumberToCssDimension(position.top),
                      left: layoutNumberToCssDimension(position.left),
                      width: layoutNumberToCssDimension(position.width),
                      height: layoutNumberToCssDimension(position.height)
                    },
                    ref: function ref(el) {
                      if (el) {
                        measurementStore.set(data, el.clientHeight);
                      }
                    }
                  },
                  React.createElement(Component, {
                    data: data,
                    itemIdx: measurementIndex,
                    isMeasuring: true
                  })
                );
              })
            ),
            this.scrollContainer && React.createElement(FetchItems, {
              containerHeight: this.containerHeight,
              fetchMore: this.fetchMore,
              isFetching: this.state.isFetching || this.state.hasPendingMeasurements,
              scrollHeight: height,
              scrollTop: this.state.scrollTop
            })
          );
        }

        return this.props.scrollContainer ? React.createElement(
          ScrollContainer,
          {
            ref: this.setScrollContainerRef,
            onScroll: this.updateScrollPosition,
            scrollContainer: this.props.scrollContainer
          },
          gridBody
        ) : gridBody;
      }
    }], [{
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(props, state) {
        var items = props.items,
            measurementStore = props.measurementStore;
        // whenever we're receiving new props, determine whether any items need to be measured
        // TODO - we should treat items as immutable

        var hasPendingMeasurements = items.some(function (item) {
          return !measurementStore.has(item);
        });

        // Shallow compare all items, if any change reflow the grid.
        for (var i = 0; i < items.length; i += 1) {
          // We've reached the end of our current props and everything matches.
          // If we hit this case it means we need to insert new items.
          if (state.items[i] === undefined) {
            return {
              hasPendingMeasurements: hasPendingMeasurements,
              items: items,
              isFetching: false
            };
          }

          // Reset grid items when:
          if (
          // An item object ref does not match.
          items[i] !== state.items[i] ||
          // Or less items than we currently have are passed in.
          items.length < state.items.length) {
            return {
              hasPendingMeasurements: hasPendingMeasurements,
              items: items,
              isFetching: false
            };
          }
        }

        // Reset items if new items array is empty.
        if (items.length === 0 && state.items.length > 0) {
          return {
            hasPendingMeasurements: hasPendingMeasurements,
            items: items,
            isFetching: false
          };
        }
        if (hasPendingMeasurements !== state.hasPendingMeasurements) {
          // make sure we always update hasPendingMeasurements
          return {
            hasPendingMeasurements: hasPendingMeasurements,
            items: items
          };
        }

        // Return null to indicate no change to state.
        return null;
      }
    }]);
    return Masonry;
  }(React.Component);

  Masonry.propTypes = {
    /**
     * The preferred/target item width. If `flexible` is set, the item width will
     * grow to fill column space, and shrink to fit if below min columns.
     */
    columnWidth: PropTypes.number,

    /**
     * The component to render.
     */
    /* eslint react/no-unused-prop-types: 0 */
    comp: PropTypes.func.isRequired,

    /**
     * The preferred/target item width. Item width will grow to fill
     * column space, and shrink to fit if below min columns.
     */
    flexible: PropTypes.bool,

    /**
     * The amount of space between each item.
     */
    gutterWidth: PropTypes.number,

    /**
     * An array of all objects to display in the grid.
     */
    items: PropTypes.arrayOf(PropTypes.shape({})).isRequired,

    /**
     * Measurement Store
     */
    measurementStore: PropTypes.instanceOf(MeasurementStore),

    /**
     * Layout system to use for items
     */
    layout: PropTypes.oneOfType([PropTypes.instanceOf(MasonryLayout), PropTypes.instanceOf(UniformRowLayout), PropTypes.symbol]),

    /**
     * A callback which the grid calls when we need to load more items as the user scrolls.
     * The callback should update the state of the items, and pass those in as props
     * to this component.
     */
    loadItems: PropTypes.func,

    /**
     * Minimum number of columns to display.
     */
    minCols: PropTypes.number,

    /**
     * Function that the grid calls to get the scroll container.
     * This is required if the grid is expected to be scrollable.
     */
    scrollContainer: PropTypes.func,

    /**
     * Whether or not to use actual virtualization
     */
    virtualize: PropTypes.bool
  };
  Masonry.defaultProps = {
    columnWidth: 236,
    measurementStore: new MeasurementStore(),
    minCols: 3,
    layout: DefaultLayoutSymbol,
    loadItems: function loadItems() {},
    virtualize: false
  };

  var RESIZE_DEBOUNCE$1 = 300;
  // Multiplied against container height.
  // The amount of extra buffer space for populating visible items.
  var VIRTUAL_BUFFER_FACTOR$1 = 0.7;

  var layoutNumberToCssDimension$1 = function layoutNumberToCssDimension(n) {
    return n !== Infinity ? n : undefined;
  };

  function layoutClass(_ref, _ref2) {
    var columnWidth = _ref.columnWidth,
        flexible = _ref.flexible,
        gutter = _ref.gutterWidth,
        layout = _ref.layout,
        measurementStore = _ref.measurementStore,
        minCols = _ref.minCols;
    var width = _ref2.width;

    if (flexible && width !== null) {
      return fullWidthLayout({
        gutter: gutter,
        cache: measurementStore,
        minCols: minCols,
        idealColumnWidth: columnWidth,
        width: width
      });
    }
    if (layout === UniformRowLayoutSymbol || layout instanceof UniformRowLayout) {
      return uniformRowLayout({
        cache: measurementStore,
        columnWidth: columnWidth,
        gutter: gutter,
        minCols: minCols,
        width: width
      });
    }
    return defaultLayout({
      cache: measurementStore,
      columnWidth: columnWidth,
      gutter: gutter,
      minCols: minCols,
      width: width
    });
  }

  function statesForRendering(props, state) {
    var measurementStore = props.measurementStore,
        minCols = props.minCols;
    var items = state.items;

    // Full layout is possible
    // $FlowIssue https://github.com/facebook/flow/issues/6151

    var itemsToRender = items.filter(function (item) {
      return item && measurementStore.has(item);
    });

    var layout = layoutClass(props, state);
    var renderPositions = layout(itemsToRender);
    // Math.max() === -Infinity when there are no renderPositions
    var height = renderPositions.length ? Math.max.apply(Math, toConsumableArray(renderPositions.map(function (pos) {
      return pos.top + pos.height;
    }))) : 0;

    // $FlowIssue https://github.com/facebook/flow/issues/6151
    var itemsToMeasure = items.filter(function (item) {
      return item && !measurementStore.has(item);
    }).slice(0, minCols);
    var measuringPositions = layout(itemsToMeasure);

    return {
      height: height,
      itemsToRender: itemsToRender,
      itemsToMeasure: itemsToMeasure,
      measuringPositions: measuringPositions,
      renderPositions: renderPositions
    };
  }

  /**
   * The will be the new MasonryBeta that will not have any fetching concerns.
   *
   * For now, it differs with Masonry only by not having any fetching logic.
   *
   * It is in beta until it can be battle tested.
   */

  var MasonryBeta = function (_React$Component) {
    inherits(MasonryBeta, _React$Component);

    function MasonryBeta(props) {
      classCallCheck(this, MasonryBeta);

      var _this = possibleConstructorReturn(this, (MasonryBeta.__proto__ || Object.getPrototypeOf(MasonryBeta)).call(this, props));

      _this.handleResize = debounce(function () {
        if (_this.gridWrapper) {
          _this.setState({ width: _this.gridWrapper.clientWidth });
        }
      }, RESIZE_DEBOUNCE$1);
      _this.updateScrollPosition = throttle(function () {
        if (!_this.scrollContainer) {
          return;
        }
        var scrollContainer = _this.scrollContainer.getScrollContainerRef();

        if (!scrollContainer) {
          return;
        }

        _this.setState({
          scrollTop: getScrollPos(scrollContainer)
        });

        _this.handleVirtualizationWindowUpdate();
      });
      _this.measureContainerAsync = debounce(function () {
        _this.measureContainer();
      }, 0);

      _this.setGridWrapperRef = function (ref) {
        _this.gridWrapper = ref;
      };

      _this.setScrollContainerRef = function (ref) {
        _this.scrollContainer = ref;
      };

      _this.handleVirtualizationWindowUpdate = function () {
        var _this$state = _this.state,
            height = _this$state.height,
            width = _this$state.width;

        if (typeof _this.props.onVirtualizationWindowUpdate === 'function' && _this.containerHeight) {
          var _viewport = {
            top: _this.state.scrollTop,
            left: 0,
            height: _this.containerHeight,
            width: width || 0
          };
          var _content = {
            top: _this.containerOffset,
            left: 0,
            height: height,
            width: width || 0
          };

          _this.props.onVirtualizationWindowUpdate(_content, _viewport);
        }
      };

      _this.handleOnAutoMeasuringUpdate = function (state) {
        if (_this.props.onAutoMeasuringUpdate) {
          _this.props.onAutoMeasuringUpdate(state);
        }
      };

      _this.renderMasonryComponent = function (itemData, idx, position) {
        var _this$props = _this.props,
            Component = _this$props.comp,
            virtualize = _this$props.virtualize,
            virtualBoundsTop = _this$props.virtualBoundsTop,
            virtualBoundsBottom = _this$props.virtualBoundsBottom;
        var top = position.top,
            left = position.left,
            width = position.width,
            height = position.height;


        var isVisible = void 0;
        if (_this.props.scrollContainer) {
          var virtualBuffer = _this.containerHeight * VIRTUAL_BUFFER_FACTOR$1;
          var offsetScrollPos = _this.state.scrollTop - _this.containerOffset;
          var viewportTop = virtualBoundsTop ? offsetScrollPos - virtualBoundsTop : offsetScrollPos - virtualBuffer;
          var viewportBottom = virtualBoundsBottom ? offsetScrollPos + _this.containerHeight + virtualBoundsBottom : offsetScrollPos + _this.containerHeight + virtualBuffer;

          isVisible = !(position.top + position.height < viewportTop || position.top > viewportBottom);
        } else {
          // if no scroll container is passed in, items should always be visible
          isVisible = true;
        }

        var itemComponent = React.createElement(
          'div',
          {
            key: 'item-' + idx,
            className: [styles$h.Masonry__Item, styles$h.Masonry__Item__Mounted].join(' '),
            'data-grid-item': true,
            style: {
              top: 0,
              left: 0,
              transform: 'translateX(' + left + 'px) translateY(' + top + 'px)',
              WebkitTransform: 'translateX(' + left + 'px) translateY(' + top + 'px)',
              width: layoutNumberToCssDimension$1(width),
              height: layoutNumberToCssDimension$1(height)
            }
          },
          React.createElement(Component, { data: itemData, itemIdx: idx, isMeasuring: false })
        );

        return virtualize ? isVisible && itemComponent || null : itemComponent;
      };

      _this.containerHeight = 0;
      _this.containerOffset = 0;

      _this.state = {
        hasPendingMeasurements: props.items.some(function (item) {
          return !!item && !props.measurementStore.has(item);
        }),
        height: 0,
        itemsToRender: [],
        itemsToMeasure: [],
        // eslint-disable-next-line react/no-unused-state
        items: props.items,
        measuringPositions: [],
        renderPositions: [],
        scrollTop: 0,
        width: undefined
      };
      return _this;
    }

    /**
     * Adds hooks after the component mounts.
     */

    /**
     * Delays resize handling in case the scroll container is still being resized.
     */


    createClass(MasonryBeta, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        var _this2 = this;

        window.addEventListener('resize', this.handleResize);

        this.measureContainer();

        var scrollTop = this.state.scrollTop;

        if (this.scrollContainer != null) {
          var _scrollContainer = this.scrollContainer.getScrollContainerRef();
          if (_scrollContainer) {
            scrollTop = getScrollPos(_scrollContainer);
          }
        }

        this.setState(function (prevState) {
          var width = _this2.gridWrapper ? _this2.gridWrapper.clientWidth : prevState.width;
          var stateWithWidth = _extends({}, _this2.state, { width: width });
          return _extends({
            scrollTop: scrollTop,
            width: width
          }, statesForRendering(_this2.props, stateWithWidth));
        });

        // need to make sure parent component has the correct pending measurement value
        this.handleOnAutoMeasuringUpdate(this.state.hasPendingMeasurements ? 'measuring' : 'idle');
      }
    }, {
      key: 'componentDidUpdate',
      value: function componentDidUpdate(prevProps, prevState) {
        var _this3 = this;

        var _props = this.props,
            items = _props.items,
            measurementStore = _props.measurementStore;


        this.measureContainerAsync();

        if (prevState.width != null && this.state.width !== prevState.width) {
          measurementStore.reset();
        }
        // calculate whether we still have pending measurements
        var hasPendingMeasurements = items.some(function (item) {
          return !!item && !measurementStore.has(item);
        });

        if (hasPendingMeasurements && !prevState.hasPendingMeasurements) {
          this.handleOnAutoMeasuringUpdate('measuring');
        } else if (!hasPendingMeasurements && prevState.hasPendingMeasurements) {
          this.handleOnAutoMeasuringUpdate('idle');
        }
        this.handleVirtualizationWindowUpdate();

        if (hasPendingMeasurements || hasPendingMeasurements !== this.state.hasPendingMeasurements || prevState.width == null) {
          this.insertAnimationFrame = requestAnimationFrame(function () {
            var renderingStates = statesForRendering(_this3.props, _this3.state);
            _this3.setState(_extends({
              hasPendingMeasurements: hasPendingMeasurements
            }, renderingStates));
          });
        } else if (hasPendingMeasurements || prevState.items !== items) {
          this.insertAnimationFrame = requestAnimationFrame(function () {
            var renderingStates = statesForRendering(_this3.props, _this3.state);
            _this3.setState(_extends({}, renderingStates));
          });
        }
      }

      /**
       * Remove listeners when unmounting.
       */

    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        if (this.insertAnimationFrame) {
          cancelAnimationFrame(this.insertAnimationFrame);
        }

        // Make sure async methods are cancelled.
        this.measureContainerAsync.clearTimeout();
        this.handleResize.clearTimeout();
        this.updateScrollPosition.clearTimeout();

        window.removeEventListener('resize', this.handleResize);
      }
    }, {
      key: 'measureContainer',
      value: function measureContainer() {
        if (this.scrollContainer != null) {
          var _scrollContainer2 = this.scrollContainer;

          var scrollContainerRef = _scrollContainer2.getScrollContainerRef();
          if (scrollContainerRef) {
            this.containerHeight = getElementHeight(scrollContainerRef);
            var el = this.gridWrapper;
            if (el instanceof HTMLElement) {
              var relativeScrollTop = getRelativeScrollTop(scrollContainerRef);
              this.containerOffset = el.getBoundingClientRect().top + relativeScrollTop;
            }
          }
        }
      }

      /**
       * Clear measurements/positions and force a reflow of the entire grid.
       * Only use this if absolutely necessary - ex: We need to reflow items if the
       * number of columns we would display should change after a resize.
       */

    }, {
      key: 'reflow',
      value: function reflow() {
        this.props.measurementStore.reset();
        this.measureContainer();
        this.handleVirtualizationWindowUpdate();
        this.forceUpdate();
      }
    }, {
      key: 'render',
      value: function render() {
        var _this4 = this;

        var _props2 = this.props,
            columnWidth = _props2.columnWidth,
            Component = _props2.comp,
            flexible = _props2.flexible,
            measurementStore = _props2.measurementStore,
            items = _props2.items;
        var _state = this.state,
            hasPendingMeasurements = _state.hasPendingMeasurements,
            height = _state.height,
            itemsToMeasure = _state.itemsToMeasure,
            itemsToRender = _state.itemsToRender,
            measuringPositions = _state.measuringPositions,
            renderPositions = _state.renderPositions,
            width = _state.width;

        var gridBody = void 0;
        if (width == null && hasPendingMeasurements) {
          // When hyrdating from a server render, we don't have the width of the grid
          // and the measurement store is empty
          gridBody = React.createElement(
            'div',
            {
              className: styles$h.Masonry,
              style: { height: 0, width: '100%' },
              ref: this.setGridWrapperRef
            },
            items.filter(function (item) {
              return item;
            }).map(function (item, i) {
              return React.createElement(
                'div',
                { // keep this in sync with renderMasonryComponent
                  className: 'static',
                  'data-grid-item': true,
                  key: i,
                  style: {
                    top: 0,
                    left: 0,
                    transform: 'translateX(0px) translateY(0px)',
                    WebkitTransform: 'translateX(0px) translateY(0px)',
                    width: flexible ? undefined : layoutNumberToCssDimension$1(columnWidth) // we can't set a width for server rendered flexible items
                  },
                  ref: function ref(el) {
                    if (el && !flexible) {
                      // only measure flexible items on client
                      measurementStore.set(item, el.clientHeight);
                    }
                  }
                },
                React.createElement(Component, { data: item, itemIdx: i, isMeasuring: false })
              );
            })
          );
        } else if (width == null) {
          // When the width is empty (usually after a re-mount) render an empty
          // div to collect the width for layout
          gridBody = React.createElement('div', { style: { width: '100%' }, ref: this.setGridWrapperRef });
        } else {
          gridBody = React.createElement(
            'div',
            { style: { width: '100%' }, ref: this.setGridWrapperRef },
            React.createElement(
              'div',
              { className: styles$h.Masonry, style: { height: height, width: width } },
              itemsToRender.map(function (item, i) {
                return (
                  // $FlowFixMe this is the right definition, it an Array<T>
                  _this4.renderMasonryComponent(item, i, renderPositions[i])
                );
              })
            ),
            React.createElement(
              'div',
              { className: styles$h.Masonry, style: { width: width } },
              itemsToMeasure.map(function (data, i) {
                // itemsToMeasure is always the length of minCols, so i will always be 0..minCols.length
                // we normalize the index here relative to the item list as a whole so that itemIdx is correct
                // and so that React doesnt reuse the measurement nodes
                var measurementIndex = itemsToRender.length + i;
                var position = measuringPositions[i];
                return React.createElement(
                  'div',
                  {
                    key: 'measuring-' + measurementIndex,
                    style: {
                      visibility: 'hidden',
                      position: 'absolute',
                      top: layoutNumberToCssDimension$1(position.top),
                      left: layoutNumberToCssDimension$1(position.left),
                      width: layoutNumberToCssDimension$1(position.width),
                      height: layoutNumberToCssDimension$1(position.height)
                    },
                    ref: function ref(el) {
                      if (el) {
                        measurementStore.set(data, el.clientHeight);
                      }
                    }
                  },
                  React.createElement(Component, {
                    data: data,
                    itemIdx: measurementIndex,
                    isMeasuring: true
                  })
                );
              })
            )
          );
        }

        return this.props.scrollContainer ? React.createElement(
          ScrollContainer,
          {
            ref: this.setScrollContainerRef,
            onScroll: this.updateScrollPosition,
            scrollContainer: this.props.scrollContainer
          },
          gridBody
        ) : gridBody;
      }
    }], [{
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(props, state) {
        var items = props.items,
            measurementStore = props.measurementStore;
        // whenever we're receiving new props, determine whether any items need to be measured
        // TODO - we should treat items as immutable

        var hasPendingMeasurements = items.some(function (item) {
          return item && !measurementStore.has(item);
        });

        var newState = _extends({}, state, {
          hasPendingMeasurements: hasPendingMeasurements,
          items: items
        });

        // Shallow compare all items, if any change reflow the grid.
        for (var i = 0; i < items.length; i += 1) {
          // We've reached the end of our current props and everything matches.
          // If we hit this case it means we need to insert new items.
          if (state.items[i] === undefined) {
            return _extends({
              hasPendingMeasurements: hasPendingMeasurements,
              items: items
            }, statesForRendering(props, newState));
          }

          // Reset grid items when:
          if (
          // An item object ref does not match.
          items[i] !== state.items[i] ||
          // Or less items than we currently have are passed in.
          items.length < state.items.length) {
            return _extends({
              hasPendingMeasurements: hasPendingMeasurements,
              items: items
            }, statesForRendering(props, newState));
          }
        }

        // Reset items if new items array is empty.
        if (items.length === 0 && state.items.length > 0) {
          return _extends({
            hasPendingMeasurements: hasPendingMeasurements,
            items: items
          }, statesForRendering(props, newState));
        }
        if (hasPendingMeasurements !== state.hasPendingMeasurements) {
          // make sure we always update hasPendingMeasurements
          return _extends({
            hasPendingMeasurements: hasPendingMeasurements,
            items: items
          }, statesForRendering(props, newState));
        }

        // Return null to indicate no change to state.
        return null;
      }
    }]);
    return MasonryBeta;
  }(React.Component);

  MasonryBeta.propTypes = {
    /**
     * The preferred/target item width. If `flexible` is set, the item width will
     * grow to fill column space, and shrink to fit if below min columns.
     */
    columnWidth: PropTypes.number,

    /**
     * The component to render.
     */
    /* eslint react/no-unused-prop-types: 0 */
    comp: PropTypes.func.isRequired,

    /**
     * The preferred/target item width. Item width will grow to fill
     * column space, and shrink to fit if below min columns.
     */
    flexible: PropTypes.bool,

    /**
     * The amount of space between each item.
     */
    gutterWidth: PropTypes.number,

    /**
     * An array of all objects to display in the grid.
     */
    items: PropTypes.arrayOf(PropTypes.shape({})).isRequired,

    /**
     * Measurement Store
     */
    measurementStore: PropTypes.instanceOf(MeasurementStore),

    /**
     * Layout system to use for items
     */
    layout: PropTypes.oneOfType([PropTypes.instanceOf(MasonryLayout), PropTypes.instanceOf(UniformRowLayout), PropTypes.symbol]),

    /**
     * A callback which the grid calls when we need to load more items as the user scrolls.
     * The callback should update the state of the items, and pass those in as props
     * to this component.
     */
    loadItems: PropTypes.func,

    /**
     * Minimum number of columns to display.
     */
    minCols: PropTypes.number,

    /**
     * Function that the grid calls to get the scroll container.
     * This is required if the grid is expected to be scrollable.
     */
    scrollContainer: PropTypes.func,

    /**
     * Whether or not to use actual virtualization
     */
    virtualize: PropTypes.bool
  };
  MasonryBeta.defaultProps = {
    columnWidth: 236,
    measurementStore: new MeasurementStore(),
    minCols: 3,
    layout: DefaultLayoutSymbol,
    loadItems: function loadItems() {},
    virtualize: false
  };

  /**
   * This MasonryInfiniteBeta is backward compatible with Masonry and
   * serves to help with migrating to a Masrony that doesn't have
   * the scrol fetch concerns.
   *
   * It is in beta so that it can be battle tested.
   *
   */
  var MasonryInfiniteBeta = function (_React$Component) {
    inherits(MasonryInfiniteBeta, _React$Component);
    createClass(MasonryInfiniteBeta, null, [{
      key: 'createMeasurementStore',
      value: function createMeasurementStore() {
        return new MeasurementStore();
      }
    }]);

    function MasonryInfiniteBeta(props) {
      classCallCheck(this, MasonryInfiniteBeta);

      var _this = possibleConstructorReturn(this, (MasonryInfiniteBeta.__proto__ || Object.getPrototypeOf(MasonryInfiniteBeta)).call(this, props));

      _this.onVirtualizationWindowUpdate = function (content, viewport) {
        var _this$state = _this.state,
            containerHeight = _this$state.containerHeight,
            scrollTop = _this$state.scrollTop,
            scrollHeight = _this$state.scrollHeight;

        if (viewport.height !== containerHeight || viewport.top !== scrollTop || content.height !== scrollHeight) {
          _this.setState({
            containerHeight: viewport.height,
            scrollTop: viewport.top,
            scrollHeight: content.height
          });
        }
      };

      _this.setRef = function (ref) {
        if (ref) {
          _this.gridRef = ref;
        }
      };

      _this.fetchMore = function () {
        var loadItems = _this.props.loadItems;

        if (loadItems && typeof loadItems === 'function') {
          _this.setState({
            isFetching: true
          }, function () {
            return loadItems({ from: _this.props.items.length });
          });
        }
      };

      _this.handleOnAutoMeasuringUpdate = function (state) {
        var hasPendingMeasurements = state === 'measuring';
        if (_this.state.hasPendingMeasurements !== hasPendingMeasurements) {
          _this.setState({ hasPendingMeasurements: hasPendingMeasurements });
        }

        if (typeof _this.props.onAutoMeasuringUpdate === 'function') {
          _this.props.onAutoMeasuringUpdate(state);
        }
      };

      _this.reflow = function () {
        if (_this.gridRef) {
          _this.gridRef.reflow();
        }
      };

      _this.handleResize = function () {
        if (_this.gridRef) {
          _this.gridRef.handleResize();
        }
      };

      _this.state = {
        containerHeight: 0,
        hasPendingMeasurements: false,
        isFetching: false,
        // eslint-disable-next-line react/no-unused-state
        items: props.items,
        scrollTop: 0,
        scrollHeight: 0
      };
      return _this;
    }

    /**
     * Content layer and Viewport layer is as defined in Collection.
     */


    createClass(MasonryInfiniteBeta, [{
      key: 'render',
      value: function render() {
        return this.props.scrollContainer ? React.createElement(
          React.Fragment,
          null,
          React.createElement(FetchItems, {
            containerHeight: this.state.containerHeight,
            fetchMore: this.fetchMore,
            isFetching: this.state.isFetching || this.state.hasPendingMeasurements,
            scrollHeight: this.state.scrollHeight,
            scrollTop: this.state.scrollTop
          }),
          React.createElement(MasonryBeta, _extends({}, this.props, {
            onVirtualizationWindowUpdate: this.onVirtualizationWindowUpdate,
            onAutoMeasuringUpdate: this.handleOnAutoMeasuringUpdate,
            ref: this.setRef
          }))
        ) : React.createElement(MasonryBeta, _extends({}, this.props, { ref: this.setRef }));
      }
    }], [{
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(props, state) {
        var items = props.items;

        // assume immutable items

        if (props.items !== state.items) {
          return {
            items: items,
            isFetching: false
          };
        }

        // Return null to indicate no change to state.
        return null;
      }
    }]);
    return MasonryInfiniteBeta;
  }(React.Component);

  MasonryInfiniteBeta.defaultProps = MasonryBeta.defaultProps;

  var NoScrollBehavior = function (_React$Component) {
    inherits(NoScrollBehavior, _React$Component);

    function NoScrollBehavior(props) {
      classCallCheck(this, NoScrollBehavior);

      var _this = possibleConstructorReturn(this, (NoScrollBehavior.__proto__ || Object.getPrototypeOf(NoScrollBehavior)).call(this, props));

      _this.prevOverflow = null;
      return _this;
    }

    createClass(NoScrollBehavior, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        if (typeof window !== 'undefined') {
          this.prevOverflow = window.document.body.style.overflow;
          window.document.body.style.overflow = 'hidden';
        }
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        if (typeof window !== 'undefined') {
          window.document.body.style.overflow = this.prevOverflow;
        }
      }
    }, {
      key: 'render',
      value: function render() {
        return this.props.children;
      }
    }]);
    return NoScrollBehavior;
  }(React.Component);

  function queryFocusableAll(el) {
    var selector = ['a[href]', 'area[href]', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'iframe', 'object', 'embed', '[tabindex="-1"]', '[tabindex="0"]', '[contenteditable]', 'audio[controls]', 'video[controls]', 'summary'].join(',');
    return el.querySelectorAll(selector);
  }

  var focusElement = function focusElement(el) {
    if (typeof el.focus === 'function') {
      el.focus();
    }
  };

  var TrapFocusBehavior = function (_React$Component) {
    inherits(TrapFocusBehavior, _React$Component);

    function TrapFocusBehavior() {
      var _ref;

      var _temp, _this, _ret;

      classCallCheck(this, TrapFocusBehavior);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TrapFocusBehavior.__proto__ || Object.getPrototypeOf(TrapFocusBehavior)).call.apply(_ref, [this].concat(args))), _this), _this.setElRef = function (el) {
        if (el) {
          _this.el = el;
        }
      }, _this.handleFocus = function (event) {
        if (!_this.el || event.target instanceof Node && _this.el.contains(event.target)) {
          return;
        }

        event.stopPropagation();
        event.preventDefault();
        _this.focusFirstChild();
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(TrapFocusBehavior, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        this.previouslyFocusedEl = document.activeElement;
        this.focusFirstChild();
        document.addEventListener('focus', this.handleFocus, true);
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        document.removeEventListener('focus', this.handleFocus, true);
        if (this.previouslyFocusedEl) {
          focusElement(this.previouslyFocusedEl);
        }
      }
    }, {
      key: 'focusFirstChild',
      value: function focusFirstChild() {
        var el = this.el;

        if (el) {
          focusElement(queryFocusableAll(el)[0]);
        }
      }
    }, {
      key: 'render',
      value: function render() {
        return React.createElement(
          'div',
          { ref: this.setElRef },
          this.props.children
        );
      }
    }]);
    return TrapFocusBehavior;
  }(React.Component);

  var styles$i = { "Backdrop": "_uj _4h _4m _4j _4k _4l _zb _3d", "container": "_uk _4g _4q _4s _5a _4m _4j _50 _y8", "wrapper": "_ul _4f _49 _4s _37 _2y _70 _6y" };

  var SIZE_WIDTH_MAP$1 = {
    sm: 414,
    md: 544,
    lg: 804
  };

  var ESCAPE_KEY_CODE$1 = 27;

  var Backdrop = function Backdrop(_ref) {
    var children = _ref.children;
    return React.createElement(
      React.Fragment,
      null,
      React.createElement('div', { className: styles$i.Backdrop }),
      children
    );
  };

  var Modal = function (_React$Component) {
    inherits(Modal, _React$Component);

    function Modal() {
      var _ref2;

      var _temp, _this, _ret;

      classCallCheck(this, Modal);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref2 = Modal.__proto__ || Object.getPrototypeOf(Modal)).call.apply(_ref2, [this].concat(args))), _this), _this.handleOutsideClick = function () {
        _this.props.onDismiss();
      }, _this.handleCloseClick = function () {
        _this.props.onDismiss();
      }, _this.handleKeyUp = function (event) {
        if (event.keyCode === ESCAPE_KEY_CODE$1) {
          _this.props.onDismiss();
        }
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(Modal, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        window.addEventListener('keyup', this.handleKeyUp);
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        window.removeEventListener('keyup', this.handleKeyUp);
      }
    }, {
      key: 'render',
      value: function render() {
        var _props = this.props,
            accessibilityCloseLabel = _props.accessibilityCloseLabel,
            accessibilityModalLabel = _props.accessibilityModalLabel,
            children = _props.children,
            footer = _props.footer,
            heading = _props.heading,
            _props$role = _props.role,
            role = _props$role === undefined ? 'dialog' : _props$role,
            _props$size = _props.size,
            size = _props$size === undefined ? 'sm' : _props$size;

        var width = SIZE_WIDTH_MAP$1[size];

        return React.createElement(
          NoScrollBehavior,
          null,
          React.createElement(
            TrapFocusBehavior,
            null,
            React.createElement(
              'div',
              {
                'aria-label': accessibilityModalLabel,
                className: styles$i.container,
                role: role
              },
              React.createElement(
                Backdrop,
                null,
                React.createElement(
                  OutsideEventBehavior,
                  { onClick: this.handleOutsideClick },
                  React.createElement(
                    'div',
                    { className: styles$i.wrapper, tabIndex: -1, style: { width: width } },
                    React.createElement(
                      Box,
                      {
                        flex: 'grow',
                        position: 'relative',
                        display: 'flex',
                        direction: 'column',
                        width: '100%'
                      },
                      React.createElement(
                        Box,
                        { fit: true },
                        role === 'dialog' ? React.createElement(
                          Box,
                          {
                            dangerouslySetInlineStyle: {
                              __style: { paddingLeft: 50, paddingRight: 50 }
                            },
                            display: 'flex',
                            justifyContent: 'center',
                            paddingY: 5
                          },
                          React.createElement(
                            Heading,
                            { size: 'xs', accessibilityLevel: 1 },
                            heading
                          )
                        ) : React.createElement(
                          Box,
                          { display: 'flex', padding: 4 },
                          React.createElement(
                            Heading,
                            { size: 'sm', accessibilityLevel: 1 },
                            heading
                          )
                        ),
                        role === 'dialog' && React.createElement(
                          Box,
                          { padding: 2, position: 'absolute', top: true, right: true },
                          React.createElement(IconButton, {
                            accessibilityLabel: accessibilityCloseLabel,
                            icon: 'cancel',
                            onClick: this.handleCloseClick
                          })
                        ),
                        role === 'dialog' && React.createElement(Divider, null)
                      ),
                      React.createElement(
                        Box,
                        { flex: 'grow', overflow: 'auto', position: 'relative' },
                        children
                      ),
                      React.createElement(
                        Box,
                        { fit: true },
                        footer && React.createElement(
                          Box,
                          null,
                          role === 'dialog' && React.createElement(Divider, null),
                          React.createElement(
                            Box,
                            { padding: 4 },
                            footer
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        );
      }
    }]);
    return Modal;
  }(React.Component);

  Modal.propTypes = {
    children: PropTypes.node,
    accessibilityCloseLabel: PropTypes.string.isRequired,
    footer: PropTypes.node,
    heading: PropTypes.string.isRequired,
    accessibilityModalLabel: PropTypes.string.isRequired,
    onDismiss: PropTypes.func,
    role: PropTypes.oneOf(['alertdialog', 'dialog']),
    size: PropTypes.oneOf(['sm', 'md', 'lg'])
  };

  var styles$j = { "innerCircle": "_uu _4q", "PulseAnimation": "_uv", "outerCircle": "_uw", "AppearAnimation": "_ux" };

  function Pulsar(props) {
    var paused = props.paused,
        _props$size = props.size,
        size = _props$size === undefined ? 135 : _props$size;


    return React.createElement(
      Box,
      {
        dangerouslySetInlineStyle: {
          __style: {
            animationIterationCount: paused ? 0 : 'infinite',
            outline: 'none',
            boxShadow: 'none'
          }
        },
        display: paused ? 'none' : 'block',
        height: size,
        position: 'relative',
        width: size
      },
      React.createElement(
        'div',
        { className: styles$j.innerCircle },
        React.createElement('div', { className: styles$j.outerCircle })
      )
    );
  }

  Pulsar.propTypes = {
    paused: PropTypes.bool,
    size: PropTypes.number
  };

  var styles$k = { "RadioButton": "_uy _45 _4q _2w _4s _50 _5a", "RadioButtonSm": "_uz", "RadioButtonMd": "_v0", "RadioButtonIsFocused": "_v1 _xv", "RadioButtonWhiteBg": "_v2 _37", "RadioButtonLightGrayBg": "_v3 _39", "Input": "_v4 _4h _od", "InputEnabled": "_v5 _z9", "InputSm": "_v6", "InputMd": "_v7", "Check": "_v8 _2w", "CheckEnabled": "_v9 _3d", "CheckDisabled": "_va _3b" };

  var RadioButton = function (_React$Component) {
    inherits(RadioButton, _React$Component);

    function RadioButton() {
      var _ref;

      var _temp, _this, _ret;

      classCallCheck(this, RadioButton);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = RadioButton.__proto__ || Object.getPrototypeOf(RadioButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        focused: false
      }, _this.handleChange = function (event) {
        var checked = event.target.checked;

        _this.props.onChange({ checked: checked, event: event });
      }, _this.handleBlur = function () {
        return _this.setState({ focused: false });
      }, _this.handleFocus = function () {
        _this.setState({ focused: true });
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(RadioButton, [{
      key: 'render',
      value: function render() {
        var _classnames, _classnames2, _classnames3;

        var _props = this.props,
            checked = _props.checked,
            disabled = _props.disabled,
            id = _props.id,
            name = _props.name,
            size = _props.size,
            value = _props.value;

        return React.createElement(
          'div',
          {
            className: classnames(styles$k.RadioButton, (_classnames = {}, defineProperty(_classnames, styles$k.RadioButtonIsFocused, this.state.focused), defineProperty(_classnames, styles$k.RadioButtonSm, size === 'sm'), defineProperty(_classnames, styles$k.RadioButtonMd, size === 'md'), defineProperty(_classnames, styles$k.RadioButtonWhiteBg, !disabled || checked), defineProperty(_classnames, styles$k.RadioButtonLightGrayBg, disabled && !checked), _classnames))
          },
          React.createElement('input', {
            checked: checked,
            className: classnames(styles$k.Input, (_classnames2 = {}, defineProperty(_classnames2, styles$k.InputEnabled, !disabled), defineProperty(_classnames2, styles$k.InputSm, size === 'sm'), defineProperty(_classnames2, styles$k.InputMd, size === 'md'), _classnames2)),
            disabled: disabled,
            id: id,
            name: name,
            onBlur: this.handleBlur,
            onChange: this.handleChange,
            onFocus: this.handleFocus,
            type: 'radio',
            value: value
          }),
          checked && React.createElement('div', {
            className: classnames(styles$k.Check, (_classnames3 = {}, defineProperty(_classnames3, styles$k.CheckSm, size === 'sm'), defineProperty(_classnames3, styles$k.CheckMd, size === 'md'), defineProperty(_classnames3, styles$k.CheckEnabled, !disabled), defineProperty(_classnames3, styles$k.CheckDisabled, disabled), _classnames3))
          })
        );
      }
    }]);
    return RadioButton;
  }(React.Component);

  RadioButton.propTypes = {
    checked: PropTypes.bool,
    disabled: PropTypes.bool,
    id: PropTypes.string.isRequired,
    name: PropTypes.string,
    onChange: PropTypes.func.isRequired,
    value: PropTypes.string.isRequired,
    size: PropTypes.oneOf(['sm', 'md'])
  };
  RadioButton.defaultProps = {
    checked: false,
    disabled: false,
    size: 'md'
  };

  var ScrollFetch = function (_React$PureComponent) {
    inherits(ScrollFetch, _React$PureComponent);

    function ScrollFetch() {
      var _ref;

      var _temp, _this, _ret;

      classCallCheck(this, ScrollFetch);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ScrollFetch.__proto__ || Object.getPrototypeOf(ScrollFetch)).call.apply(_ref, [this].concat(args))), _this), _this.updatePosition = throttle(function () {
        _this.setState(_this.getScrollState());
      }), _this.state = {
        containerHeight: 0,
        scrollHeight: 0,
        scrollTop: 0
      }, _this.getScrollHeight = function () {
        var container = _this.props.container;

        if (!container) {
          return 0;
        }
        return getScrollHeight(container);
      }, _temp), possibleConstructorReturn(_this, _ret);
    }
    /**
     * Fetches additional items if needed.
     */


    createClass(ScrollFetch, [{
      key: 'componentDidMount',


      /**
       * Adds scroll listener after the component mounts.
       */
      value: function componentDidMount() {
        var _this2 = this;

        var container = this.props.container;

        if (!container) {
          return;
        }
        setTimeout(function () {
          _this2.setState(_extends({
            containerHeight: getElementHeight(container)
          }, _this2.getScrollState()));
        });
      }

      /**
       * Update scroll buffer and check after the component updates.
       */

    }, {
      key: 'componentDidUpdate',
      value: function componentDidUpdate() {
        // setTimeout so the parent component can calculate renderHeight().
        this.updatePosition();
      }

      /**
       * Returns the scrollable content height.
       */

    }, {
      key: 'getScrollState',
      value: function getScrollState() {
        var _props = this.props,
            container = _props.container,
            renderHeight = _props.renderHeight;

        if (!container) {
          return null;
        }
        var scrollHeight = renderHeight || this.getScrollHeight;

        return {
          scrollHeight: scrollHeight(),
          scrollTop: getScrollPos(container)
        };
      }
    }, {
      key: 'render',
      value: function render() {
        var _state = this.state,
            containerHeight = _state.containerHeight,
            scrollHeight = _state.scrollHeight,
            scrollTop = _state.scrollTop;
        var _props2 = this.props,
            container = _props2.container,
            fetchMore = _props2.fetchMore,
            isAtEnd = _props2.isAtEnd,
            isFetching = _props2.isFetching;


        var props = {
          containerHeight: containerHeight,
          fetchMore: fetchMore,
          isAtEnd: isAtEnd,
          isFetching: isFetching,
          scrollHeight: scrollHeight,
          scrollTop: scrollTop
        };

        if (!container || isAtEnd) {
          return null;
        }
        return React.createElement(
          ScrollContainer,
          {
            onScroll: this.updatePosition,
            scrollContainer: container
          },
          React.createElement(FetchItems, props)
        );
      }
    }]);
    return ScrollFetch;
  }(React.PureComponent);


  ScrollFetch.propTypes = {
    /**
     * The scroll container to use. Defaults to window.
     */
    container: PropTypes.shape({
      addEventListener: PropTypes.func,
      removeEventListener: PropTypes.func
    }),
    renderHeight: PropTypes.func,
    isAtEnd: PropTypes.bool,
    isFetching: PropTypes.bool,
    fetchMore: PropTypes.func
  };

  ScrollFetch.defaultProps = {
    container: typeof window !== 'undefined' ? window : null
  };

  var styles$l = { "input": "_vb _xu _2q _4q _4o _3c _w7 _0 _1 _2 _wa _6 _39 _y8", "clear": "_vc _33 _z9 _6s _6r _4f" };

  var SearchField = function (_React$Component) {
    inherits(SearchField, _React$Component);

    function SearchField() {
      var _ref;

      var _temp, _this, _ret;

      classCallCheck(this, SearchField);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = SearchField.__proto__ || Object.getPrototypeOf(SearchField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        focused: false,
        hovered: false
      }, _this.handleChange = function (event) {
        _this.props.onChange({
          value: event.currentTarget.value,
          syntheticEvent: event
        });
      }, _this.handleClear = function (event) {
        _this.props.onChange({
          value: '',
          syntheticEvent: event
        });
      }, _this.handleMouseEnter = function () {
        return _this.setState({ hovered: true });
      }, _this.handleMouseLeave = function () {
        return _this.setState({ hovered: false });
      }, _this.handleFocus = function (event) {
        _this.setState({ focused: true });

        if (_this.props.onFocus) {
          _this.props.onFocus({
            value: event.currentTarget.value,
            syntheticEvent: event
          });
        }
      }, _this.handleBlur = function (event) {
        _this.setState({ focused: false });

        if (_this.props.onBlur) {
          _this.props.onBlur({ event: event });
        }
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(SearchField, [{
      key: 'render',
      value: function render() {
        var _props = this.props,
            accessibilityLabel = _props.accessibilityLabel,
            autoComplete = _props.autoComplete,
            id = _props.id,
            placeholder = _props.placeholder,
            value = _props.value;

        // This mirrors the built in browser behavior. If there's a value, show the
        // clear button if you're hovering or if you've focused on the field

        var showClear = (this.state.focused || this.state.hovered) && value && value.length > 0;

        return React.createElement(
          Box,
          {
            display: 'flex',
            position: 'relative',
            alignItems: 'center',
            onMouseEnter: this.handleMouseEnter,
            onMouseLeave: this.handleMouseLeave,
            onFocus: this.handleFocus,
            onBlur: this.handleBlur,
            color: 'white'
          },
          React.createElement(
            Box,
            {
              dangerouslySetInlineStyle: {
                __style: {
                  pointerEvents: 'none',
                  // Added the following lines for Safari support
                  top: '50%',
                  transform: 'translateY(-50%)'
                }
              },
              position: 'absolute',
              left: true,
              paddingX: 4
            },
            React.createElement(Icon, { icon: 'search', accessibilityLabel: '' })
          ),
          React.createElement('input', {
            'aria-label': accessibilityLabel,
            autoComplete: autoComplete,
            className: styles$l.input,
            id: id,
            onChange: this.handleChange,
            placeholder: placeholder,
            role: 'searchbox',
            type: 'search',
            value: value
          }),
          showClear && React.createElement(
            Box,
            { position: 'absolute', right: true, top: true },
            React.createElement(
              'button',
              {
                className: styles$l.clear,
                onClick: this.handleClear,
                tabIndex: -1,
                type: 'button'
              },
              React.createElement(Icon, { icon: 'clear', accessibilityLabel: '' })
            )
          )
        );
      }
    }]);
    return SearchField;
  }(React.Component);

  SearchField.propTypes = {
    accessibilityLabel: PropTypes.string.isRequired,
    autoComplete: PropTypes.oneOf(['on', 'off', 'username', 'name']),
    id: PropTypes.string.isRequired,
    onBlur: PropTypes.func,
    onChange: PropTypes.func.isRequired,
    onFocus: PropTypes.func,
    placeholder: PropTypes.string,
    value: PropTypes.string
  };

  var styles$m = { "SegmentedControl": "_vd _4q _39 _4s _5b", "md": "_ve _4o", "lg": "_vf _4p", "item": "_vg _xu _5j _od _33 _z9", "itemIsNotSelected": "_vh", "itemIsSelected": "_vi _37" };

  function SegmentedControl(props) {
    var _classnames;

    var items = props.items,
        onChange = props.onChange,
        selectedItemIndex = props.selectedItemIndex,
        _props$size = props.size,
        size = _props$size === undefined ? 'md' : _props$size;

    return React.createElement(
      'div',
      {
        className: classnames(styles$m.SegmentedControl, (_classnames = {}, defineProperty(_classnames, styles$m.md, size === 'md'), defineProperty(_classnames, styles$m.lg, size === 'lg'), _classnames)),
        role: 'tablist'
      },
      items.map(function (item, i) {
        var _classnames2;

        var isSelected = i === selectedItemIndex;
        var cs = classnames(styles$m.item, (_classnames2 = {}, defineProperty(_classnames2, styles$m.itemIsNotSelected, !isSelected), defineProperty(_classnames2, styles$m.itemIsSelected, isSelected), _classnames2));
        return React.createElement(
          'button',
          {
            'aria-selected': isSelected,
            className: cs,
            key: i,
            onClick: function onClick(e) {
              return onChange({ event: e, activeIndex: i });
            },
            role: 'tab',
            type: 'button'
          },
          typeof item === 'string' ? React.createElement(
            Text,
            {
              bold: true,
              color: isSelected ? 'darkGray' : 'gray',
              align: 'center',
              size: size
            },
            item
          ) : React.createElement(
            Box,
            { display: 'flex', justifyContent: 'center' },
            item
          )
        );
      })
    );
  }

  SegmentedControl.propTypes = {
    items: PropTypes.arrayOf(PropTypes.node).isRequired,
    onChange: PropTypes.func.isRequired,
    selectedItemIndex: PropTypes.number.isRequired
  };

  var styles$n = { "select": "_vj _xu _w7 _0 _1 _2 _wa _3c _z9 _4f _4o _42 _y8", "normal": "_vk", "errored": "_vl", "enabled": "_vm _3c _37", "disabled": "_vn _3a _39" };

  var SelectList = function (_React$Component) {
    inherits(SelectList, _React$Component);

    function SelectList() {
      var _ref;

      var _temp, _this, _ret;

      classCallCheck(this, SelectList);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = SelectList.__proto__ || Object.getPrototypeOf(SelectList)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        focused: false,
        errorIsOpen: false
      }, _this.handleOnChange = function (event) {
        if (event.target instanceof HTMLSelectElement && _this.props.value !== event.target.value) {
          _this.props.onChange({ event: event, value: event.target.value });

          if (_this.props.errorMessage) {
            _this.setState({ errorIsOpen: false });
          }
        }
      }, _this.handleBlur = function () {
        if (_this.props.errorMessage) {
          _this.setState({ errorIsOpen: false });
        }
      }, _this.handleFocus = function () {
        if (_this.props.errorMessage) {
          _this.setState({ errorIsOpen: true });
        }
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(SelectList, [{
      key: 'render',
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            disabled = _props.disabled,
            errorMessage = _props.errorMessage,
            id = _props.id,
            idealErrorDirection = _props.idealErrorDirection,
            name = _props.name,
            options = _props.options,
            placeholder = _props.placeholder,
            value = _props.value;


        var classes = classnames(styles$n.select, disabled ? styles$n.disabled : styles$n.enabled, errorMessage ? styles$n.errored : styles$n.normal);

        return React.createElement(
          Box,
          {
            color: disabled ? 'lightGray' : 'white',
            dangerouslySetInlineStyle: { __style: { borderRadius: 4 } },
            display: 'flex',
            position: 'relative',
            width: '100%'
          },
          React.createElement(
            Box,
            {
              alignItems: 'center',
              bottom: true,
              dangerouslySetInlineStyle: {
                __style: { paddingRight: 14, paddingTop: 2 }
              },
              display: 'flex',
              position: 'absolute',
              right: true,
              top: true
            },
            React.createElement(Icon, {
              icon: 'arrow-down',
              size: 12,
              color: disabled ? 'gray' : 'darkGray',
              accessibilityLabel: ''
            })
          ),
          React.createElement(
            'select',
            {
              'aria-describedby': errorMessage && this.state.focused ? id + '-gestalt-error' : null,
              'aria-invalid': errorMessage ? 'true' : 'false',
              className: classes,
              disabled: disabled,
              id: id,
              name: name,
              onBlur: this.handleBlur,
              onFocus: this.handleFocus,
              onChange: this.handleOnChange,
              ref: function ref(c) {
                _this2.select = c;
              },
              value: value
            },
            placeholder && !value && React.createElement(
              'option',
              { selected: true, disabled: true, value: true, hidden: true },
              placeholder
            ),
            options.map(function (option) {
              return React.createElement(
                'option',
                { key: option.value, value: option.value },
                option.label
              );
            })
          ),
          errorMessage && this.state.errorIsOpen && React.createElement(
            Flyout,
            {
              anchor: this.select,
              color: 'orange',
              idealDirection: idealErrorDirection,
              onDismiss: function onDismiss() {
                return _this2.setState({ errorIsOpen: false });
              },
              shouldFocus: false,
              size: 'sm'
            },
            React.createElement(
              Box,
              { padding: 3 },
              React.createElement(
                Text,
                { bold: true, color: 'white' },
                React.createElement(
                  'span',
                  { id: id + '-gestalt-error' },
                  errorMessage
                )
              )
            )
          )
        );
      }
    }], [{
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(props, state) {
        if (props.errorMessage !== state.errorMessage) {
          return {
            errorIsOpen: !!props.errorMessage,
            errorMessage: props.errorMessage
          };
        }

        return null;
      }
    }]);
    return SelectList;
  }(React.Component);

  SelectList.propTypes = {
    disabled: PropTypes.bool,
    errorMessage: PropTypes.string,
    id: PropTypes.string.isRequired,
    idealErrorDirection: PropTypes.string,
    name: PropTypes.string,
    onChange: PropTypes.func.isRequired,
    options: PropTypes.arrayOf(PropTypes.exact({
      label: PropTypes.string.isRequired,
      value: PropTypes.string.isRequired
    })),
    placeholder: PropTypes.string,
    value: PropTypes.string
  };
  SelectList.defaultProps = {
    disabled: false,
    idealErrorDirection: 'right',
    options: []
  };

  var styles$o = { "icon": "_vo _45", "spin": "_vp" };

  var SIZE = 40;

  function Spinner(_ref) {
    var accessibilityLabel = _ref.accessibilityLabel,
        show = _ref.show;

    return show ? React.createElement(
      Box,
      { xs: { display: 'flex' }, justifyContent: 'around', overflow: 'hidden' },
      React.createElement(
        'div',
        { className: styles$o.icon },
        React.createElement(Icon, {
          icon: 'knoop',
          accessibilityLabel: accessibilityLabel,
          size: SIZE
        })
      )
    ) : React.createElement('div', null);
  }

  Spinner.propTypes = {
    show: PropTypes.bool.isRequired,
    accessibilityLabel: PropTypes.string.isRequired
  };

  function Sticky(props) {
    var _props$dangerouslySet = props.dangerouslySetZIndex,
        dangerouslySetZIndex = _props$dangerouslySet === undefined ? { __zIndex: 1 } : _props$dangerouslySet,
        children = props.children;

    var style = {
      top: props.top != null ? props.top : undefined,
      left: props.left != null ? props.left : undefined,
      right: props.right != null ? props.right : undefined,
      bottom: props.bottom != null ? props.bottom : undefined,
      // eslint-disable-next-line no-underscore-dangle
      zIndex: dangerouslySetZIndex.__zIndex
    };
    return React.createElement(
      'div',
      { className: layout.sticky, style: style },
      children
    );
  }

  Sticky.propTypes = {
    children: PropTypes.node,
    dangerouslySetZIndex: PropTypes.exact({
      __zIndex: PropTypes.number
    }),
    top: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    left: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    bottom: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    right: PropTypes.oneOfType([PropTypes.number, PropTypes.string])
  };

  var styles$p = { "switch": "_vq _45 _4q _4f", "focused": "_vr _xv", "switchDarkGray": "_vs _3d", "switchGray": "_vt _3b", "switchLightGray": "_vu _39", "switchWhite": "_vv _37", "slider": "_vw _4q _4h _37 _2w", "sliderRight": "_vx", "sliderLeft": "_vy", "sliderDark": "_vz", "sliderLight": "_w0", "checkbox": "_w1 _4h _y8 _od _33 _oi", "checkboxEnabled": "_w2 _z9" };

  var Switch = function (_React$Component) {
    inherits(Switch, _React$Component);

    function Switch() {
      var _ref;

      var _temp, _this, _ret;

      classCallCheck(this, Switch);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Switch.__proto__ || Object.getPrototypeOf(Switch)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        focused: false
      }, _this.handleBlur = function () {
        return _this.setState({ focused: false });
      }, _this.handleChange = function (event) {
        var checked = event.target.checked;

        _this.props.onChange({
          event: event,
          value: checked
        });
      }, _this.handleFocus = function () {
        _this.setState({ focused: true });
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(Switch, [{
      key: 'render',
      value: function render() {
        var _props = this.props,
            disabled = _props.disabled,
            id = _props.id,
            name = _props.name,
            switched = _props.switched;


        var switchStyles = classnames(styles$p.switch, defineProperty({}, styles$p.focused, this.state.focused),
        // eslint-disable-next-line no-nested-ternary
        disabled ? switched ? styles$p.switchGray : styles$p.switchLightGray : switched ? styles$p.switchDarkGray : styles$p.switchWhite);

        var sliderStyles = classnames(styles$p.slider, switched ? styles$p.sliderRight : styles$p.sliderLeft, switched && !disabled ? styles$p.sliderDark : styles$p.sliderLight);

        var inputStyles = classnames(styles$p.checkbox, defineProperty({}, styles$p.checkboxEnabled, !disabled));

        return React.createElement(
          'div',
          { className: switchStyles },
          React.createElement('input', {
            checked: switched,
            className: inputStyles,
            disabled: disabled,
            id: id,
            name: name,
            onBlur: this.handleBlur,
            onChange: this.handleChange,
            onFocus: this.handleFocus,
            type: 'checkbox'
          }),
          React.createElement('div', { className: sliderStyles })
        );
      }
    }]);
    return Switch;
  }(React.Component);

  Switch.propTypes = {
    disabled: PropTypes.bool,
    id: PropTypes.string.isRequired,
    name: PropTypes.string,
    onChange: PropTypes.func.isRequired,
    switched: PropTypes.bool
  };
  Switch.defaultProps = {
    disabled: false,
    switched: false
  };

  var styles$q = { "Tabs": "_w3 _4s", "tab": "_w4 _xu _4q _4o _4s _4w undefined _5a _33 _2x _od _z9", "tabIsNotActive": "_w5 _42 _3a", "tabIsActive": "_w6 _39 _3c" };

  var Tabs = function (_React$Component) {
    inherits(Tabs, _React$Component);

    function Tabs() {
      var _ref;

      var _temp, _this, _ret;

      classCallCheck(this, Tabs);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        focusedTabIndex: undefined,
        hoveredTabIndex: undefined
      }, _this.handleTabClick = function (i, e) {
        var onChange = _this.props.onChange;

        onChange({ activeTabIndex: i, event: e });
      }, _this.handleTabFocus = function (i) {
        return _this.setState({ focusedTabIndex: i });
      }, _this.handleTabBlur = function () {
        return _this.setState({ focusedTabIndex: undefined });
      }, _this.handleTabMouseEnter = function (i) {
        return _this.setState({ hoveredTabIndex: i });
      }, _this.handleTabMouseLeave = function () {
        return _this.setState({ hoveredTabIndex: undefined });
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(Tabs, [{
      key: 'render',
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            tabs = _props.tabs,
            activeTabIndex = _props.activeTabIndex,
            wrap = _props.wrap;
        var _state = this.state,
            focusedTabIndex = _state.focusedTabIndex,
            hoveredTabIndex = _state.hoveredTabIndex;

        return React.createElement(
          'div',
          {
            className: classnames(styles$q.Tabs, wrap && layout.flexWrap),
            role: 'tablist'
          },
          tabs.map(function (_ref2, i) {
            var _classnames;

            var text = _ref2.text,
                href = _ref2.href;

            var isActive = i === activeTabIndex;
            var isHovered = i === hoveredTabIndex;
            var isFocused = i === focusedTabIndex;
            var cs = classnames(styles$q.tab, (_classnames = {}, defineProperty(_classnames, styles$q.tabIsNotActive, !isActive), defineProperty(_classnames, styles$q.tabIsActive, isActive), _classnames));
            return React.createElement(
              'a',
              {
                'aria-selected': isActive,
                className: cs,
                href: href,
                key: '' + i + href,
                onClick: function onClick(e) {
                  return _this2.handleTabClick(i, e);
                },
                onFocus: function onFocus() {
                  return _this2.handleTabFocus(i);
                },
                onBlur: _this2.handleTabBlur,
                onMouseEnter: function onMouseEnter() {
                  return _this2.handleTabMouseEnter(i);
                },
                onMouseLeave: _this2.handleTabMouseLeave,
                role: 'tab'
              },
              React.createElement(
                Text,
                {
                  bold: true,
                  color: isActive || isHovered || isFocused ? 'darkGray' : 'gray',
                  size: 'md'
                },
                text
              )
            );
          })
        );
      }
    }]);
    return Tabs;
  }(React.Component);

  Tabs.propTypes = {
    activeTabIndex: PropTypes.number.isRequired,
    tabs: PropTypes.arrayOf(PropTypes.exact({
      text: PropTypes.node,
      href: PropTypes.string
    })).isRequired,
    onChange: PropTypes.func.isRequired,
    wrap: PropTypes.bool
  };

  var styles$r = { "textArea": "_ws _xu _4q _w7 _0 _1 _2 _wa _4 _y8", "normal": "_wt", "errored": "_wu", "enabled": "_wv _3c _37", "disabled": "_ww _3a _39" };

  var TextArea = function (_React$Component) {
    inherits(TextArea, _React$Component);

    function TextArea() {
      var _ref;

      var _temp, _this, _ret;

      classCallCheck(this, TextArea);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TextArea.__proto__ || Object.getPrototypeOf(TextArea)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        focused: false,
        errorIsOpen: false
      }, _this.handleChange = function (event) {
        _this.props.onChange({
          event: event,
          value: event.currentTarget.value
        });

        if (_this.props.errorMessage) {
          _this.setState({ errorIsOpen: true });
        }
      }, _this.handleBlur = function (event) {
        if (_this.props.errorMessage) {
          _this.setState({ errorIsOpen: false });
        }
        if (_this.props.onBlur) {
          _this.props.onBlur({
            event: event,
            value: event.currentTarget.value
          });
        }
      }, _this.handleFocus = function (event) {
        if (_this.props.errorMessage) {
          _this.setState({ errorIsOpen: true });
        }
        if (_this.props.onFocus) {
          _this.props.onFocus({
            event: event,
            value: event.currentTarget.value
          });
        }
      }, _this.handleKeyDown = function (event) {
        if (_this.props.onKeyDown) {
          _this.props.onKeyDown({
            event: event,
            value: event.currentTarget.value
          });
        }
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(TextArea, [{
      key: 'render',
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            disabled = _props.disabled,
            errorMessage = _props.errorMessage,
            hasError = _props.hasError,
            id = _props.id,
            idealErrorDirection = _props.idealErrorDirection,
            name = _props.name,
            placeholder = _props.placeholder,
            rows = _props.rows,
            value = _props.value;


        var classes = classnames(styles$r.textArea, disabled ? styles$r.disabled : styles$r.enabled, hasError || errorMessage ? styles$r.errored : styles$r.normal);

        return React.createElement(
          'span',
          null,
          React.createElement('textarea', {
            'aria-describedby': errorMessage && this.state.focused ? id + '-gestalt-error' : null,
            'aria-invalid': errorMessage || hasError ? 'true' : 'false',
            className: classes,
            disabled: disabled,
            id: id,
            name: name,
            onBlur: this.handleBlur,
            onChange: this.handleChange,
            onFocus: this.handleFocus,
            onKeyDown: this.handleKeyDown,
            placeholder: placeholder,
            ref: function ref(c) {
              _this2.textarea = c;
            },
            rows: rows,
            value: value
          }),
          errorMessage && this.state.errorIsOpen ? React.createElement(
            Flyout,
            {
              anchor: this.textarea,
              color: 'orange',
              idealDirection: idealErrorDirection,
              onDismiss: function onDismiss() {
                return _this2.setState({ errorIsOpen: false });
              },
              shouldFocus: false,
              size: 'sm'
            },
            React.createElement(
              Box,
              { padding: 3 },
              React.createElement(
                Text,
                { bold: true, color: 'white' },
                React.createElement(
                  'span',
                  { id: id + '-gestalt-error' },
                  errorMessage
                )
              )
            )
          ) : null
        );
      }
    }], [{
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(props, state) {
        if (props.errorMessage !== state.errorMessage) {
          return {
            errorIsOpen: !!props.errorMessage,
            errorMessage: props.errorMessage
          };
        }

        return null;
      }
    }]);
    return TextArea;
  }(React.Component);

  TextArea.propTypes = {
    disabled: PropTypes.bool,
    errorMessage: PropTypes.string,
    hasError: PropTypes.bool,
    id: PropTypes.string.isRequired,
    idealErrorDirection: PropTypes.string,
    name: PropTypes.string,
    onBlur: PropTypes.func,
    onChange: PropTypes.func.isRequired,
    onFocus: PropTypes.func,
    onKeyDown: PropTypes.func,
    placeholder: PropTypes.string,
    rows: PropTypes.number,
    value: PropTypes.string
  };
  TextArea.defaultProps = {
    disabled: false,
    hasError: false,
    idealErrorDirection: 'right',
    rows: 3
  };

  var styles$s = { "textField": "_wx _xu _4q _4o _w7 _0 _1 _2 _wa _y8", "normal": "_wy", "errored": "_wz", "enabled": "_x0 _3c _37", "disabled": "_x1 _3a _39" };

  var TextField = function (_React$Component) {
    inherits(TextField, _React$Component);

    function TextField() {
      var _ref;

      var _temp, _this, _ret;

      classCallCheck(this, TextField);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TextField.__proto__ || Object.getPrototypeOf(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        focused: false,
        errorIsOpen: false
      }, _this.handleChange = function (event) {
        _this.props.onChange({
          event: event,
          value: event.currentTarget.value
        });
      }, _this.handleBlur = function (event) {
        if (_this.props.errorMessage) {
          _this.setState({ errorIsOpen: false });
        }
        if (_this.props.onBlur) {
          _this.props.onBlur({
            event: event,
            value: event.currentTarget.value
          });
        }
      }, _this.handleFocus = function (event) {
        if (_this.props.errorMessage) {
          _this.setState({ errorIsOpen: true });
        }
        if (_this.props.onFocus) {
          _this.props.onFocus({
            event: event,
            value: event.currentTarget.value
          });
        }
      }, _this.handleKeyDown = function (event) {
        if (_this.props.onKeyDown) {
          _this.props.onKeyDown({
            event: event,
            value: event.currentTarget.value
          });
        }
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(TextField, [{
      key: 'render',
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            autoComplete = _props.autoComplete,
            disabled = _props.disabled,
            errorMessage = _props.errorMessage,
            hasError = _props.hasError,
            id = _props.id,
            idealErrorDirection = _props.idealErrorDirection,
            name = _props.name,
            placeholder = _props.placeholder,
            type = _props.type,
            value = _props.value;


        var classes = classnames(styles$s.textField, disabled ? styles$s.disabled : styles$s.enabled, hasError || errorMessage ? styles$s.errored : styles$s.normal);

        // type='number' doesn't work on ios safari without a pattern
        // https://stackoverflow.com/questions/14447668/input-type-number-is-not-showing-a-number-keypad-on-ios
        var pattern = type === 'number' ? '\\d*' : undefined;

        return React.createElement(
          'span',
          null,
          React.createElement('input', {
            'aria-describedby': errorMessage && this.state.focused ? id + '-gestalt-error' : null,
            'aria-invalid': errorMessage || hasError ? 'true' : 'false',
            autoComplete: autoComplete,
            className: classes,
            disabled: disabled,
            id: id,
            name: name,
            onBlur: this.handleBlur,
            onChange: this.handleChange,
            onFocus: this.handleFocus,
            onKeyDown: this.handleKeyDown,
            pattern: pattern,
            placeholder: placeholder,
            ref: function ref(c) {
              _this2.textfield = c;
            },
            type: type,
            value: value
          }),
          errorMessage && this.state.errorIsOpen && React.createElement(
            Flyout,
            {
              anchor: this.textfield,
              color: 'orange',
              idealDirection: idealErrorDirection,
              onDismiss: function onDismiss() {
                return _this2.setState({ errorIsOpen: false });
              },
              shouldFocus: false,
              size: 'sm'
            },
            React.createElement(
              Box,
              { padding: 3 },
              React.createElement(
                Text,
                { bold: true, color: 'white' },
                React.createElement(
                  'span',
                  { id: id + '-gestalt-error' },
                  errorMessage
                )
              )
            )
          )
        );
      }
    }], [{
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(props, state) {
        if (props.errorMessage !== state.errorMessage) {
          return {
            errorIsOpen: !!props.errorMessage,
            errorMessage: props.errorMessage
          };
        }

        return null;
      }
    }]);
    return TextField;
  }(React.Component);

  TextField.propTypes = {
    autoComplete: PropTypes.oneOf(['current-password', 'on', 'off', 'username']),
    disabled: PropTypes.bool,
    errorMessage: PropTypes.string,
    hasError: PropTypes.bool,
    id: PropTypes.string.isRequired,
    idealErrorDirection: PropTypes.string,
    name: PropTypes.string,
    onBlur: PropTypes.func,
    onChange: PropTypes.func.isRequired,
    onFocus: PropTypes.func,
    onKeyDown: PropTypes.func,
    placeholder: PropTypes.string,
    type: PropTypes.oneOf(['date', 'email', 'number', 'password', 'text', 'url']),
    value: PropTypes.string
  };
  TextField.defaultProps = {
    disabled: false,
    hasError: false,
    idealErrorDirection: 'right',
    type: 'text'
  };

  function Toast(props) {
    var _props$color = props.color,
        color = _props$color === undefined ? 'darkGray' : _props$color,
        icon = props.icon,
        thumbnail = props.thumbnail,
        text = props.text;


    var contents = void 0;
    // Confirmation Toasts
    if (text instanceof Array && text.length > 1) {
      contents = React.createElement(
        Box,
        { xs: { display: 'flex' } },
        React.createElement(
          Box,
          { xs: { display: 'flexColumn' }, flex: 'none', justifyContent: 'center' },
          thumbnail ? React.createElement(
            Mask,
            { shape: 'rounded', height: 48, width: 48 },
            thumbnail
          ) : null
        ),
        React.createElement(
          Box,
          {
            xs: { display: 'flexColumn' },
            justifyContent: 'center',
            dangerouslySetInlineStyle: { __style: { paddingLeft: 10 } }
          },
          React.createElement(
            Box,
            {
              dangerouslySetInlineStyle: { __style: { fontWeight: 'normal' } }
            },
            React.createElement(
              Text,
              { color: 'white', size: 'lg' },
              text[0]
            )
          ),
          React.createElement(
            Text,
            { bold: true, color: 'white', size: 'lg' },
            text[1]
          )
        )
      );
    } else {
      // Toasts as Guides
      contents = React.createElement(
        Box,
        {
          xs: { display: 'flex' },
          justifyContent: 'between',
          alignItems: 'center'
        },
        React.createElement(
          Text,
          { bold: true, color: 'white', size: 'lg' },
          text
        ),
        icon && React.createElement(
          Box,
          { dangerouslySetInlineStyle: { __style: { paddingLeft: 24 } } },
          React.createElement(Icon, { accessibilityLabel: '', color: 'white', icon: icon, size: 36 })
        )
      );
    }

    return React.createElement(
      Box,
      { marginBottom: 3, paddingX: 4, maxWidth: 376, width: '100vw' },
      React.createElement(
        Box,
        { color: color, fit: true, paddingX: 8, paddingY: 5, shape: 'pill' },
        contents
      )
    );
  }

  Toast.propTypes = {
    color: PropTypes.oneOf(['darkGray', 'orange']),
    icon: PropTypes.oneOf(['arrow-circle-forward']), // leaving open to additional icons in the future
    text: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).isRequired,
    thumbnail: PropTypes.node
  };

  var styles$t = { "touchable": "_x2 _xu", "fullHeight": "_x3", "fullWidth": "_x4 _y8", "square": "_x5 _2v", "circle": "_x6 _2w", "rounded": "_x7 _2y", "roundedTop": "_x8 _2z", "roundedRight": "_x9 _30", "roundedBottom": "_xa _31", "roundedLeft": "_xb _32", "pill": "_xc _2x", "pointer": "_xd _z9", "zoomIn": "_xe _za", "zoomOut": "_xf _zb", "copy": "_xg _zc", "move": "_xh _zd", "noDrop": "_xi _ze", "grab": "_xj _zf", "grabbing": "_xk _zg" };

  var SPACE_CHAR_CODE = 32;
  var ENTER_CHAR_CODE = 13;

  var Touchable = function (_React$Component) {
    inherits(Touchable, _React$Component);

    function Touchable() {
      var _ref;

      var _temp, _this, _ret;

      classCallCheck(this, Touchable);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Touchable.__proto__ || Object.getPrototypeOf(Touchable)).call.apply(_ref, [this].concat(args))), _this), _this.handleKeyPress = function (event) {
        var onTouch = _this.props.onTouch;
        // Check to see if space or enter were pressed

        if (onTouch && (event.charCode === SPACE_CHAR_CODE || event.charCode === ENTER_CHAR_CODE)) {
          // Prevent the default action to stop scrolling when space is pressed
          event.preventDefault();
          onTouch({ event: event });
        }
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(Touchable, [{
      key: 'render',
      value: function render() {
        var _classnames;

        var _props = this.props,
            children = _props.children,
            _props$fullWidth = _props.fullWidth,
            fullWidth = _props$fullWidth === undefined ? true : _props$fullWidth,
            fullHeight = _props.fullHeight,
            _props$mouseCursor = _props.mouseCursor,
            mouseCursor = _props$mouseCursor === undefined ? 'pointer' : _props$mouseCursor,
            onMouseEnter = _props.onMouseEnter,
            onMouseLeave = _props.onMouseLeave,
            onTouch = _props.onTouch,
            _props$shape = _props.shape,
            shape = _props$shape === undefined ? 'square' : _props$shape;


        var classes = classnames(styles$t.touchable, styles$t[mouseCursor], styles$t[shape], (_classnames = {}, defineProperty(_classnames, styles$t.fullHeight, fullHeight), defineProperty(_classnames, styles$t.fullWidth, fullWidth), _classnames));

        return React.createElement(
          'div',
          {
            className: classes,
            onClick: function onClick(event) {
              return onTouch && onTouch({ event: event });
            },
            onMouseEnter: function (_onMouseEnter) {
              function onMouseEnter(_x) {
                return _onMouseEnter.apply(this, arguments);
              }

              onMouseEnter.toString = function () {
                return _onMouseEnter.toString();
              };

              return onMouseEnter;
            }(function (event) {
              return onMouseEnter && onMouseEnter({ event: event });
            }),
            onMouseLeave: function (_onMouseLeave) {
              function onMouseLeave(_x2) {
                return _onMouseLeave.apply(this, arguments);
              }

              onMouseLeave.toString = function () {
                return _onMouseLeave.toString();
              };

              return onMouseLeave;
            }(function (event) {
              return onMouseLeave && onMouseLeave({ event: event });
            }),
            onKeyPress: this.handleKeyPress,
            role: 'button',
            tabIndex: '0'
          },
          children
        );
      }
    }]);
    return Touchable;
  }(React.Component);


  Touchable.propTypes = {
    children: PropTypes.node,
    fullHeight: PropTypes.bool,
    fullWidth: PropTypes.bool,
    mouseCursor: PropTypes.oneOf(['copy', 'grab', 'grabbing', 'move', 'noDrop', 'pointer', 'zoomIn', 'zoomOut']),
    onTouch: PropTypes.func,
    onMouseEnter: PropTypes.func,
    onMouseLeave: PropTypes.func,
    shape: PropTypes.oneOf(['square', 'rounded', 'pill', 'circle', 'roundedTop', 'roundedBottom', 'roundedLeft', 'roundedRight'])
  };

  var styles$u = { "video": "_xl _45 _4h _y8", "player": "_xm _4f _y8", "playhead": "_xn _4s _50 _y8 _z9", "controls": "_xo _4h _4s _50 _4l _4m _4k _6e _6d" };

  var VideoPlayhead = function (_React$PureComponent) {
    inherits(VideoPlayhead, _React$PureComponent);

    function VideoPlayhead() {
      var _ref;

      var _temp, _this, _ret;

      classCallCheck(this, VideoPlayhead);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = VideoPlayhead.__proto__ || Object.getPrototypeOf(VideoPlayhead)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        seeking: false
      }, _this.setPlayheadRef = function (ref) {
        _this.playhead = ref;
      }, _this.seek = function (clientX) {
        if (_this.playhead) {
          var _this$props = _this.props,
              _duration = _this$props.duration,
              _seek = _this$props.seek;

          var _this$playhead$getBou = _this.playhead.getBoundingClientRect(),
              left = _this$playhead$getBou.left,
              width = _this$playhead$getBou.width;

          var percent = Math.max(0, Math.min((clientX - left) / width, 1));
          var newTime = percent * _duration;
          _seek(newTime);
        }
      }, _this.stopClick = function (event) {
        return event.stopPropagation();
      }, _this.handleMouseDown = function (event) {
        _this.setState({ seeking: true });
        _this.seek(event.clientX);
      }, _this.handleMouseMove = function (event) {
        var seeking = _this.state.seeking;

        if (seeking) {
          _this.seek(event.clientX);
        }
      }, _this.handleMouseUp = function () {
        _this.setState({ seeking: false });
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(VideoPlayhead, [{
      key: 'render',
      value: function render() {
        var _props = this.props,
            currentTime = _props.currentTime,
            duration = _props.duration;

        var width = Math.floor(currentTime * 10000 / duration) / 100 + '%';
        return React.createElement(
          Box,
          {
            position: 'relative',
            display: 'flex',
            flex: 'grow',
            alignItems: 'center',
            height: 16
          },
          React.createElement(
            'div',
            {
              'aria-valuemax': duration,
              'aria-valuemin': '0',
              'aria-valuenow': currentTime,
              className: styles$u.playhead,
              onClick: this.stopClick,
              onKeyPress: this.stopClick,
              onMouseDown: this.handleMouseDown,
              onMouseMove: this.handleMouseMove,
              onMouseUp: this.handleMouseUp,
              ref: this.setPlayheadRef,
              role: 'progressbar',
              tabIndex: '-1'
            },
            React.createElement(
              Box,
              {
                left: true,
                right: true,
                position: 'absolute',
                color: 'lightGray',
                shape: 'rounded',
                height: 4
              },
              React.createElement(Box, { color: 'white', shape: 'rounded', height: '100%', width: width })
            ),
            React.createElement(
              Box,
              {
                position: 'absolute',
                shape: 'rounded',
                height: 4,
                dangerouslySetInlineStyle: { __style: { left: width } }
              },
              React.createElement(Box, {
                shape: 'circle',
                width: 16,
                height: 16,
                color: 'white',
                marginLeft: -2,
                dangerouslySetInlineStyle: { __style: { marginTop: -6 } }
              })
            )
          )
        );
      }
    }]);
    return VideoPlayhead;
  }(React.PureComponent);

  VideoPlayhead.propTypes = {
    currentTime: PropTypes.number.isRequired,
    duration: PropTypes.number.isRequired,
    seek: PropTypes.func.isRequired
  };

  var fullscreenEnabled = function fullscreenEnabled() {
    return (
      // $FlowIssue - vendor prefix missing from Flow
      document.fullscreenEnabled ||
      // $FlowIssue - vendor prefix missing from Flow
      document.webkitFullscreenEnabled ||
      // $FlowIssue - vendor prefix missing from Flow
      document.mozFullScreenEnabled ||
      // $FlowIssue - vendor prefix missing from Flow
      document.msFullscreenEnabled
    );
  };

  var timeToString = function timeToString(time) {
    var rounded = Math.floor(time || 0);
    var minutes = Math.floor(rounded / 60);
    var seconds = rounded - minutes * 60;
    var minutesStr = minutes < 10 ? '0' + minutes : minutes;
    var secondsStr = seconds < 10 ? '0' + seconds : seconds;
    return minutesStr + ':' + secondsStr;
  };

  var VideoControls = function (_React$Component) {
    inherits(VideoControls, _React$Component);

    function VideoControls() {
      var _ref;

      var _temp, _this, _ret;

      classCallCheck(this, VideoControls);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = VideoControls.__proto__ || Object.getPrototypeOf(VideoControls)).call.apply(_ref, [this].concat(args))), _this), _this.handleFullscreenChange = function (_ref2) {
        var event = _ref2.event;
        var onFullscreenChange = _this.props.onFullscreenChange;

        event.stopPropagation();
        onFullscreenChange();
      }, _this.handlePlayingChange = function (_ref3) {
        var event = _ref3.event;
        var _this$props = _this.props,
            playing = _this$props.playing,
            onPause = _this$props.onPause,
            onPlay = _this$props.onPlay;

        if (playing) {
          onPause(event);
        } else {
          onPlay(event);
        }
      }, _this.handleVolumeChange = function (_ref4) {
        var event = _ref4.event;
        var onVolumeChange = _this.props.onVolumeChange;

        onVolumeChange(event);
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(VideoControls, [{
      key: 'render',
      value: function render() {
        var _props = this.props,
            accessibilityMaximizeLabel = _props.accessibilityMaximizeLabel,
            accessibilityMinimizeLabel = _props.accessibilityMinimizeLabel,
            accessibilityMuteLabel = _props.accessibilityMuteLabel,
            accessibilityPauseLabel = _props.accessibilityPauseLabel,
            accessibilityPlayLabel = _props.accessibilityPlayLabel,
            accessibilityUnmuteLabel = _props.accessibilityUnmuteLabel,
            currentTime = _props.currentTime,
            duration = _props.duration,
            fullscreen = _props.fullscreen,
            playing = _props.playing,
            seek = _props.seek,
            volume = _props.volume;

        var muted = volume === 0;
        var showFullscreenButton = typeof document !== 'undefined' && !!fullscreenEnabled();
        return React.createElement(
          'div',
          { className: styles$u.controls },
          React.createElement(
            Box,
            { padding: 2 },
            React.createElement(
              Touchable,
              { onTouch: this.handlePlayingChange, fullWidth: false },
              React.createElement(Icon, {
                accessibilityLabel: playing ? accessibilityPauseLabel : accessibilityPlayLabel,
                color: 'white',
                icon: playing ? 'pause' : 'play',
                size: 20
              })
            )
          ),
          React.createElement(
            Box,
            { width: 50, padding: 2 },
            React.createElement(
              Text,
              { color: 'white', align: 'right', size: 'xs' },
              timeToString(currentTime)
            )
          ),
          React.createElement(
            Box,
            { padding: 2, flex: 'grow' },
            React.createElement(VideoPlayhead, {
              currentTime: currentTime,
              duration: duration,
              seek: seek
            })
          ),
          React.createElement(
            Box,
            { width: 50, padding: 2 },
            React.createElement(
              Text,
              { color: 'white', align: 'right', size: 'xs' },
              timeToString(duration)
            )
          ),
          React.createElement(
            Box,
            { padding: 2 },
            React.createElement(
              Touchable,
              { onTouch: this.handleVolumeChange, fullWidth: false },
              React.createElement(Icon, {
                accessibilityLabel: muted ? accessibilityUnmuteLabel : accessibilityMuteLabel,
                color: 'white',
                icon: muted ? 'mute' : 'sound',
                size: 20
              })
            )
          ),
          showFullscreenButton && React.createElement(
            Box,
            { padding: 2 },
            React.createElement(
              Touchable,
              { onTouch: this.handleFullscreenChange, fullWidth: false },
              React.createElement(Icon, {
                accessibilityLabel: fullscreen ? accessibilityMinimizeLabel : accessibilityMaximizeLabel,
                color: 'white',
                icon: fullscreen ? 'minimize' : 'maximize',
                size: 20
              })
            )
          )
        );
      }
    }]);
    return VideoControls;
  }(React.Component);

  VideoControls.propTypes = {
    accessibilityMaximizeLabel: PropTypes.string.isRequired,
    accessibilityMinimizeLabel: PropTypes.string.isRequired,
    accessibilityMuteLabel: PropTypes.string.isRequired,
    accessibilityPauseLabel: PropTypes.string.isRequired,
    accessibilityPlayLabel: PropTypes.string.isRequired,
    accessibilityUnmuteLabel: PropTypes.string.isRequired,
    currentTime: PropTypes.number.isRequired,
    duration: PropTypes.number.isRequired,
    fullscreen: PropTypes.bool.isRequired,
    onFullscreenChange: PropTypes.func.isRequired,
    onPause: PropTypes.func.isRequired,
    onPlay: PropTypes.func.isRequired,
    onVolumeChange: PropTypes.func.isRequired,
    playing: PropTypes.bool.isRequired,
    seek: PropTypes.func.isRequired,
    volume: PropTypes.number.isRequired
  };

  // For more information on fullscreen and vendor prefixes see
  // https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API

  var requestFullscreen = function requestFullscreen(element) {
    if (element.requestFullscreen) {
      element.requestFullscreen();
      // $FlowIssue - vendor prefix missing from Flow
    } else if (element.webkitRequestFullscreen) {
      // $FlowIssue - vendor prefix missing from Flow
      element.webkitRequestFullscreen();
      // $FlowIssue - vendor prefix missing from Flow
    } else if (element.mozRequestFullScreen) {
      // $FlowIssue - vendor prefix missing from Flow
      element.mozRequestFullScreen();
      // $FlowIssue - vendor prefix missing from Flow
    } else if (element.msRequestFullscreen) {
      // $FlowIssue - vendor prefix missing from Flow
      element.msRequestFullscreen();
    }
  };

  var exitFullscreen = function exitFullscreen() {
    // $FlowIssue - vendor prefix missing from Flow
    if (document.exitFullscreen) {
      // $FlowIssue - vendor prefix missing from Flow
      document.exitFullscreen();
      // $FlowIssue - vendor prefix missing from Flow
    } else if (document.webkitExitFullscreen) {
      // $FlowIssue - vendor prefix missing from Flow
      document.webkitExitFullscreen();
      // $FlowIssue - vendor prefix missing from Flow
    } else if (document.mozCancelFullScreen) {
      // $FlowIssue - vendor prefix missing from Flow
      document.mozCancelFullScreen();
      // $FlowIssue - vendor prefix missing from Flow
    } else if (document.msExitFullscreen) {
      // $FlowIssue - vendor prefix missing from Flow
      document.msExitFullscreen();
    }
  };

  // Normally document.fullscreen suffices here as a flag, but IE11 does not
  // have a vendor specific version so we must instead use the actual element
  var isFullscreen = function isFullscreen() {
    return (
      // $FlowIssue - vendor prefix missing from Flow
      document.fullscreenElement ||
      // $FlowIssue - vendor prefix missing from Flow
      document.webkitFullscreenElement ||
      // $FlowIssue - vendor prefix missing from Flow
      document.mozFullScreenElement ||
      // $FlowIssue - vendor prefix missing from Flow
      document.msFullscreenElement
    );
  };

  var addFullscreenEventListener = function addFullscreenEventListener(listener) {
    document.addEventListener('fullscreenchange', listener);
    document.addEventListener('webkitfullscreenchange', listener);
    document.addEventListener('mozfullscreenchange', listener);
    document.addEventListener('MSFullscreenChange', listener);
  };

  var removeFullscreenEventListener = function removeFullscreenEventListener(listener) {
    document.removeEventListener('fullscreenchange', listener);
    document.removeEventListener('webkitfullscreenchange', listener);
    document.removeEventListener('mozfullscreenchange', listener);
    document.removeEventListener('MSFullscreenChange', listener);
  };

  var isNewSource = function isNewSource(oldSource, newSource) {
    if ((typeof oldSource === 'undefined' ? 'undefined' : _typeof(oldSource)) !== (typeof newSource === 'undefined' ? 'undefined' : _typeof(newSource))) {
      // If the source type changed from string to Array
      // or vice versa, we have a new source
      return true;
    }
    if (Array.isArray(newSource)) {
      if (oldSource.length !== newSource.length) {
        // If the sources are both an Array, and the lengths
        // do not match we evaluate as a new source
        return true;
      }
      // If the sources are both an Array and the same length,
      // verify every element stayed the same
      return newSource.some(function (source, index) {
        return !Array.isArray(oldSource) || source.type !== oldSource[index].type || source.src !== oldSource[index].src;
      });
    }
    // If the sources are both a string, simply compare
    // the new with the old
    return newSource !== oldSource;
  };

  var Video = function (_React$PureComponent) {
    inherits(Video, _React$PureComponent);

    function Video() {
      var _ref;

      var _temp, _this, _ret;

      classCallCheck(this, Video);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Video.__proto__ || Object.getPrototypeOf(Video)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        currentTime: 0,
        duration: 0,
        fullscreen: false
      }, _this.setPlayerRef = function (ref) {
        _this.player = ref;
      }, _this.setVideoRef = function (ref) {
        _this.video = ref;
      }, _this.setPlaybackRate = function (playbackRate) {
        if (_this.video) {
          _this.video.playbackRate = playbackRate;
        }
      }, _this.setVolume = function (volume) {
        if (_this.video) {
          _this.video.volume = volume;
        }
      }, _this.load = function () {
        if (_this.video) {
          _this.video.load();
        }
      }, _this.pause = function () {
        if (_this.video) {
          _this.video.pause();
        }
      }, _this.play = function () {
        if (_this.video) {
          _this.video.play();
        }
      }, _this.seek = function (time) {
        if (_this.video) {
          _this.video.currentTime = time;
        }
      }, _this.toggleFullscreen = function () {
        if (isFullscreen()) {
          exitFullscreen();
        } else if (_this.player) {
          requestFullscreen(_this.player);
        }
      }, _this.handleCanPlay = function (event) {
        var onReady = _this.props.onReady;


        if (onReady) {
          onReady({ event: event });
        }
      }, _this.handleDurationChange = function (event) {
        var onDurationChange = _this.props.onDurationChange;

        var duration = _this.video && _this.video.duration || 0;
        _this.setState({ duration: duration });

        if (onDurationChange) {
          onDurationChange({ event: event, duration: duration });
        }
      }, _this.handleEnded = function (event) {
        var onEnded = _this.props.onEnded;


        if (onEnded) {
          onEnded({ event: event });
        }
      }, _this.handleFullscreenChange = function (event) {
        var onFullscreenChange = _this.props.onFullscreenChange;

        var fullscreen = !!isFullscreen();
        _this.setState({ fullscreen: fullscreen });

        if (onFullscreenChange) {
          onFullscreenChange({ event: event, fullscreen: fullscreen });
        }
      }, _this.handlePlay = function (event) {
        var onPlay = _this.props.onPlay;


        if (onPlay) {
          onPlay({ event: event });
        }
      }, _this.handlePause = function (event) {
        var onPause = _this.props.onPause;


        if (onPause) {
          onPause({ event: event });
        }
      }, _this.handleProgress = function (event) {
        var onLoadedChange = _this.props.onLoadedChange;

        var _ref2 = _this.video || {},
            buffered = _ref2.buffered;

        var loaded = buffered && buffered.length > 0 ? buffered.end(buffered.length - 1) : 0;

        if (onLoadedChange) {
          onLoadedChange({ event: event, loaded: loaded });
        }
      }, _this.handleSeek = function (event) {
        var onSeek = _this.props.onSeek;


        if (onSeek) {
          onSeek({ event: event });
        }
      }, _this.handleTimeUpdate = function (event) {
        var onTimeChange = _this.props.onTimeChange;

        var currentTime = _this.video && _this.video.currentTime || 0;
        _this.setState({ currentTime: currentTime });

        if (onTimeChange) {
          onTimeChange({ event: event, time: currentTime });
        }
      }, _this.handleVolumeChange = function (event) {
        var onVolumeChange = _this.props.onVolumeChange;

        var muted = _this.video && _this.video.muted || false;

        if (onVolumeChange) {
          onVolumeChange({ event: event, volume: muted ? 1 : 0 });
        }
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(Video, [{
      key: 'componentDidMount',


      /**
       * React lifecycle hooks pertinent to Video
       */

      value: function componentDidMount() {
        var _props = this.props,
            playbackRate = _props.playbackRate,
            playing = _props.playing,
            volume = _props.volume;
        // Set up event listeners to catch backdoors in fullscreen
        // changes such as using the ESC key to exit

        if (typeof document !== 'undefined') {
          addFullscreenEventListener(this.handleFullscreenChange);
        }
        // Load the video to hydrate the DOM after a server render
        this.load();
        // Set the initial volume
        this.setVolume(volume);
        // Set the initial playback rate
        this.setPlaybackRate(playbackRate);
        // Simulate an autoplay effect if the component
        if (playing) {
          this.play();
        }
      }
    }, {
      key: 'componentDidUpdate',
      value: function componentDidUpdate(prevProps) {
        // If the video source changed, reload the video
        if (isNewSource(prevProps.src, this.props.src)) {
          this.load();
        }
        // If the volume changed, set the new volume
        if (prevProps.volume !== this.props.volume) {
          this.setVolume(this.props.volume);
        }
        // If the playback rate changed, set the new rate
        if (prevProps.playbackRate !== this.props.playbackRate) {
          this.setPlaybackRate(this.props.playbackRate);
        }
        // If the playback changed, play or pause the video
        if (prevProps.playing !== this.props.playing) {
          if (this.props.playing) {
            this.play();
          } else {
            this.pause();
          }
        }
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        removeFullscreenEventListener(this.handleFullscreenChange);
      }

      /**
       * DOM reference housekeeping that is needed for functionality
       */

      // The player element encapsulates the actual video DOM
      // element as well as the controls to bring both fullscreen


      // The actual reference to the video HTML DOM element


      /**
       * Functions that directly interact with the HTML video element
       */

      // Set the video to the desired playback rate: 1 (normal)


      // Set the video to the desired volume: 0 (muted) -> 1 (max)


      // Change the video source and re-load the video


      // Pause the video


      // Play the video


      // Seek the video to the desired time


      // Enter/exit fullscreen video player mode


      /**
       * Handlers for various media events on the video
       */

      // Sent when enough data is available that the media can be played


      // The metadata has loaded or changed, indicating a change in
      // duration of the media


      // Sent when playback completes.


      // Sent when the video is switched to/out-of fullscreen mode


      // Sent when playback of the media starts after having been paused.


      // Sent when playback is paused.


      // Sent periodically to inform interested parties of progress downloading the media


      // Sent when a seek operation completes.


      // The time indicated by the element's currentTime attribute has changed


      // Sent when the audio volume changes

    }, {
      key: 'render',
      value: function render() {
        var _props2 = this.props,
            aspectRatio = _props2.aspectRatio,
            captions = _props2.captions,
            loop = _props2.loop,
            playing = _props2.playing,
            playsInline = _props2.playsInline,
            poster = _props2.poster,
            preload = _props2.preload,
            src = _props2.src,
            volume = _props2.volume;
        var _state = this.state,
            currentTime = _state.currentTime,
            duration = _state.duration,
            fullscreen = _state.fullscreen;


        var paddingBottom = fullscreen && '0' || 1 / aspectRatio * 100 + '%';

        return React.createElement(
          'div',
          {
            ref: this.setPlayerRef,
            className: styles$u.player,
            style: { paddingBottom: paddingBottom, height: fullscreen ? '100%' : 0 }
          },
          React.createElement(
            'video',
            {
              autoPlay: playing,
              loop: loop,
              muted: volume === 0,
              playsInline: playsInline,
              poster: poster,
              preload: preload,
              src: typeof src === 'string' ? src : undefined,
              ref: this.setVideoRef,
              className: styles$u.video,
              onCanPlay: this.handleCanPlay,
              onDurationChange: this.handleDurationChange,
              onEnded: this.handleEnded,
              onSeeked: this.handleSeek,
              onTimeUpdate: this.handleTimeUpdate,
              onProgress: this.handleProgress
            },
            Array.isArray(src) && src.map(function (source) {
              return React.createElement('source', { key: source.src, src: source.src, type: source.type });
            }),
            React.createElement('track', { kind: 'captions', src: captions })
          ),
          this.props.controls && React.createElement(VideoControls, {
            accessibilityMaximizeLabel: this.props.accessibilityMaximizeLabel,
            accessibilityMinimizeLabel: this.props.accessibilityMinimizeLabel,
            accessibilityMuteLabel: this.props.accessibilityMuteLabel,
            accessibilityPauseLabel: this.props.accessibilityPauseLabel,
            accessibilityPlayLabel: this.props.accessibilityPlayLabel,
            accessibilityUnmuteLabel: this.props.accessibilityUnmuteLabel,
            currentTime: currentTime,
            duration: duration,
            fullscreen: fullscreen,
            onPlay: this.handlePlay,
            onPause: this.handlePause,
            onFullscreenChange: this.toggleFullscreen,
            onVolumeChange: this.handleVolumeChange,
            playing: playing,
            seek: this.seek,
            volume: volume
          })
        );
      }
    }]);
    return Video;
  }(React.PureComponent);

  Video.propTypes = {
    accessibilityMaximizeLabel: PropTypes.string,
    accessibilityMinimizeLabel: PropTypes.string,
    accessibilityMuteLabel: PropTypes.string,
    accessibilityPauseLabel: PropTypes.string,
    accessibilityPlayLabel: PropTypes.string,
    accessibilityUnmuteLabel: PropTypes.string,
    aspectRatio: PropTypes.number.isRequired,
    captions: PropTypes.string.isRequired,
    controls: PropTypes.bool,
    loop: PropTypes.bool,
    onDurationChange: PropTypes.func,
    onEnded: PropTypes.func,
    onFullscreenChange: PropTypes.func,
    onLoadedChange: PropTypes.func,
    onPlay: PropTypes.func,
    onPause: PropTypes.func,
    onReady: PropTypes.func,
    onSeek: PropTypes.func,
    onTimeChange: PropTypes.func,
    onVolumeChange: PropTypes.func,
    playbackRate: PropTypes.number,
    playing: PropTypes.bool,
    playsInline: PropTypes.bool,
    poster: PropTypes.string,
    preload: PropTypes.oneOf(['auto', 'metadata', 'none']),
    src: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.shape({
      type: PropTypes.oneOf(['video/m3u8', 'video/mp4', 'video/ogg']).isRequired,
      src: PropTypes.string.isRequired
    }))]).isRequired,
    volume: PropTypes.number
  };
  Video.defaultProps = {
    playbackRate: 1,
    playing: false,
    preload: 'auto',
    volume: 1
  };

  exports.Avatar = Avatar;
  exports.Box = Box;
  exports.Button = Button;
  exports.Card = Card;
  exports.Checkbox = Checkbox;
  exports.Collage = Collage;
  exports.Collection = Collection;
  exports.Column = Column;
  exports.Container = Container;
  exports.Divider = Divider;
  exports.Flyout = Flyout;
  exports.GroupAvatar = GroupAvatar;
  exports.Heading = Heading;
  exports.Icon = Icon;
  exports.IconButton = IconButton;
  exports.Image = Image;
  exports.Label = Label;
  exports.Layer = Layer;
  exports.Letterbox = Letterbox;
  exports.Link = Link;
  exports.Mask = Mask;
  exports.Masonry = Masonry;
  exports.MasonryBeta = MasonryBeta;
  exports.MasonryInfiniteBeta = MasonryInfiniteBeta;
  exports.MasonryDefaultLayout = MasonryLayout;
  exports.MasonryUniformRowLayout = UniformRowLayout;
  exports.Modal = Modal;
  exports.Pog = Pog;
  exports.Pulsar = Pulsar;
  exports.RadioButton = RadioButton;
  exports.ScrollFetch = ScrollFetch;
  exports.SearchField = SearchField;
  exports.SegmentedControl = SegmentedControl;
  exports.SelectList = SelectList;
  exports.Spinner = Spinner;
  exports.Sticky = Sticky;
  exports.Switch = Switch;
  exports.Tabs = Tabs;
  exports.Text = Text;
  exports.TextArea = TextArea;
  exports.TextField = TextField;
  exports.Toast = Toast;
  exports.Touchable = Touchable;
  exports.Video = Video;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
