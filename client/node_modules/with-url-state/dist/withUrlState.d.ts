import { Hash, LocationDescriptorObject, Pathname, Search, UnregisterCallback } from 'history';
import { Component, ComponentType, ReactElement } from 'react';
declare type PropMapper<Props, MappedProps> = (component: ComponentType<MappedProps>) => ComponentType<Props>;
export declare type UrlStateProps<T> = {
    setUrlState: (newState: T) => void;
    urlState: T;
};
export declare type HistoryAdapter = {
    location: {
        pathname: Pathname;
        search: Search;
        hash: Hash;
    };
    listen: (listener: () => void) => UnregisterCallback;
    push: (location: LocationDescriptorObject) => void;
    replace: (location: LocationDescriptorObject) => void;
};
export declare const html5HistoryAdapter: HistoryAdapter;
export declare type Parse<T> = (queryString: string) => T;
export declare type Stringify<T> = (state: T) => string;
export declare type Config<T> = {
    history: HistoryAdapter;
    serialisation: {
        parse: Parse<T>;
        stringify: Stringify<T>;
    };
    shouldPushState: (next: T, current: T) => boolean;
};
export declare type Props<T> = {
    config?: Partial<Config<T>>;
    initialState: T;
    render: (renderProps: UrlStateProps<T>) => ReactElement<any>;
};
export declare class UrlState<T> extends Component<Props<T>, T> {
    history: HistoryAdapter;
    state: T;
    unsubscribe: (() => void) | null;
    constructor(props: Props<T>);
    componentDidMount(): void;
    componentDidUpdate(): void;
    componentWillUnmount(): void;
    onLocationChange: () => void;
    setUrlState: (newState: T) => void;
    render(): ReactElement<any>;
}
export declare type HigherOrderConfig<T, OP> = {
    history: HistoryAdapter;
    serialisation: {
        parse: Parse<T>;
        stringify: Stringify<T>;
    };
    shouldPushState: (props: OP) => Config<T>['shouldPushState'];
};
export declare const withUrlState: <T extends object, OP>(getInitialState: (props: OP) => T, config?: Partial<HigherOrderConfig<T, OP>> | undefined) => PropMapper<OP, OP & UrlStateProps<T>>;
export {};
