"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var qs_1 = __importDefault(require("qs"));
var react_1 = require("react");
exports.html5HistoryAdapter = {
    listen: function (listener) {
        window.addEventListener('popstate', listener);
        return function () { return window.removeEventListener('popstate', listener); };
    },
    location: window.location,
    push: function (_a) {
        var search = _a.search;
        window.history.pushState(window.history.state, document.title, search);
        window.dispatchEvent(new window.Event('popstate'));
    },
    replace: function (_a) {
        var search = _a.search;
        window.history.replaceState(window.history.state, document.title, search);
        window.dispatchEvent(new window.Event('popstate'));
    },
};
var alwaysReplace = function () { return false; };
var parseConfig = function (config) {
    if (config === void 0) { config = {}; }
    return ({
        history: config.history ? config.history : exports.html5HistoryAdapter,
        serialisation: {
            parse: config.serialisation && config.serialisation.parse
                ? config.serialisation.parse
                : function (queryString) { return qs_1.default.parse(queryString, { ignoreQueryPrefix: true }); },
            stringify: config.serialisation && config.serialisation.stringify
                ? config.serialisation.stringify
                : function (state) { return qs_1.default.stringify(state, { addQueryPrefix: true }); },
        },
        shouldPushState: config.shouldPushState || alwaysReplace,
    });
};
var UrlState = /** @class */ (function (_super) {
    __extends(UrlState, _super);
    function UrlState(props) {
        var _this = _super.call(this, props) || this;
        _this.unsubscribe = null;
        _this.onLocationChange = function () {
            var serialisation = parseConfig(_this.props.config).serialisation;
            _this.setState(serialisation.parse(_this.history.location.search));
        };
        _this.setUrlState = function (newState) {
            var serialisation = parseConfig(_this.props.config).serialisation;
            var nextLocation = __assign({}, _this.history.location, { search: serialisation.stringify(newState) });
            _this.props.config &&
                _this.props.config.shouldPushState &&
                _this.props.config.shouldPushState(newState, _this.state)
                ? _this.history.push(nextLocation)
                : _this.history.replace(nextLocation);
        };
        var _a = parseConfig(_this.props.config), history = _a.history, serialisation = _a.serialisation;
        _this.history = history;
        // tslint:disable:no-any Typescript cant handle generic spread yet
        _this.state = __assign({}, props.initialState, serialisation.parse(history.location.search));
        return _this;
        // tslint:enable:no-any
    }
    UrlState.prototype.componentDidMount = function () {
        var serialisation = parseConfig(this.props.config).serialisation;
        this.unsubscribe = this.history.listen(this.onLocationChange);
        this.history.replace(__assign({}, this.history.location, { search: serialisation.stringify(this.state) }));
    };
    UrlState.prototype.componentDidUpdate = function () {
        var _a = parseConfig(this.props.config), history = _a.history, serialisation = _a.serialisation;
        if (this.history !== history) {
            if (this.unsubscribe != null) {
                this.unsubscribe();
            }
            this.unsubscribe = history.listen(this.onLocationChange);
            var state = __assign({}, this.props.initialState, serialisation.parse(history.location.search));
            history.replace(__assign({}, history.location, { search: serialisation.stringify(state) }));
        }
    };
    UrlState.prototype.componentWillUnmount = function () {
        if (this.unsubscribe != null) {
            this.unsubscribe();
        }
    };
    UrlState.prototype.render = function () {
        return this.props.render({
            setUrlState: this.setUrlState,
            urlState: this.state,
        });
    };
    return UrlState;
}(react_1.Component));
exports.UrlState = UrlState;
exports.withUrlState = function (getInitialState, config) { return function (WrappedComponent) { return function (props) {
    return react_1.createElement(UrlState, {
        initialState: getInitialState(props),
        config: __assign({}, config, { shouldPushState: config && config.shouldPushState && config.shouldPushState(props) }),
        render: function (_a) {
            var urlState = _a.urlState, setUrlState = _a.setUrlState;
            return react_1.createElement(WrappedComponent, __assign({}, props, { // tslint:disable-line:no-any Typescript cant handle generic spread yet,
                urlState: urlState,
                setUrlState: setUrlState }));
        },
    });
}; }; };
